<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Asset Analysis</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="Description" lang="en" content="Geodesignhub Asset Analysis">
    <meta name="author" content="Geodesignhub">
    <meta name="robots" content="index, follow">
    <!-- icons -->
    <link rel="shortcut icon" href="/assets/loaders/favicon.ico">
    <!-- Bootstrap Core CSS file -->
    <link rel="stylesheet" type="text/css" href="assets/css/bootstrap.min.css">
    <!-- Override CSS file - add your own CSS rules -->
    <link rel="stylesheet" type="text/css" href="assets/css/styles.css">
    <link rel="stylesheet" type="text/css" href="assets/css/ion.rangeSlider.css">
    <link rel="stylesheet" type="text/css" href="assets/css/ion.rangeSlider.skinFlat.css">
    <link rel="stylesheet" type="text/css" href="assets/css/flatty.css" />
    <link rel="stylesheet" type="text/css" href="assets/css/leaflet.css" />
    <link rel="stylesheet" type="text/css" href="assets/css/bootstrap-editable.css">
    <link rel="stylesheet" type="text/css" href="assets/css/select2.min.css">
    <link href='https://fonts.googleapis.com/css?family=EB+Garamond' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Playfair+Display' rel='stylesheet' type='text/css'>
    <!-- Conditional comment containing JS files for IE6 - 8 -->
    <!--[if lt IE 9]>
            <script src="assets/js/html5.js"></script>
            <script src="assets/js/respond.min.js"></script>
        <![endif]-->
</head>

<body>
    <!-- Navigation -->
    <nav class="navbar navbar-fixed-top navbar-inverse" role="navigation">
        <div class="container-fluid">
            <!-- Brand and toggle get grouped for better mobile display -->
            <div class="navbar-header">
                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand" href="#">Geodesignhub Asset Analysis</a>
            </div>
            <!-- /.navbar-header -->
            <!-- /.navbar-collapse -->
        </div>
        <!-- /.container-fluid -->
    </nav>
    <!-- /.navbar -->
    <!-- Page Content -->
    <div class="container-fluid">
        <!-- /.row -->
        <br>
        <!-- Heading Row -->
        <div class="row">
            
        </div>
        <div class="row">
            <input type="hidden" name="_csrf" value="<%= csrfToken %>">
            <div class="col-md-4">
                <h3>Diagram</h3>
                <div id="inputmap"></div>
                <h4 id="diagName"></h4>
                <h5 id="diagAreaLength"></h5>
                <h5 id="sysCost"></h5>
            </div>
            <div class="col-md-4">
              
              
                        <h3>Asset Class</h3>
                        <select id="base_asset_class" class="form-control">
                            <option selected disabled>Select Class</option>
                            <option data-value='residential'>Residential</option>
                            <option data-value='hospitality'>Tourism</option>
                            <option data-value='retail'>Retail</option>
                            <option data-value='office'>Office</option>
                            <option data-value='mixuse'>Mix Use</option>
                            <option data-value='transport'>Transport</option>
                            <option data-value='community'>Community</option>
                            <!--     <option data-value='tourism'>Tourism</option>
                                <option data-value='commercial'>Commercial</option>-->
                            <option data-value='agriculture'>Agriculture</option> 
                            <option data-value='green_infrastructure'>Green Infrastructure</option>
                        </select><br><br>
                        <select id="base_asset_subclass" class="form-control">
                            <option selected disabled>Select Subclass</option>
                        </select>
                        <br>

                <br>

                <div class='usage_form hidden' id="built_env_form_residential">
                    <h4>Total people housed: <a class="editable" href="#" id="number_of_people_residential" data-type="text"
                            data-title="Enter number of people living here">0</a></h4>
                    <h4>Total units: <a class="editable" href="#" id="residential_units" data-type="text" data-title="Enter new residential units e.g. 5">0</a></h4>

                    <h4>Number of floors: <a class="editable" href="#" id="residential_floors" data-type="text"
                            data-title="Enter new residential units e.g. 5">1</a></h4>
                    
                    
                    <h4>Floor Area Ratio: <a class="editable" href="#" id="residential_far" data-type="text"
                        data-title="Enter new Floor Area Ratio e.g. .7">.6</a></h4>
                        <br>
                <br>
                    <button id="recompute_residential" type="button" class="btn btn-info recompute"><i class="glyphicon glyphicon-certificate"></i> Recompute</button><br><br>
                   
                </div>

                <div class='usage_form hidden' id="built_env_form_tourism">
                    <h4>Average m2 per guest: <a class="editable" href="#" id="tourism_m2_per_guest" data-type="text" data-title="Enter new room size e.g. 5">58</a></h4>

                    <h4>Floors: <a class="editable" href="#" id="tourism_floors" data-type="text" data-title="Enter new floors e.g. 5">2</a></h4>

                    <h4>Land Area Factor: <a class="editable" href="#" id="tourism_land_area" data-type="text" data-title="Enter new land consumption factor  e.g. 5">3</a></h4>

                    <h4>Avg. People per room: <a class="editable" href="#" id="tourism_people_per_room" data-type="text" ata-title="Enter new people per room">3</a></h4>

                    <h4>Target Occupancy Rate: <a class="editable" href="#" id="target_occupancy_rate" data-type="text" data-title="Enter new target occupancy rate e.g. .7">.60</a></h4>
                    <br>
                   
                    <h4>Direct employees to visitors ratio: <a class="editable" href="#" id="direct_employees_to_visitor_ratio_tourism" data-type="text" data-title="Enter new ratio">.01</a></h4>
                    <h4>Indirect to direct employees ratio: <a class="editable" href="#" id="indirect_to_direct_employees_ratio_tourism" data-type="text" data-title="Enter new ratio">.2</a></h4>
                    <br>

                    <button id="recompute_tourism" type="button" class="btn btn-info recompute"><i class="glyphicon glyphicon-certificate"></i> Recompute</button>

                </div>


                <div class='usage_form hidden' id="built_env_form_transport">                    
                    <h4>Passenger-trips/day: <a class="editable" href="#" id="transport_passenger_trips" data-type="text" data-title="Enter new room size e.g. 5">12</a></h4><br>

                    <button id="recompute_transport" type="button" class="btn btn-info recompute"><i class="glyphicon glyphicon-certificate"></i> Recompute</button>


                </div>

                <div class='usage_form hidden' id="built_env_form_agriculture">        
                </div>

                <div class='usage_form hidden' id="built_env_form_green_infrastructure">        
                    </div>
    
                <div class='usage_form hidden' id="built_env_form_office">                    
                    <h4>Per capita space required in m2: <a class="editable" href="#" id="office_m2_per_visitor"
                            data-type="text" data-title="Enter new room size e.g. 5">12</a></h4>
                    <h4>Number of floors: <a class="editable" href="#" id="office_floors" data-type="text" data-title="Enter new floors e.g. 5">1</a></h4>
                    <h4>Expected office workers: <a class="editable" href="#" id="total_daily_visitors_office"
                            data-type="text" data-title="Enter a new office workers">300</a></h4>
                    <br>
                    
                    <h4>Direct employees to office workers ratio: <a class="editable" href="#" id="direct_employees_to_visitor_ratio_office" data-type="text" data-title="Enter new ratio">.01</a></h4>
                    <h4>Indirect to direct employees ratio: <a class="editable" href="#" id="indirect_to_direct_employees_ratio_office" data-type="text" data-title="Enter new ratio">.2</a></h4>

                    <br>
                    <button id="recompute_office" type="button" class="btn btn-info recompute"><i class="glyphicon glyphicon-certificate"></i> Recompute</button>

                </div>
                <div class='usage_form hidden' id="built_env_form_retail">
                    <h4>Per capita retail space <a class="editable" href="#" id="retail_m2_per_visitor" data-type="text"
                            data-title="Enter new room size e.g. 5">4</a></h4>
                    <h4>Number of floors: <a class="editable" href="#" id="retail_floors" data-type="text" data-title="Enter new floors e.g. 5">1</a></h4>
                    <h4>Expected daily visitors: <a class="editable" href="#" id="total_daily_visitors_retail"
                            data-type="text" data-title="Enter a new visitor number">3000</a></h4>
                    <br>
                    <h4>Direct employees to visitors ratio: <a class="editable" href="#" id="direct_employees_to_visitor_ratio_retail" data-type="text" data-title="Enter new ratio">.05</a></h4>
                    <h4>Indirect to direct employees ratio: <a class="editable" href="#" id="indirect_to_direct_employees_ratio_retail" data-type="text" data-title="Enter new ratio">.2</a></h4>        
                        
                    <br>
                    <div class="hidden">
                        <h5>% interested in Luxury Retail (e.g. name brands): <a class="editable" href="#" id="percent_interested_in_luxury_retail"
                                data-type="text" data-title="Enter percentage e.g. 0.15">.1</a></h5>
                        <h5>% interested in Support Retail (e.g office supplies): <a class="editable" href="#" id="percent_interested_in_support_retail"
                                data-type="text" data-title="Enter percentage e.g. 0.1">.4</a></h5>
                        <h5>% interested in FMCG Retail (e.g. groceries, medicines): <a class="editable" href="#" id="percent_interested_in_fmcg_retail"
                                data-type="text" data-title="Enter percentage e.g. 0.5">.3</a></h5>
                        <h5>% interested in other retail (e.g. food / restaurant): <a class="editable" href="#" id="percent_interested_in_food_retail"
                                data-type="text" data-title="Enter percentage e.g. 0.4">.2</a></h5>
                    
                    </div>
                    <br>

                    <button id="recompute_retail" type="button" class="btn btn-info recompute"><i class="glyphicon glyphicon-certificate"></i> Recompute</button>

                </div>


                <div class='usage_form hidden' id="built_env_form_mixuse">
                    <h4>Total people housed: <a class="editable" href="#" id="number_of_people_residential_mixuse" data-type="text" data-title="Enter number of people living here">0</a></h4>
                    <h4>Total units: <a class="editable" href="#" id="residential_units_mixuse" data-type="text" data-title="Enter new residential units e.g. 5">0</a></h4>

                    <h4>Number of floors: <a class="editable" href="#" id="residential_floors_mixuse" data-type="text" data-title="Enter new residential units e.g. 5">1</a></h4>
                    
                    
                    <h4>Floor Area Ratio: <a class="editable" href="#" id="residential_far_mixuse" data-type="text" data-title="Enter new Floor Area Ratio e.g. .7">.6</a></h4>
                        <br>
                
                        
                    <h4>Per capita retail space <a class="editable" href="#" id="retail_m2_per_visitor_mixuse" data-type="text"
                        data-title="Enter new shop size e.g. 5">4</a></h4>
                <h4>Number of floors: <a class="editable" href="#" id="retail_floors_mixuse" data-type="text" data-title="Enter new floors e.g. 5">1</a></h4>
                <h4>Expected visitors in area: <a class="editable" href="#" id="total_daily_visitors_retail_mixuse" data-type="text" data-title="Enter a new visitor number">3000</a></h4>
                <br>
                <h4>Direct employees to visitors ratio: <a class="editable" href="#" id="direct_employees_to_visitor_ratio_retail_mixuse" data-type="text" data-title="Enter new ratio">.05</a></h4>
                <h4>Indirect to direct employees ratio: <a class="editable" href="#" id="indirect_to_direct_employees_ratio_retail_mixuse" data-type="text" data-title="Enter new ratio">.2</a></h4>        
                    
                <br>
                <div class="hidden">
                    <h5>% interested in Luxury Retail (e.g. name brands): <a class="editable" href="#" id="percent_interested_in_luxury_retail_mixuse" data-type="text" data-title="Enter percentage e.g. 0.15">.1</a></h5>
                    <h5>% interested in Support Retail (e.g office supplies): <a class="editable" href="#" id="percent_interested_in_support_retail_mixuse" data-type="text" data-title="Enter percentage e.g. 0.1">.4</a></h5>
                    <h5>% interested in FMCG Retail (e.g. groceries, medicines): <a class="editable" href="#" id="percent_interested_in_fmcg_retail_mixuse" data-type="text" data-title="Enter percentage e.g. 0.5">.3</a></h5>
                    <h5>% interested in other retail (e.g. food / restaurant): <a class="editable" href="#" id="percent_interested_in_food_retail_mixuse" data-type="text" data-title="Enter percentage e.g. 0.4">.2</a></h5>                
                </div>
                <br>
                <button id="recompute_mixuse" type="button" class="btn btn-info recompute"><i class="glyphicon glyphicon-certificate"></i> Recompute</button>
                </div>

                <div class='usage_form hidden' id="built_env_form_community">
                    <h4>Number of people using daily (visitors): <a class="editable" href="#" id="community_visitors" data-type="text" data-title="Enter new number ">12</a></h4>
                    <h4>Number of people using daily (residents): <a class="editable" href="#" id="community_residents" data-type="text" data-title="Enter new number ">12</a></h4><br>
                    <button id="recompute_community" type="button" class="btn btn-info recompute"><i class="glyphicon glyphicon-certificate"></i> Recompute</button>
                </div>
                <div class='usage_form hidden' id="built_env_form_agriculture"></div>
                <div class='usage_form hidden' id="built_env_form_green-infrastructure"></div>
                <br>

            </div>
            
            <div class="col-md-4">            
                    <h3>Representative Image</h3>                        
                    <select id="base_asset_subclass_image" class="form-control">
                        <option selected disabled>Change Image</option>
                    </select>
                    <br> <br><br>
                    <div id="selected_typology_image">
                        <small>No representative image specified, choose asset class and pick image.</small>
                    </div>      
                </div>
        </div>
        <hr>
        <div class="row">
            <div class="col-md-6">
                <div id="services" class="services_form">
                    <h3>Services</h3>
                    <small>A summary of supporting services and assumptions that are needed to support this Asset class</small>
                    <h4>Community</h4>
                    <table class="table table-bordered">
                        <tbody>
                            <tr>
                                <th scope="row">Hospital Beds per capita</th>
                                <td>
                                    <span id="beds_per_capita"></span>
                                </td>
                                <td>Total beds: <span id='total_hospital_beds'></span><input type='hidden' id='total_hospital_beds_raw'></td>
                            </tr>
                            <tr>
                                <th scope="row">Policestations (cells) per capita</th>
                                <td>
                                    <span id="police_station_per_capita"></span>
                                </td>
                                <td>Total police stations (cells): <span id='total_police_stations'></span><input type='hidden' id='total_police_stations_raw'></td>
                            </tr>
                            <tr>
                                <th scope="row">Fire personnel per capita</th>
                                <td>
                                    <span id="fire_station_per_capita"></span>
                                </td>
                                <td>Total fire personnel: <span id='total_firestations'></span><input type='hidden' id='total_firestations_raw'></td>
                            </tr>
                            <tr>
                                <th scope="row">K12 Schools (m2) per student (5% of population)</th>
                                <td>
                                    <span id="school_per_capita"></span>
                                </td>
                                <td>Total school area required: <span id='total_schools'></span> m2<input type='hidden' id='total_schools_raw'> </td>
                            </tr>
                        </tbody>
                    </table>

                    <h4>Energy</h4>
                    <table class="table table-bordered">
                        <tbody>
                            <tr>
                                <th scope="row">Electricity demand per person (MWh / year) </th>
                                <td>
                                    <span id="energy_per_capita"></span>
                                </td>
                                <td>Total electricity demand: <span id='total_energy_demand'></span> MW <input type='hidden' id='total_energy_demand_raw'></td>
                            </tr>

                        </tbody>
                    </table>
                    <h4>Water</h4>

                    <table class="table table-bordered">
                        <tbody>

                            <th scope="row">Water demand (m3/year/person) </th>
                            <td>
                                <span id="water_per_capita"></span>
                            </td>
                            <td>Total water demand: <span id='total_water_demand'></span> m3 <input type='hidden' id='total_water_demand_raw'></td>
                            </tr>

                        </tbody>
                    </table>
                    <h4>Sewage</h4>

                    <table class="table table-bordered">
                        <tbody>
                            <tr>
                                <th scope="row">Sewage demand (m3/year/person)</th>
                                <td>
                                    <span id="sewage_per_capita"></span>
                                </td>
                                <td>Total sewage demand: <span id='total_sewage_demand'></span> m3 <input type='hidden' id='total_sewage_demand_raw'></td>
                            </tr>
                        </tbody>
                    </table>
                    <h4>Transport</h4>
                    <table class="table table-bordered">
                        <tbody>
                            <tr>
                                <th scope="row">% using Road (twice a day)</th>
                                <td>
                                    <span id="percent_road_usage"></span>
                                </td>

                                <td>Usage (people)</td>
                                <td><span id='total_road_usage'></span><input type='hidden' id='total_road_usage_raw'></td>
                            </tr>
                            <tr>
                                <th scope="row">% using Rail (twice a day)</th>
                                <td>
                                    <span id="percent_rail_usage"></span>
                                </td>

                                <td> Usage (people)</td>
                                <td><span id='total_rail_usage'></span><input type='hidden' id='total_rail_usage_raw'></td>
                            </tr>
                        </tbody>
                    </table>
                    
                    <h4>Parking</h4>
                    <table class="table table-bordered">
                        <tbody>
                            <tr>
                                <th scope="row">Recommended parking spaces ( 2 people per car, 50% usage)</th>
                                <td>
                                    <span id="parking_factor"></span>
                                </td>

                                <td>Total</td>
                                <td><span id='total_parking'></span><input type='hidden' id='total_parking_raw'></td>
                            </tr>
                        </tbody>
                    </table>
                    
                    <h4>Green Spaces</h4>
                    <table class="table table-bordered">
                        <tbody>
                            <tr>
                                <th scope="row">Per capita green space (m2)</th>
                                <td>
                                    <span id="per_capita_green_space"></span>
                                </td>

                                <td>Total</td>
                                <td><span id='total_green_space'></span><input type='hidden' id='total_green_space_raw'></td>
                            </tr>
                        
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="col-md-6">
               
                <div id="lu_chart_cont">
                    <h3>Land use Distribution</h3>
                    <canvas id="lu_chart" height="250"></canvas>
                </div>

                <div class="usage_form hidden" id="built_env_form_residential_secondary">                        
                    <h3>Population Density: <span id="current_pop_density"></span> people per km2</h3>
                    <br>
                    
                    <h4>Avg. Area per unit: <span id="avg_area_per_unit">0</span> </h4>                        
                    <h4>Total built floor area: <span id="total_floor_area_residential_built">0</span> m2</h4>
                    <h4>Total available area: <span id="total_floor_area_residential_available">0</span> m2</h4><br>
                    
                    <small>Population density of Monaco is 18,000 people per sq. km, Hong Kong is 6,400 people sq. km, Berlin is 4,000 people per sq. km. See more <a href="https://en.wikipedia.org/wiki/List_of_cities_by_population_density" target="_blank">on Wikipedia</a></small>
                    <br><br>
                </div>

                <div class="usage_form hidden" id="built_env_form_mixuse_secondary">                        
                    <h3>Population Density: <span id="current_pop_density_mixuse"></span> people per km2</h3>
                    <br>
                    
                    <h4>Avg. Area per unit: <span id="avg_area_per_unit_mixuse">0</span> </h4>                        
                    <h4>Total built floor area: <span id="total_floor_area_residential_built_mixuse">0</span> m2</h4>
                    <h4>Total available area: <span id="total_floor_area_residential_available_mixuse">0</span> m2</h4><br>
                    
                    <small>Population density of Monaco is 18,000 people per sq. km, Hong Kong is 6,400 people sq. km, Berlin is 4,000 people per sq. km. See more <a href="https://en.wikipedia.org/wiki/List_of_cities_by_population_density" target="_blank">on Wikipedia</a></small>
                    <br><br>
                    
                    <h4>Total Floor area needed <span id="total_floor_area_retail_required_mixuse">0</span> m2.</h4>
                    <div class="hidden">
                        <h6>of which Luxury <span id="total_floor_area_retail_luxury_split_mixuse">0</span> m2</h6>
                        <h6>of which Support <span id="total_floor_area_retail_support_split_mixuse">0</span> m2</h6>
                        <h6>of which FMCG <span id="total_floor_area_retail_fmcg_split_mixuse">0</span> m2</h6>
                        <h6>of which other <span id="total_floor_area_retail_other_split_mixuse">0</span> m2</h6>
                        <br>
                    </div>
                    <h4>Total Floor area available <span id="total_floor_area_retail_available_mixuse">0</span> m2</h4>
                    <br>
                    <br>
                    <h4>Total direct employment: <span id="total_direct_employment_retail_mixuse">0</span></h6>
                    <h4>Total indirect employment: <span id="total_indirect_employment_retail_mixuse">0</span></h6>     
                    <br><br>
                </div>

                <div class="usage_form hidden" id="built_env_form_tourism_secondary">
                   
                <h4>Total Rooms: <span id="tourism_total_rooms">3</span></h4>

                <h4>Yearly Visitors: <span id="total_yearly_visitors">3</span></h4>
                
                <h4>Daily Visitors: <span id="total_daily_visitors">3</span></h4>
                
                <h4>Total direct employment: <span id="total_direct_employment_tourism">0</span></h6>
                    <h4>Total indirect employment: <span id="total_indirect_employment_tourism">0</span></h6>
                    <br><br>
                </div>

                <div class="usage_form hidden" id="built_env_form_office_secondary">                    
                    <br>
                    <h4>Total Floor area available:&nbsp;<span id="total_floor_area_office_available">0</span> m2</h4>                    
                    <h4>Total Floor area needed:&nbsp;<span id="total_floor_area_office_required">0</span> m2</h4>
                    <br>
                    <h4>Total direct employment:&nbsp;<span id="total_direct_employment_office">0</span></h6>
                    <h4>Total indirect employment:&nbsp;<span id="total_indirect_employment_office">0</span></h6>
                <br>
                </div>

                <div class="usage_form hidden"  id="built_env_form_retail_secondary">              
                
                    <h4>Total Floor area needed <span id="total_floor_area_retail_required">0</span> m2.</h4>
                    <div class="hidden">
                        <h6>of which Luxury <span id="total_floor_area_retail_luxury_split">0</span> m2</h6>
                        <h6>of which Support <span id="total_floor_area_retail_support_split">0</span> m2</h6>
                        <h6>of which FMCG <span id="total_floor_area_retail_fmcg_split">0</span> m2</h6>
                        <h6>of which other <span id="total_floor_area_retail_other_split">0</span> m2</h6>
                        <br>
                    </div>
                    <h4>Total Floor area available <span id="total_floor_area_retail_available">0</span> m2</h4>
                    <br>
                    <br>
                    <h4>Total direct employment: <span id="total_direct_employment_retail">0</span></h6>
                    <h4>Total indirect employment: <span id="total_indirect_employment_retail">0</span></h6>                            
                <br>
                </div>


            </div>
        </div>
        <hr>
        <br>
        <div class="row">
            <div class="col-md-6">

                <h3>Financial Parameters</h3>
                <h5>Capital Expenditure / Initial Investment</h5>
                <p><input type="text" id="initcost-slider" name="initcost-slider" value="" /></p>
                <div class="row">
                    <div class="col-xs-4">
                        <p>Start year (0-30)<input type="text" id="initcost-syear" name="initcost-syear" value="0" /></p>
                    </div>
                    <div class="col-xs-4">
                        <p>End year (0-30)<input type="text" id="initcost-eyear" name="initcost-eyear" value="1" /></p>
                    </div>
                </div>

                <h5>Annual Cashflow</h5>

                <p><input type="text" id="acf-slider" name="acf-slider" value="" /></p>

                <div class="row">
                    <div class="col-xs-4">
                        <p>Start year (0-30)<input type="text" id="acf-syear" name="acf-syear" value="0" /></p>
                    </div>
                </div>


                <h5>Annual OpEx</h5>
                <p><input type="text" id="aopex-slider" name="aopex-slider" value="" /></p>
                <h5>Annual SGA</h5>
                <p><input type="text" id="asga-slider" name="asga-slider" value="" /></p>
                <h5>Annual cashflow growth (inflation)</h5>
                <p><input type="text" id="acfg-slider" name="acfg-slider" value="" /></p>
                <h5>Weighted Annual Cost of Capital (WACC)</h5>
                <p><input type="text" id="wacc-slider" name="wacc" value="" /></p>
                <p><button id="computeNPVButton" type="button" class="btn btn-info"><i class="glyphicon glyphicon-certificate"></i> Compute NPV</button>&nbsp;&nbsp;<span id="loadingGIF"><img src="/assets/loaders/loading.gif">&nbsp;<span id="procstatus">Processing</span>...</span>
                </p>
            </div>
            <div class="col-md-6">
                <h3>30-year Discounted Cash Flow</h3>
                <div id="dcfchart_cont">
                    <canvas id="chart" height="150"></canvas>
                </div>
                <br>
                <h3>DCF and NPV</h3>
                <p>Total discounted cashflow and the net present value (total cash flow - initial investment -
                    operational expenses - general expenses) is shown below.</p>
                <table class="table table-bordered">
                    <tr>
                        <td>
                            <h6>Total Discounted Cash Flow</h6>
                        </td>
                        <td>
                            <h3 id="totaldcf"></h3>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <h6>Net Present Value (NPV)</h6>
                        </td>
                        <td>
                            <h3 id="npvVal"></h3>
                            <p id="npvmeaning"></p>
                        </td>
                    </tr>
                </table>

            </div>
        </div><br>

        <!-- /.col-md-4 -->
        <!-- /.row -->
        <br>
        <div class="row">
            <div class="col-md-6">
                <h3>Remember parameters</h3>
                <br>
                <% if (projecttype == 'paid'){ %>
                    <button type="button" id="savevalues" class="btn btn-default btn-x-sm"><span class="glyphicon glyphicon-cloud" aria-hidden="true"></span> Save values on server </button> <br><br>
                <% } else{ %>  
                <small>This is only available for paid projects on Geodesignhub, you can save the values you enter so you dont have to enter them again.</small>
                <% } %>
            </div>
            <div class="col-md-6"></div>
        </div>
        <br><br><br>
        <div class="row">
            <div class="col-md-12">
                <h3>About</h3>
                <p class="description">This plugin downloads a diagram from Geodesignhub, additional properties like its area and set costs and provides tools for a basic <a href="https://en.wikipedia.org/wiki/Discounted_cash_flow" target="_blank">Discounted Cash Flow</a> analysis to calculate Net Present Value of this project. In additional detailed what-if asset analysis can also be conducted for this site and project to specify the population served and services load required.</p>
            </div>
        </div>
        
        <!-- Footer -->
        <hr>
        <footer>
            <div class="row">
                <div class="col-lg-12">
                    <p>&copy; 2019 Geodesignhub, see the <a href="https://geodesignhub.github.io/AssetAnalysis/">Github repository</a> for more information.</p>
                </div>
            </div>
        </footer>
        <div id="drawing"></div>
    </div>
    <!-- /.container-fluid -->
    <!-- JQuery scripts -->
    <script type="text/javascript" src="assets/js/jquery.min.js"></script>
    <script type="text/javascript" src="assets/js/humane.min.js"></script>
    <script type="text/javascript" src="assets/js/svg.min.js"></script>
    <script type="text/javascript" src="assets/js/chartjs.min.js"></script>
    <script type="text/javascript" src="assets/js/cleave.min.js"></script>

    <!-- Bootstrap Core scripts -->
    <script type="text/javascript" src="assets/js/ion.rangeSlider.min.js"></script>
    <script type="text/javascript" src="assets/js/bootstrap.min.js"></script>
    <script type="text/javascript" src="assets/js/bootstrap-editable.min.js"></script>
    <!-- <script type="text/javascript" src="assets/js/colors.js"></script> -->
    <script type="text/javascript" src="assets/js/leaflet.js"></script>
    <script type="text/javascript" src="assets/js/money.min.js"></script>
    <script type="text/javascript" src="assets/js/select2.min.js"></script>

    <script type="text/javascript">
        function abbrNum(number, decPlaces) {
            if (number < 1000) {
                number = Math.round(number);
            } else {
                decPlaces = Math.pow(10, decPlaces);
                var abbrev = ["k", "m", "b", "t"];
                for (var i = abbrev.length - 1; i >= 0; i--) {
                    var size = Math.pow(10, (i + 1) * 3);
                    if (size <= number) {
                        number = Math.round(number * decPlaces / size) / decPlaces;
                        if ((number == 1000) && (i < abbrev.length - 1)) {
                            number = 1;
                            i++;
                        }
                        number += abbrev[i];
                        break;
                    }
                }
            }
            return number;
        }
        var ctx = $("#chart");
        var svgDrawing = SVG('drawing').size(10, 10);
        // fx.base = "USD";
        
        Chart.defaults.global.defaultFontFamily = "'Playfair Display', Consolas, monaco, monospace";
        
        Chart.defaults.groupableBar = Chart.helpers.clone(Chart.defaults.bar);
            var helpers = Chart.helpers;
            Chart.controllers.groupableBar = Chart.controllers.bar.extend({
            calculateBarX: function (index, datasetIndex) {
                // position the bars based on the stack index
                var stackIndex = this.getMeta().stackIndex;
                return Chart.controllers.bar.prototype.calculateBarX.apply(this, [index, stackIndex]);
            },

            hideOtherStacks: function (datasetIndex) {
                var meta = this.getMeta();
                var stackIndex = meta.stackIndex;

                this.hiddens = [];
                for (var i = 0; i < datasetIndex; i++) {
                var dsMeta = this.chart.getDatasetMeta(i);
                if (dsMeta.stackIndex !== stackIndex) {
                    this.hiddens.push(dsMeta.hidden);
                    dsMeta.hidden = true;
                }
                }
            },

            unhideOtherStacks: function (datasetIndex) {
                var meta = this.getMeta();
                var stackIndex = meta.stackIndex;

                for (var i = 0; i < datasetIndex; i++) {
                var dsMeta = this.chart.getDatasetMeta(i);
                if (dsMeta.stackIndex !== stackIndex) {
                    dsMeta.hidden = this.hiddens.unshift();
                }
                }
            },

            calculateBarY: function (index, datasetIndex) {
                this.hideOtherStacks(datasetIndex);
                var barY = Chart.controllers.bar.prototype.calculateBarY.apply(this, [index, datasetIndex]);
                this.unhideOtherStacks(datasetIndex);
                return barY;
            },

            calculateBarBase: function (datasetIndex, index) {
                this.hideOtherStacks(datasetIndex);
                var barBase = Chart.controllers.bar.prototype.calculateBarBase.apply(this, [datasetIndex, index]);
                this.unhideOtherStacks(datasetIndex);
                return barBase;
            },

            getBarCount: function () {
                var stacks = [];

                // put the stack index in the dataset meta
                Chart.helpers.each(this.chart.data.datasets, function (dataset, datasetIndex) {
                var meta = this.chart.getDatasetMeta(datasetIndex);
                if (meta.bar && this.chart.isDatasetVisible(datasetIndex)) {
                    var stackIndex = stacks.indexOf(dataset.stack);
                    if (stackIndex === -1) {
                    stackIndex = stacks.length;
                    stacks.push(dataset.stack);
                    }
                    meta.stackIndex = stackIndex;
                }
                }, this);

                this.getMeta().stacks = stacks;
                return stacks.length;
            },
            });

        function populate_lu_chart(type, chart_data) {           
            
            var luctx =  document.getElementById('lu_chart').getContext('2d');
            
            var barChartData = {
                labels:  ['Area Available   -   Area taken'],
                datasets: [{
                    label: "Area Available",
                    backgroundColor: ["#003f5c"],
                    data: [chart_data['area_available']],
                    stack:1 
                },{
                    label: "Built Up",
                    backgroundColor: ["#58508d",],
                    data: [ chart_data['built_up_area']],
                    stack: 2
                },{
                    label: "Green Spaces",
                    backgroundColor: ["#4daf4a"],
                    data: [chart_data['green_space']],
                    stack: 2
                },{
                    label: "Parking",
                    backgroundColor: ["#377eb8"],
                    data: [chart_data['parking']],
                    stack: 2
                }
            ]
            };

            var myChart = new Chart(luctx, {
                type: 'groupableBar',
                data: barChartData,
                options: {
                   
                    scales: {
                        yAxes: [{
                            stacked: true,
                        }]
                        }
                }
                
            });
        }
        function miniMapstyleComp(feature) {
            // console.log(feature.properties)
            var curFeature = feature.geometry.type;
            if (curFeature === 'LineString') {
                // console.log(feature)
                return {
                    weight: 2,
                    opacity: .9,
                    color: feature.properties.color,
                    dashArray: '',

                };
            } else {
                // var fillColor = getColor(feature.properties.areatype);

                if (feature.properties.areatype == 'project') {
                    var fillColor = feature.properties.color;
                } else { // it is policy
                    var fillPattern = setSVGStyle(feature.properties.color);
                    var fillColor = fillPattern;
                }

                return {
                    // fillColor: feature.properties.color,
                    // fillColor:'#333333',
                    weight: 1,
                    stroke: true,
                    opacity: 0.9,
                    fillColor: fillColor,
                    color: feature.properties.color,
                    dashArray: '',
                    // opacity: 0.2,
                    fillOpacity: 0.8,
                };
            }

        }

        function setSVGStyle(reqColor) {
            var pattern = svgDrawing.pattern(6, 6, function (add) {
                // add.rect(5, 5).fill(reqColor)
                add.line(0, 0, 6, 6).stroke({
                    width: 1,
                    color: reqColor
                })
                add.line(6, 0, 0, 6).stroke({
                    width: 1,
                    color: reqColor
                })
            });
            return pattern.fill();
        }

        function getColor(type) {

            return type === 'policy' ? '#707070 ' :
                type === 'project' ? '#a69695 ' :
                type === 'red2' ? '#bd0026' :
                type === 'red' ? '#f03b20' :
                type === 'yellow' ? '#FFFF00' :
                type === 'green' ? '#74c476' :
                type === 'green2' ? '#31a354' :
                type === 'green3' ? '#006d2c' :
                type === 'purple' ? '#CFACF7' :
                type === 'purple2' ? '#8D6CBF' :
                type === 'purple3' ? '#601286' :
                type === 'orange' ? '#FFA927' :
                type === 'orange2' ? '#F8872E' :
                type === 'orange3' ? '#FC6B0A' :
                type === 'constraints' ? '#343434' :
                type === 'boundaries' ? '#a6cee3' :
                type === 'boundaries2' ? '#b2df8a' :
                '#808080';
        }
        $("#loadingGIF").hide();
        var opGJ = {
            "type": "FeatureCollection",
            "features": []
        };
        var systems = <%- systems %>;
        var diagramdetail = <%- diagramdetail %>;
        var apitoken = "<%= apitoken  %>"; //var test is now assigned to getTest which will only work on browsers
        var projectid = "<%= projectid %>";
        var diagramid = "<%= diagramid %>";
        var defaultvalues = <%- defaultvalues %>;

        var systemdetail = <%- systemdetail %>;
        const projecttype = "<%= projecttype %>";
        const all_images = <%- all_image_files %>;
        var representative_image = "";

        var totalcost;
        $("#diagName").html(diagramdetail['description']);
       
        if (diagramdetail['length'] == 0) {
            $("#diagAreaLength").html("Area: " + parseFloat((diagramdetail['area'] / 10000)).toFixed(2) + " ha.");
            if (diagramdetail['cost_override'] !== 0) {
                if (diagramdetail['cost_override_type'] == 'total') {
                    totalcost = parseFloat(diagramdetail['cost_override']).toFixed(2);
                } else {
                    totalcost = parseFloat((diagramdetail['area'] / 10000)).toFixed(2) * diagramdetail['cost_override'];
                }
            } else {
                totalcost = parseFloat((diagramdetail['area'] / 10000)).toFixed(2) * systemdetail['syscost'];
                // console.log(totalcost);
            }

        } else if (diagramdetail['area'] == 0) {
            
            $("#diagAreaLength").html("Length: " + diagramdetail['length'] + " km.");
            totalcost = parseFloat(diagramdetail['length']) * systemdetail['syscost'];
        }

        $("#sysCost").html("Total cost: " + abbrNum(totalcost, 2) + " EUR");
        var inputmap = L.map('inputmap', {
            'zoomControl': false,
            'dragging': false,
            'touchZoom': false,
            'scrollWheelZoom': false,
            'doubleClickZoom': false
        });
        var inputbaseLayer = L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, &copy; <a href="https://cartodb.com/attributions">CartoDB</a>',
            maxZoom: 18,
        }).addTo(inputmap);
        var inputLayer = L.featureGroup().addTo(inputmap);
        var diagramLayer = L.geoJSON(diagramdetail['geojson'], {
            style: miniMapstyleComp
        }).addTo(inputLayer);
        inputmap.fitBounds(inputLayer.getBounds());

        function isNumeric(n) {
            return !isNaN(parseFloat(n)) && isFinite(n);
        }

        function computeNPV() {

            var initInvestment = parseInt(initCost);
            var acf = parseInt(acfCost);
            var aopex = parseInt(aopexCost);
            var asga = parseInt(asgaCost);
            var acfg = (parseFloat($("#acfg-slider").val()) / 100);
            var wacc = (parseFloat($("#wacc-slider").val()) / 100);
            var numYears = 30;
            var income = [];
            var lastyearsincome;
            var yearsPlot = [];


            const init_investement_syear = isNumeric($("#initcost-syear").val()) ? parseInt($("#initcost-syear").val()) :
                0;
            const init_investement_eyear = isNumeric($("#initcost-eyear").val()) ? parseInt($("#initcost-eyear").val()) :
                1;
            const acf_syear = isNumeric($("#acf-syear").val()) ? parseInt($("#acf-syear").val()) : 0;

            const investment_duration = init_investement_eyear - init_investement_syear;
            const yearly_investement = initInvestment / investment_duration;

            // ebitda = (ebitda < 0) ? 0 : ebitda;
            for (var x = 0; x < numYears; x++) {
                yearsPlot.push(x);
                var c_acf = 0;
                if (x <= acf_syear) {
                    c_acf = 0;
                } else {
                    c_acf = acf;
                }

                if (x >= init_investement_syear && x < init_investement_eyear) {
                    var ebitda = c_acf - yearly_investement - aopex - asga;
                } else {
                    var ebitda = c_acf - aopex - asga;
                }

                if (x == 0) {
                    income.push(parseFloat(ebitda.toFixed(2)));
                } else {
                    lastyearsincome = income[x - 1];
                    var thisyearsincome = ebitda + (lastyearsincome * acfg);
                    income.push(parseFloat(thisyearsincome.toFixed(2)));
                }

            }
            var dcf = [];
            for (var y = 0; y < numYears; y++) {
                var curdcf = ((income[y]) / Math.pow((1 + wacc), y));
                dcf.push(parseFloat(curdcf.toFixed(2)));
            }

            var totaldcf = dcf.reduce(function (a, b) {
                return a + b;
            }, 0);
            var absdcf = Math.abs(totaldcf);
            if (totaldcf < 0) {
                $("#totaldcf").html('-' + abbrNum(parseFloat(absdcf.toFixed(2)), 2));
            } else {
                $("#totaldcf").html(abbrNum(parseFloat(absdcf.toFixed(2)), 2));
            }
            var npv = initInvestment - totaldcf;
            var absnpv = Math.abs(npv);

            if (npv < 0) {
                $("#npvVal").html('-' + abbrNum(parseFloat(absnpv.toFixed(2)), 2));
            } else {
                $("#npvVal").html(abbrNum(parseFloat(absnpv.toFixed(2)), 2));
            }
            if (npv > 0) {
                $("#npvmeaning").html(
                    "<p class='bg-danger'>Given the parameters, this investement is currently overvalued. </p>");

            } else {
                $("#npvmeaning").html(
                    "<p class='bg-success'>Given the parameters, this investement is currently undervalued.</p>");
            }

            $("#loadingGIF").hide();
            // plot

            var plotData = {
                labels: yearsPlot,
                datasets: [{
                    label: "Actual Cash Flow",
                    fill: false,
                    lineTension: 0.1,
                    backgroundColor: "rgba(75,192,192,0.4)",
                    borderColor: "rgba(75,192,192,1)",
                    borderCapStyle: 'butt',
                    borderDash: [],
                    borderDashOffset: 0.0,
                    borderJoinStyle: 'miter',
                    pointBorderColor: "rgba(75,192,192,1)",
                    pointBackgroundColor: "#fff",
                    pointBorderWidth: 1,
                    pointHoverRadius: 5,
                    pointHoverBackgroundColor: "rgba(75,192,192,1)",
                    pointHoverBorderColor: "rgba(220,220,220,1)",
                    pointHoverBorderWidth: 2,
                    pointRadius: 1,
                    pointHitRadius: 10,
                    data: income,
                    spanGaps: false,
                }, {
                    label: "Discounted Cash Flow",
                    fill: false,
                    lineTension: 0.1,
                    backgroundColor: "rgba(255,99,132,0.2)",
                    borderColor: "rgba(255,99,132,1)",
                    pointBackgroundColor: "rgba(255,99,132,1)",
                    pointBorderColor: "#fff",
                    pointHoverBackgroundColor: "#fff",
                    pointHoverBorderColor: "rgba(255,99,132,1)",
                    borderCapStyle: 'butt',
                    borderDash: [],
                    borderDashOffset: 0.0,
                    borderJoinStyle: 'miter',
                    pointBorderWidth: 1,
                    pointHoverRadius: 5,
                    pointHoverBorderWidth: 2,
                    pointRadius: 1,
                    pointHitRadius: 10,
                    data: dcf,
                    spanGaps: false,
                }]
            };

            var myChart = new Chart(ctx, {
                type: 'line',
                data: plotData,
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true
                            }
                        }],
                        xAxes: [{
                            scaleLabel: {
                                display: true,
                                labelString: 'Years'
                            }
                        }]
                    }
                }
            });

        }

        $('#computeNPVButton').on('click', function (e) {
            $("#loadingGIF").show();
            computeNPV();
        });
        var selectedcurrency = $("#workingcurrency :selected").val() + " ";
        $("#workingcurrency").on('change', function () {
            selectedcurrency = this.value + " ";

        });


        var initCost = parseInt(totalcost);
        var acfCost = 100000;
        var aopexCost = 0;
        var asgaCost = 0;

        function initCostSliders() {


            const totalcost = (defaultvalues['capex'] == "0") ? parseInt(initCost) : parseInt(defaultvalues['capex']);


            const acf = (defaultvalues['acf'] == "0") ? parseInt(totalcost * 0.1) : defaultvalues['acf'];
            const opex = (defaultvalues['opex'] == "0") ? parseInt(totalcost * 0.05) : defaultvalues['opex'];
            const asga = (defaultvalues['asga'] == "0") ? parseInt(totalcost * 0.01) : defaultvalues['asga'];

            const capex_start = (defaultvalues.hasOwnProperty("capex_start")) ? defaultvalues["capex_start"] : 0;

            const capex_end = (defaultvalues.hasOwnProperty("capex_end")) ? defaultvalues["capex_end"] : 1;

            const acf_start = (defaultvalues.hasOwnProperty("acf_start")) ? defaultvalues["acf_start"] : 0;



            $("#initcost-slider").val(totalcost);
            $("#acf-slider").val(acf);
            $("#aopex-slider").val(opex);
            $("#asga-slider").val(asga);
            $("#initcost-syear").val(capex_start);
            $("#initcost-eyear").val(capex_end);
            $("#acf-syear").val(acf_start);

            var costcleave = new Cleave('#initcost-slider', {
                numeral: true,
                numeralThousandsGroupStyle: 'thousand',
                onValueChanged: function (e) {
                    initCost = e.target.rawValue;
                }
            });

            var acfcleave = new Cleave('#acf-slider', {
                numeral: true,
                numeralThousandsGroupStyle: 'thousand',
                onValueChanged: function (e) {
                    acfCost = e.target.rawValue;
                }
            });


            var aopexcleave = new Cleave('#aopex-slider', {
                numeral: true,
                numeralThousandsGroupStyle: 'thousand',
                onValueChanged: function (e) {
                    aopexCost = e.target.rawValue;
                }
            });


            var asagacleave = new Cleave('#asga-slider', {
                numeral: true,
                numeralThousandsGroupStyle: 'thousand',
                onValueChanged: function (e) {
                    asgaCost = e.target.rawValue;
                }
            });


        }

        function initpercentSliders() {

            
            const acfg = (defaultvalues.hasOwnProperty("acfg")) ? defaultvalues["acfg"]*100 : 0;
            
            const wacc = (defaultvalues.hasOwnProperty("wacc")) ? defaultvalues["wacc"]*100 : 0;

            $("#acfg-slider").ionRangeSlider({
                min: 0,
                max: 20,
                from:acfg, 
                step: 0.05,
                postfix: "%",
                grid: true,
                prettify_enabled: true
            });
            $("#wacc-slider").ionRangeSlider({
                min: 0,
                max: 20,
                step: 0.05,
                from: wacc,
                postfix: "%",
                grid: true,
                prettify_enabled: true
            });
        }
        initCostSliders();
        initpercentSliders();
        //built and non-built environment
        // Agriculture source: https://owlcation.com/agriculture/Types-of-Agriculture
        const data = {
            "residential": "Luxury,High Priced,Mid Priced,Low Priced,Affordable Housing,Full Rennovation,Medium Rennovation,Low Rennovation",
            "hospitality": "Upscale Hotel,Midscale Hotel,Budget Hotel,Full Rennovation,Medium Rennovation,Low Rennovation",
            "community": "Community Center,Playground,Amenity,Full Rennovation,Medium Rennovation,Low Rennovation",
            "tourism": "Eco Tourism,Low Density Attraction,High Density Attraction,Full Rennovation,Medium Rennovation,Low Rennovation",
            "retail": "New Build,Full Rennovation,Medium Rennovation,Low Rennovation",
            "mixuse": "New Build,Full Rennovation,Medium Rennovation,Low Rennovation",
            "office": "New Build,Full Rennovation,Medium Rennovation,Low Rennovation",
            "transport": "Bikes, Car, Buses, Train, Airport, Sea port, Highway, Street, Ferries",
            "agriculture": "Nomadic Herding,Livestock Ranching,Shifting Cultivation,Rudimentary Sedentary Tillage, Subsistence Farming with Rice Dominant, Subsistence Farming without Rice Dominant, Commercial Plantations, Mediterranean Agriculture, Commercial Grain Farming, Livestock and Grain Farming, Subsistence Crop and Stock Farming, Dairy Framing, Specialized Horticulture",
            "green_infrastructure": "Park,Garden,Woodland,Tree line, Forest",
            "blue_infrastructure": "Dikes,Barrier walls"
        };

        $('#base_asset_subclass').on('change', function (e) {
            if ($("#base_asset_class").find("option:selected").attr('data-value') == 'residential') {
                myResidentialControl.update(0, 0);
            } else if ($("#base_asset_class").find("option:selected").attr('data-value') == 'hospitality') {
                myTourismControl.update(0, 0);            
            } else if ($("#base_asset_class").find("option:selected").attr('data-value') == 'retail') {
                myRetailControl.update(0, 0);            
            } else if ($("#base_asset_class").find("option:selected").attr('data-value') == 'office') {
                myOfficeControl.update(0, 0);
            }else if ($("#base_asset_class").find("option:selected").attr('data-value') == 'mixuse') {
                myMixedUseControl.update(0, 0);
            }else if ($("#base_asset_class").find("option:selected").attr('data-value') == 'transport') {
                myTransportControl.update(0, 0);
            }else if ($("#base_asset_class").find("option:selected").attr('data-value') == 'community') {
                myCommunityControl.update(0, 0);
            }
        });
        $('#recompute_residential').on('click', function (e) {
            myResidentialControl.recompute();
            //your awesome code here
        });
        $('#recompute_tourism').on('click', function (e) {
            myTourismControl.recompute();
            //your awesome code here
        });
        $('#recompute_retail').on('click', function (e) {
            myRetailControl.recompute();
            //your awesome code here
        });
        $('#recompute_office').on('click', function (e) {
            myOfficeControl.recompute();
            //your awesome code here
        });
        
        $('#recompute_mixuse').on('click', function (e) {
            myMixedUseControl.recompute();
            //your awesome code here
        });
        $('#recompute_transport').on('click', function (e) {
            myTransportControl.recompute();
            //your awesome code here
        });
        
        $('#recompute_community').on('click', function (e) {
            myCommunityControl.recompute();
            //your awesome code here
        });
        $('#base_asset_class').on('change', function (e) {
            const key = $(this).find("option:selected").attr('data-value');
            updateClassControls(key);
        });

        function updateClassControls(base_class_type) {
            $(".usage_form").each(function (index) {
                $(this).removeClass("hidden");
                $(this).hide();
            });

            var vals = [];
            $("#selected_typology_image").html('<small>No representative image specified, choose asset class and pick image.</small>');
            var filtered_images= [];
            // $("#base_asset_subclass_image").select2('destroy');
            $("#base_asset_subclass_image").empty();
            switch (base_class_type) {
                case 'residential':                    
                    vals = data.residential.split(",");
                    $(".usage_form").hide();
                    $("#built_env_form_residential").show();
                    $("#built_env_form_residential_secondary").show();
                    
                    $("#services").show();
                    $("#lu_chart_cont").show();
                    var $secondChoice = $("#base_asset_subclass");
                    $secondChoice.empty();
                    $secondChoice.append("<option selected disabled>Select Asset Subclass</option>");
                    $.each(vals, function (index, value) {
                        $secondChoice.append("<option >" + value + "</option>");
                    });
            
            
                    myResidentialControl.initialize();
                    myResidentialControl.update(0, 0);
                    break;
                case 'mixuse':                    
                    vals = data.mixuse.split(",");
                    $(".usage_form").hide();
                    $("#built_env_form_mixuse").show();
                    $("#built_env_form_mixuse_secondary").show();
                    
                    $("#services").show();
                    $("#lu_chart_cont").show();
                    var $secondChoice = $("#base_asset_subclass");
                    $secondChoice.empty();
                    $secondChoice.append("<option selected disabled>Select Asset Subclass</option>");
                    $.each(vals, function (index, value) {
                        $secondChoice.append("<option >" + value + "</option>");
                    });
            
            
                    myMixedUseControl.initialize();
                    myMixedUseControl.update(0, 0);
                    break;
                case 'hospitality':
                    vals = data.hospitality.split(",");
                    $(".usage_form").hide();
                    $("#built_env_form_tourism").show();
                    $("#built_env_form_tourism_secondary").show();
                    $("#services").show();
                    $("#lu_chart_cont").show();
                    var $secondChoice = $("#base_asset_subclass");
                    $secondChoice.empty();
                    $secondChoice.append("<option selected disabled>Select Asset Subclass</option>");
                    $.each(vals, function (index, value) {
                        $secondChoice.append("<option >" + value + "</option>");
                    });
            
            
                    myTourismControl.initialize();
                    myTourismControl.update();
                    break;
                case 'retail':
                    vals = data.retail.split(",");
                    $(".usage_form").hide();
                    $("#services").show();
                    $("#lu_chart_cont").show();
                    var $secondChoice = $("#base_asset_subclass");
                    $secondChoice.empty();
                    $secondChoice.append("<option selected disabled>Select Asset Subclass</option>");
                    $.each(vals, function (index, value) {
                        $secondChoice.append("<option >" + value + "</option>");
                    });
            
            
                    $("#built_env_form_retail").show();
                    $("#built_env_form_retail_secondary").show();
                    myRetailControl.initialize();
                    myRetailControl.update();
                    break;
                case 'office':
                    vals = data.office.split(",");
                    $(".usage_form").hide();
                    $("#services").show();
                    $("#lu_chart_cont").show();
                    var $secondChoice = $("#base_asset_subclass");
                    $secondChoice.empty();
                    $secondChoice.append("<option selected disabled>Select Asset Subclass</option>");
                    $.each(vals, function (index, value) {
                        $secondChoice.append("<option >" + value + "</option>");
                    });

                    $("#built_env_form_office").show();
                    $("#built_env_form_office_secondary").show();
                    myOfficeControl.initialize();
                    myOfficeControl.update();
                    break;
                    
                case 'transport':
                    vals = data.transport.split(",");
                    $(".usage_form").hide();
                    $("#built_env_form_transport").show();                    
                    $("#services").hide();
                    $("#lu_chart_cont").hide();
                    
                    var $secondChoice = $("#base_asset_subclass");
                    $secondChoice.empty();
                    $secondChoice.append("<option selected disabled>Select Asset Subclass</option>");
                    $.each(vals, function (index, value) {
                        $secondChoice.append("<option >" + value + "</option>");
                    });

                    myTransportControl.initialize();
                    myTransportControl.update();
                    break;
                case 'community':
                    vals = data.community.split(",");
                    $(".usage_form").hide();
                    $("#built_env_form_community").show();
                    
                    $("#services").show();
                    $("#lu_chart_cont").show();
                    var $secondChoice = $("#base_asset_subclass");
                    $secondChoice.empty();
                    $secondChoice.append("<option selected disabled>Select Asset Subclass</option>");
                    $.each(vals, function (index, value) {
                        $secondChoice.append("<option >" + value + "</option>");
                    });
            
                    myCommunityControl.initialize();
                    myCommunityControl.update();
                    break;
                // case 'green-infrastruture':
                //     vals = data.retail.split(",");
                //     $(".usage_form").hide();
                //     $("#built_env_form_green-infrastructure").show();
                //     break;

                case 'agriculture':
                    vals = data.agriculture.split(",");
                    $(".usage_form").hide();
                    $("#services").hide();
                    $("#lu_chart_cont").hide();
                    $("#built_env_form_agriculture").show();
                    var $secondChoice = $("#base_asset_subclass");
                    $secondChoice.empty();
                    $secondChoice.append("<option selected disabled>Select Asset Subclass</option>");
                    $.each(vals, function (index, value) {
                        $secondChoice.append("<option >" + value + "</option>");
                    });
            
                    break;                    
            
                case 'green_infrastructure':
                    vals = data.green_infrastructure.split(",");
                    $(".usage_form").hide();
                    $("#services").hide();
                    $("#lu_chart_cont").hide();
                    $("#built_env_form_green_infrastructure").show();
                    var $secondChoice = $("#base_asset_subclass");
                    $secondChoice.empty();
                    $secondChoice.append("<option selected disabled>Select Asset Subclass</option>");
                    $.each(vals, function (index, value) {
                        $secondChoice.append("<option >" + value + "</option>");
                    });
            
                    break;                    
            
                case 'base':
                    vals = ['Please choose from above'];
            }
            if (base_class_type== 'residential') {
                const res_filtered_images = all_images.filter(function (str) { return str.includes('residential')});
                const res_mix_filtered_images = all_images.filter(function (str) { return str.includes('mix')});
                filtered_images = res_filtered_images.concat(res_mix_filtered_images);

            } 
            else if (base_class_type ==='retail' || base_class_type=== 'office') {
                const commercial_filtered_images = all_images.filter(function (str) { return str.includes('commercial')});
                const mix_filtered_images =  all_images.filter(function (str) { return str.includes('mix')});
                filtered_images = commercial_filtered_images.concat(mix_filtered_images);

            
            } 
            else if (base_class_type ==='mixuse' || base_class_type=== 'office') {
                filtered_images =  all_images.filter(function (str) { return str.includes('mix')});
            
            } 
            else if (base_class_type ==='transport') {
                filtered_images =  all_images.filter(function (str) { return str.includes('transport')});
            
            } 
            else if (base_class_type ==='hospitality') {
                const tourism_filtered_images = all_images.filter(function (str) { return str.includes('tourism')});                
                const com_filtered_images =  all_images.filter(function (str) { return str.includes('commercial')});
                filtered_images = tourism_filtered_images.concat(com_filtered_images);
            }

            // else if (base_class_type ==='community') {
                // filtered_images =  all_images.filter(function (str) { return str.includes('community')});
            // }

            var d = [];
            
            for (let i9 = 0; i9 < filtered_images.length; i9++) {
                var d1 = [];                
                const element = filtered_images[i9];
                d1['id'] = i9;
                d1['base_class'] = base_class_type;
                d1['image_path'] =element;
                d1['text']= "<span><img src='assets/img/asset-images/thumbnails/"+element+"' /></span>";
                d.push(d1);                
            };
            
            $("#base_asset_subclass_image").select2({
                minimumResultsForSearch: -1,
                placeholder: "Select a image",
                data: d,
                templateResult: function (d) { return $(d.text); },
                templateSelection: function (d) { return $(d.base_class); },
                
            });

            $('#base_asset_subclass_image').on('select2:select', function (e) {
                var data = e.params.data;
                const image_path = data['image_path'];
                if(image_path){
                representative_image = image_path;
                $("#selected_typology_image").html("<img src='assets/img/asset-images/"+image_path+"'/>");
                }
                
            });

        }

        var ResidentialCalaulator = function () {
            this.generateResidentialUnits = function (diagramArea, sysName, sysTag) {

                var whiteListedSysName = ['HDH', 'LDH', 'IND', 'COM', 'COMIND', 'HSNG', 'HSG', 'MXD'];

                var COMBuilding = function () {
                    const elevationoffset = 1;
                    const comHeights = [14, 25, 30, 22, 28];
                    const floorHeight = 5;
                    const avgUnitsize = 50;

                    this.generateUnits = function (area) {
                        var height = elevationoffset + comHeights[Math.floor(Math.random() * comHeights
                            .length)];
                        var numFloors = Math.round(height / floorHeight); // 5 meter per floor
                        var numUnitsperFloor = Math.round(area / avgUnitsize);
                        var totalUnits = numUnitsperFloor * numFloors;
                        return totalUnits;
                    };
                }

                var LDHousing = function () {
                    const elevationoffset = 1;
                    const ldhHeights = [1, 2, 3];
                    const floorHeight = 5;
                    const avgUnitsize = 100;

                    this.generateUnits = function (area) {
                        var height = elevationoffset + ldhHeights[Math.floor(Math.random() * ldhHeights
                            .length)];
                        var numFloors = Math.round(height / floorHeight); // 5 meter per floor
                        var numUnitsperFloor = Math.round(area / avgUnitsize);
                        var totalUnits = numUnitsperFloor * numFloors;
                        return totalUnits;
                    };
                }

                var HDHousing = function () {
                    const elevationoffset = 1;
                    const hdhHeights = [36, 60, 90]; // in meters 
                    const floorHeight = 5;
                    const avgUnitsize = 50;

                    this.generateUnits = function (area) {
                        var height = elevationoffset + hdhHeights[Math.floor(Math.random() * hdhHeights
                            .length)];
                        var numFloors = Math.round(height / floorHeight); // 5 meter per floor
                        var numUnitsperFloor = Math.round(area / avgUnitsize);
                        var totalUnits = numUnitsperFloor * numFloors;
                        return totalUnits;
                    };
                }

                var MXDBuildings = function () {
                    const elevationoffset = 1;
                    const mxdHeights = [9, 12, 8, 11]; // in meters 
                    const floorHeight = 5;
                    const avgUnitsize = 75;

                    this.generateUnits = function (area) {
                        var height = elevationoffset + mxdHeights[Math.floor(Math.random() * mxdHeights
                            .length)];
                        var numFloors = Math.round(height / floorHeight); // 5 meter per floor
                        var numUnitsperFloor = Math.round(area / avgUnitsize);
                        var totalUnits = numUnitsperFloor * numFloors;
                        return totalUnits;
                    };
                }

                var LABBuildings = function () {
                    const elevationoffset = 1;
                    var labHeights = [10, 15];
                    const floorHeight = 5;
                    const avgUnitsize = 100;

                    this.generateUnits = function (area) {
                        var height = elevationoffset + labHeights[Math.floor(Math.random() * labHeights
                            .length)];
                        var numFloors = Math.round(height / floorHeight); // 5 meter per floor
                        var numUnitsperFloor = Math.round(area / avgUnitsize);
                        var totalUnits = numUnitsperFloor * numFloors;
                        return totalUnits;
                    };
                }

                var SMBBuildings = function () {
                    const elevationoffset = 1;
                    var smbHeights = [2, 3, 5, 6, 7, 10];
                    const floorHeight = 5;
                    const avgUnitsize = 75;

                    this.generateUnits = function (area) {
                        var height = elevationoffset + smbHeights[Math.floor(Math.random() * smbHeights
                            .length)];
                        var numFloors = Math.round(height / floorHeight); // 5 meter per floor
                        var numUnitsperFloor = Math.round(area / avgUnitsize);
                        var totalUnits = numUnitsperFloor * numFloors;
                        return totalUnits;
                    };
                }


                if (whiteListedSysName.indexOf(sysName) >= 0) { // system is whitelisted
                    if ((sysName === 'HDH') || (sysName === 'HSNG') || (sysName === 'HSG')) {

                        var hdh = new HDHousing();
                        units = hdh.generateUnits(diagramArea);
                    } else if (sysName === 'MXD') {


                        var mxd = new MXDBuildings();
                        var units = mxd.generateUnits(diagramArea);
                    } else if (sysName === 'LDH') {
                        var ldh = new LDHousing();
                        units = ldh.generateUnits(diagramArea);

                    } else if ((sysName === 'COM') || (sysName === 'COMIND') || (sysName === 'IND')) {
                        var com = new COMBuilding();
                        units = com.generateUnits(diagramArea);

                    }
                } else if ((sysTag === 'Large buildings, Industry, commerce')) { // system not whitelisted
                    var lab = new LABBuildings();
                    units = lab.generateUnits(diagramArea);

                } else if ((sysTag === 'Small buildings, low density housing')) { // system not whitelisted 
                    var smb = new SMBBuildings();
                    units = smb.generateUnits(diagramArea);
                    // yeild = 16;
                } else {
                    units = 0;
                    // yeild = 12; // default yeild
                }
                return units;
            }

            this.initcompute = function () {
                const numresidences = parseInt($("#residential_units").editable('getValue', true));
                const population = parseInt($("#number_of_people_residential").editable('getValue', true));
                const floors = parseInt($("#residential_floors").editable('getValue', true));
                const far = parseInt($("#residential_far").editable('getValue', true));
                // const population = $('#number_of_people_residential').editable('setValue', numresidences * 4);
                this.update(numresidences, population, floors, far);

            }
            this.initialize = function () {

                $('#residential_units').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });


                $('#residential_floors').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });


                $('#residential_far').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a decimal"
                        }
                    }
                });

                $('#number_of_people_residential').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });

            }
            this.recompute = function () {
                myDisplayUpdater = new ServicesDisplayUpdater();
                const numresidences = parseInt($("#residential_units").editable('getValue', true));
                const population = parseInt($("#number_of_people_residential").editable('getValue', true));
                const floors = parseInt($("#residential_floors").editable('getValue', true));

                const far = parseFloat($("#residential_far").editable('getValue', true));
     

                var diagram_area = diagramdetail['area'];
                const area_in_km2 = (diagram_area / 1000000);
                const max_buildable_area_in_m2 = (diagram_area * floors);
                const new_population_density = population / area_in_km2;
                const total_floor_area_residential_available = parseInt((diagram_area * far * floors));                
                const max_floor_area_available_per_floor = parseInt((diagram_area * far));   
                const residences_per_floor =  numresidences / floors;                

                const total_floor_area_residential_available_per_floor = parseInt((total_floor_area_residential_available / floors));
                const avg_area_per_unit = (parseInt(total_floor_area_residential_available_per_floor) / parseInt(numresidences));

                $("#current_pop_density").html(abbrNum(new_population_density, 2));
                $("#total_floor_area_residential_built").html(abbrNum(total_floor_area_residential_available, 2));
                $("#total_floor_area_residential_available").html(abbrNum(max_buildable_area_in_m2, 2));
                $("#avg_area_per_unit").html(abbrNum(parseInt(avg_area_per_unit), 2) + ' m2 / ' + abbrNum(total_floor_area_residential_available_per_floor, 2) + ' m2 per floor');                

                myDisplayUpdater.updateBedsRecompute(population);
                myDisplayUpdater.updatePoliceStationsRecompute(population);
                myDisplayUpdater.updateFireStationsRecompte(population);
                myDisplayUpdater.updateSchoolsRecompute(population * 0.05);
                myDisplayUpdater.updateEnergyRecompute(population);
                myDisplayUpdater.updateWaterRecompute(population);
                myDisplayUpdater.updateSewageRecompute(population);
                const total_parking_area  = myDisplayUpdater.updateTransportRecompute(population, 2, 2);                
                const total_green_space_area = myDisplayUpdater.updateGreenSpaceRecompute(population);
                const lu_chart_data = {"area_available":max_buildable_area_in_m2, "built_up_area":total_floor_area_residential_available, "green_space":total_green_space_area[0], "parking":total_parking_area[0]};
                populate_lu_chart('residential', lu_chart_data);

            }
            this.update = function (units, population, floors) {
                const residential_class_defaults = {
                    "Luxury": {
                        "beds": 0.0025,
                        "police_stations": 0.0025,
                        "fire_stations": 0.0025,
                        "schools": 4,
                        "energy": 14,
                        "water": 220,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        },
                        "far":0.6,
                        "green_space":9,
                        "parking_demand":0.5
                    },
                    "High Priced": {
                        "beds": 0.0025,
                        "police_stations": 0.0025,
                        "fire_stations": 0.0025,
                        "schools": 4,
                        "energy": 14,
                        "water": 220,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        },
                        "far":0.6,
                        "green_space":9,
                        "parking_demand":0.5
                    },
                    "Mid Priced": {
                        "beds": 0.0035,
                        "police_stations": 0.0035,
                        "fire_stations": 0.0035,
                        "schools": 5,
                        "energy": 12.8,
                        "water": 200,
                        "sewage": 82,
                        "transport": {
                            'road': 0.3,
                            'rail': 0.7
                        },
                        "far":0.6,
                        "green_space":9,
                        "parking_demand":0.5
                    },
                    "Low Priced": {
                        "beds": 0.0045,
                        "police_stations": 0.0045,
                        "fire_stations": 0.0045,
                        "schools": 7,
                        "energy": 10,
                        "water": 180,
                        "sewage": 72,
                        "transport": {
                            'road': 0.4,
                            'rail': 0.6
                        },
                        "far":0.6,
                        "green_space":9,
                        "parking_demand":0.5
                    },
                    "Affordable Housing": {
                        "beds": 0.0055,
                        "police_stations": 0.0055,
                        "fire_stations": 0.0055,
                        "schools": 10,
                        "energy": 8,
                        "water": 160,
                        "sewage": 60,
                        "transport": {
                            'road': 0.5,
                            'rail': 0.5
                        },
                        "far":0.6,
                        "green_space":9,
                        "parking_demand":0.5
                    },
                    "Full Rennovation": {
                        "beds": 0.0055,
                        "police_stations": 0.0055,
                        "fire_stations": 0.0055,
                        "schools": 10,
                        "energy": 8,
                        "water": 160,
                        "sewage": 60,
                        "transport": {
                            'road': 0.5,
                            'rail': 0.5
                        },
                        "far":0.6,
                        "green_space":9,
                        "parking_demand":0.5
                    },
                    "Medium Rennovation": {
                        "beds": 0.0055,
                        "police_stations": 0.0055,
                        "fire_stations": 0.0055,
                        "schools": 10,
                        "energy": 8,
                        "water": 160,
                        "sewage": 60,
                        "transport": {
                            'road': 0.5,
                            'rail': 0.5
                        },
                        "far":0.6,
                        "green_space":9,
                        "parking_demand":0.5
                    },
                    "Low Rennovation": {
                        "beds": 0.0055,
                        "police_stations": 0.0055,
                        "fire_stations": 0.0055,
                        "schools": 10,
                        "energy": 8,
                        "water": 160,
                        "sewage": 60,
                        "transport": {
                            'road': 0.5,
                            'rail': 0.5
                        },
                        "far":0.6,
                        "green_space":9,
                        "parking_demand":0.5
                    }
                };


                myDisplayUpdater = new ServicesDisplayUpdater();

                var system_id = diagramdetail['sysid'];
                var diagram_area = diagramdetail['area'];
                var system_tag = systemdetail['systag'];
                var system_name = systemdetail['sysname'];

                if (units === 0 && population === 0) {
                    units = myResidentialControl.generateResidentialUnits(diagram_area, system_name, system_tag);
                    population = units * 4;
                    floors = 1
                }


                var selected_subclass = $("#base_asset_subclass").val();

                selected_subclass = (selected_subclass) ? selected_subclass : 'Mid Priced';
                const total_floor_area_residential_available = abbrNum(parseInt((diagram_area * residential_class_defaults[selected_subclass]['far'] * floors)),
                    2)

                $("#total_floor_area_residential_available").html(total_floor_area_residential_available);
                $("#residential_units").editable('setValue', units);
                $("#number_of_people_residential").editable('setValue', population);

                const area_in_km2 = (diagram_area / 1000000);
                const new_population_density = population / area_in_km2;

                $("#current_pop_density").html(abbrNum(new_population_density, 2));

                myDisplayUpdater.updateBeds(population, residential_class_defaults[selected_subclass]['beds']);
                myDisplayUpdater.updatePoliceStations(population, residential_class_defaults[selected_subclass]
                    ['police_stations']);
                myDisplayUpdater.updateFireStations(population, residential_class_defaults[selected_subclass][
                    'fire_stations'
                ]);
                myDisplayUpdater.updateSchools(population * 0.05, residential_class_defaults[selected_subclass]
                    ['schools']);
                myDisplayUpdater.updateEnergy(population, residential_class_defaults[selected_subclass][
                    'energy'
                ]);
                myDisplayUpdater.updateWater(population, residential_class_defaults[selected_subclass]['water']);
                myDisplayUpdater.updateSewage(population, residential_class_defaults[selected_subclass][
                    'sewage'
                ]);
                myDisplayUpdater.updateTransport(population, residential_class_defaults[selected_subclass]['transport']['road'], residential_class_defaults[selected_subclass]['transport']['rail'], 2, 2,0.5);

                myDisplayUpdater.updateGreenSpace(population, residential_class_defaults[selected_subclass]['green_space']);

                myDisplayUpdater.updateParking(population*.5, residential_class_defaults[selected_subclass]['parking_demand']);

            }
        }

        var TourismDisplayUpdater = function () {

            this.updateRooms = function (area) {
                const land_area = $("#tourism_land_area").editable('getValue', true);
                const floors = $("#tourism_floors").editable('getValue', true);
                const m2_per_guest = $("#tourism_m2_per_guest").editable('getValue', true);
                const people_per_room = $("#tourism_people_per_room").editable('getValue', true);

                const rooms = (area / (people_per_room * m2_per_guest * land_area)) * floors;
                $("#tourism_total_rooms").html(parseInt(rooms));
                return rooms;
            }
        
            this.updateEmployment = function (total_daily_visitors) {
                
                const direct_employees_to_visitor_ratio_tourism = $("#direct_employees_to_visitor_ratio_tourism").editable('getValue', true);
                const indirect_to_direct_employees_ratio_tourism = $("#indirect_to_direct_employees_ratio_tourism").editable('getValue', true);
                $("#total_direct_employment_tourism").html(parseInt(direct_employees_to_visitor_ratio_tourism * total_daily_visitors));
                $("#total_indirect_employment_tourism").html(parseInt(indirect_to_direct_employees_ratio_tourism* total_daily_visitors));

            }
        }

        var TourismCalaulator = function () {

            this.initialize = function () {

                $('#tourism_m2_per_guest').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });

                $('#tourism_people_per_room').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });

                $('#tourism_floors').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });

                $('#tourism_land_area').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });

                $('#target_occupancy_rate').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });

                $('#indirect_to_direct_employees_ratio_tourism').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });

                $('#direct_employees_to_visitor_ratio_tourism').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });


            }
            this.recompute = function () {

                const diagram_area = diagramdetail['area']
                myDisplayUpdater = new TourismDisplayUpdater();
                const m2_per_guest = parseInt($("#tourism_m2_per_guest").editable("getValue", true));
                const floors = parseInt($("#tourism_floors").editable("getValue", true));
                const land_area = parseInt($("#tourism_land_area").editable("getValue", true));
                const target_occupancy_rate = parseFloat($("#target_occupancy_rate").editable('getValue', true));
                const people_per_room = parseInt($("#tourism_people_per_room").editable('getValue', true));

                const rooms = myTourismDisplayUpdater.updateRooms(diagram_area);

                
                const direct_employees_to_visitor_ratio_tourism = $("#direct_employees_to_visitor_ratio_tourism").editable('getValue', true);
                const indirect_to_direct_employees_ratio_tourism = $("#indirect_to_direct_employees_ratio_tourism").editable('getValue', true);

                $("#tourism_total_rooms").html(parseInt(rooms));
                const daily_visitors = rooms * target_occupancy_rate * people_per_room;
                const yearly_visitors =  daily_visitors* 365;
                
                $("#total_yearly_visitors").html(parseInt(yearly_visitors));
                $("#total_daily_visitors").html(parseInt(daily_visitors));

                $("#total_direct_employment_tourism").html(parseInt(direct_employees_to_visitor_ratio_tourism * daily_visitors));
                $("#total_indirect_employment_tourism").html(parseInt(indirect_to_direct_employees_ratio_tourism* daily_visitors));


                myDisplayUpdater = new ServicesDisplayUpdater();

                myDisplayUpdater.updateBedsRecompute(yearly_visitors);
                myDisplayUpdater.updatePoliceStationsRecompute(yearly_visitors);
                myDisplayUpdater.updateFireStationsRecompte(yearly_visitors);
                myDisplayUpdater.updateSchoolsRecompute(yearly_visitors * 0.05);
                myDisplayUpdater.updateEnergyRecompute(yearly_visitors);
                myDisplayUpdater.updateWaterRecompute(yearly_visitors);
                myDisplayUpdater.updateSewageRecompute(yearly_visitors);

                const land_usage = myDisplayUpdater.updateLandUsageRecompute(diagram_area);
                const green_space = myDisplayUpdater.updateGreenSpaceRecompute(daily_visitors);
                
                const lu_chart_data = {"area_available":diagram_area, "built_up_area":land_usage, "green_space":green_space[0], "parking":0};    
                
                populate_lu_chart('tourism', lu_chart_data);

            }
            this.update = function () {

                const tourism_class_defaults = {
                    "Luxury": {
                        "tourism_m2_per_guest": 60,
                        "tourism_floors": 2,
                        "tourism_land_area": 3,
                        "target_occupancy_rate": .70,
                        "people_per_room": 3,
                        "avg_length_of_stay": 2,
                        "beds": 0.0045,
                        "police_stations": 0.0045,
                        "fire_stations": 0.0045,
                        "schools": 0,
                        "energy": 14,
                        "water": 220,
                        "direct_employees_to_visitor_ratio":2,
                        "indirect_to_direct_employees_ratio":.05,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        },
                        "green_space":3,
                        "parking_demand":0.5
                    },
                    "Upscale Hotel": {
                        "tourism_m2_per_guest": 50,
                        "tourism_floors": 4,
                        "tourism_land_area": 2.7,
                        "target_occupancy_rate": .70,
                        "people_per_room": 2,
                        "avg_length_of_stay": 2,
                        "beds": 0.0045,
                        "police_stations": 0.0045,
                        "fire_stations": 0.0045,
                        "schools": 0,
                        "energy": 14,
                        "direct_employees_to_visitor_ratio":0.5,
                        "indirect_to_direct_employees_ratio":.05,
                        "water": 220,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        },
                        "green_space":3,
                        "parking_demand":0.5
                    },
                    "Midscale Hotel": {
                        "tourism_m2_per_guest": 40,
                        "tourism_floors": 5,
                        "tourism_land_area": 2,
                        "target_occupancy_rate": .70,
                        "people_per_room": 3,
                        "avg_length_of_stay": 4,
                        "beds": 0.0045,
                        "direct_employees_to_visitor_ratio":0.25,
                        "indirect_to_direct_employees_ratio":.05,
                        "police_stations": 0.0045,
                        "fire_stations": 0.0045,
                        "schools": 0,
                        "energy": 14,
                        "water": 220,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        },
                        "green_space":3,
                        "parking_demand":0.5
                    },
                    "Budget Hotel": {
                        "tourism_m2_per_guest": 30,
                        "tourism_floors": 6,
                        "tourism_land_area": 1.5,
                        "target_occupancy_rate": .75,
                        "people_per_room": 1,
                        "avg_length_of_stay": 1,
                        "beds": 0.0045,
                        "police_stations": 0.0045,
                        "direct_employees_to_visitor_ratio":0.1,
                        "indirect_to_direct_employees_ratio":.05,
                        "fire_stations": 0.0045,
                        "schools": 0,
                        "energy": 14,
                        "water": 220,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        },                        
                        "green_space":3,
                        "parking_demand":0.5
                    },
                    "Full Rennovation": {
                        "tourism_m2_per_guest": 30,
                        "tourism_floors": 6,
                        "tourism_land_area": 1.5,
                        "target_occupancy_rate": .75,
                        "people_per_room": 1,
                        "avg_length_of_stay": 1,
                        "beds": 0.0045,
                        "police_stations": 0.0045,
                        "direct_employees_to_visitor_ratio":0.1,
                        "indirect_to_direct_employees_ratio":.05,
                        "fire_stations": 0.0045,
                        "schools": 0,
                        "energy": 14,
                        "water": 220,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        },                        
                        "green_space":3,
                        "parking_demand":0.5
                    },
                    "Medium Rennovation": {
                        "tourism_m2_per_guest": 30,
                        "tourism_floors": 6,
                        "tourism_land_area": 1.5,
                        "target_occupancy_rate": .75,
                        "people_per_room": 1,
                        "avg_length_of_stay": 1,
                        "beds": 0.0045,
                        "police_stations": 0.0045,
                        "direct_employees_to_visitor_ratio":0.1,
                        "indirect_to_direct_employees_ratio":.05,
                        "fire_stations": 0.0045,
                        "schools": 0,
                        "energy": 14,
                        "water": 220,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        },                        
                        "green_space":3,
                        "parking_demand":0.5
                    },
                    "Low Rennovation": {
                        "tourism_m2_per_guest": 30,
                        "tourism_floors": 6,
                        "tourism_land_area": 1.5,
                        "target_occupancy_rate": .75,
                        "people_per_room": 1,
                        "avg_length_of_stay": 1,
                        "beds": 0.0045,
                        "police_stations": 0.0045,
                        "direct_employees_to_visitor_ratio":0.1,
                        "indirect_to_direct_employees_ratio":.05,
                        "fire_stations": 0.0045,
                        "schools": 0,
                        "energy": 14,
                        "water": 220,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        },                        
                        "green_space":3,
                        "parking_demand":0.5
                    }
                };


                myTourismDisplayUpdater = new TourismDisplayUpdater();
                var diagram_area = diagramdetail['area'];
                var rooms = myTourismDisplayUpdater.updateRooms(diagram_area);
             
                var selected_subclass = $("#base_asset_subclass").val();
                selected_subclass = (selected_subclass) ? selected_subclass : 'Midscale Hotel';
               
                $("#tourism_m2_per_guest").editable('setValue', tourism_class_defaults[selected_subclass]["tourism_m2_per_guest"]);
                $("#tourism_floors").editable('setValue', tourism_class_defaults[selected_subclass]["tourism_floors"]);
                $("#tourism_people_per_room").editable('setValue', tourism_class_defaults[selected_subclass]["people_per_room"]);
                $("#tourism_land_area").editable('setValue', tourism_class_defaults[selected_subclass]["tourism_land_area"]);
                $("#target_occupancy_rate").editable('setValue', tourism_class_defaults[selected_subclass]["target_occupancy_rate"]);
                $('#direct_employees_to_visitor_ratio_tourism').editable('setValue', tourism_class_defaults[selected_subclass]["direct_employees_to_visitor_ratio"]);
                $('#indirect_to_direct_employees_ratio_tourism').editable('setValue', tourism_class_defaults[selected_subclass]["indirect_to_direct_employees_ratio"]);

                const population = rooms * tourism_class_defaults[selected_subclass]["target_occupancy_rate"] * tourism_class_defaults[selected_subclass]["people_per_room"] * 365;
                const daily_population = population / 365;
                $("#total_yearly_visitors").html(parseInt(population));
                
                $("#total_daily_visitors").html(parseInt(daily_population));
                
                myTourismDisplayUpdater.updateEmployment(population);
                myDisplayUpdater = new ServicesDisplayUpdater();
                myDisplayUpdater.updateBeds(population, tourism_class_defaults[selected_subclass]['beds']);
                myDisplayUpdater.updatePoliceStations(population, tourism_class_defaults[selected_subclass]['police_stations']);
                myDisplayUpdater.updateFireStations(population, tourism_class_defaults[selected_subclass]['fire_stations']);
                myDisplayUpdater.updateSchools(population * 0.05, tourism_class_defaults[selected_subclass]['schools']);
                myDisplayUpdater.updateEnergy(population, tourism_class_defaults[selected_subclass]['energy']);
                myDisplayUpdater.updateWater(population, tourism_class_defaults[selected_subclass]['water']);
                myDisplayUpdater.updateSewage(population, tourism_class_defaults[selected_subclass]['sewage']);
                const total_parking_area  = myDisplayUpdater.updateTransport(population, tourism_class_defaults[selected_subclass]['transport']['road'], tourism_class_defaults[selected_subclass]['transport']['rail'], 2, 2);
                const total_green_space_area = myDisplayUpdater.updateGreenSpace(population, tourism_class_defaults[selected_subclass]['green_space']);
                myDisplayUpdater.updateParking(population*.5, tourism_class_defaults[selected_subclass][
                    'parking_demand'
                ]);
                
            }
        }

        var RetailCalaulator = function () {
            this.initialize = function () {
                $('#retail_m2_per_visitor').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });

                $('#retail_floors').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });

                $('#total_daily_visitors_retail').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });

                $('#percent_interested_in_luxury_retail').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });

                $('#percent_interested_in_support_retail').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });

                $('#percent_interested_in_fmcg_retail').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });
                $('#percent_interested_in_food_retail').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });
                $('#direct_employees_to_visitor_ratio_retail').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });
                $('#indirect_to_direct_employees_ratio_retail').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });


            }
            this.recompute = function () {
                const diagram_area = diagramdetail['area']

                const retail_m2_per_visitor = $("#retail_m2_per_visitor").editable('getValue', true);
                const total_daily_visitors = $("#total_daily_visitors_retail").editable('getValue', true);
                const number_of_floors = $("#retail_floors").editable('getValue', true);
                const percent_interested_luxury = $("#percent_interested_in_luxury_retail").editable('getValue',
                    true);
                const percent_interested_support = $("#percent_interested_in_support_retail").editable(
                    'getValue', true);
                const percent_interested_fmcg = $("#percent_interested_in_fmcg_retail").editable('getValue',
                    true);
                const percent_interested_food = $("#percent_interested_in_food_retail").editable('getValue',
                    true);

                const direct_employees_to_visitor_ratio_retail = $("#direct_employees_to_visitor_ratio_retail").editable('getValue', true);
                const indirect_to_direct_employees_ratio_retail = $("#indirect_to_direct_employees_ratio_retail").editable('getValue', true);
                const total_floor_area_luxury = (retail_m2_per_visitor * total_daily_visitors *
                    percent_interested_luxury);
                const total_floor_area_support = (retail_m2_per_visitor * total_daily_visitors *
                    percent_interested_support);
                const total_floor_area_fmcg = (retail_m2_per_visitor * total_daily_visitors *
                    percent_interested_fmcg);
                const total_floor_area_other = (retail_m2_per_visitor * total_daily_visitors *
                    percent_interested_food);

                const total_floor_area_retail = (total_floor_area_luxury + total_floor_area_support +
                    total_floor_area_fmcg + total_floor_area_other);
                $("#total_floor_area_retail_luxury_split").html(abbrNum(parseInt(total_floor_area_luxury), 2));
                $("#total_floor_area_retail_support_split").html(abbrNum(parseInt(total_floor_area_support), 2));
                $("#total_floor_area_retail_fmcg_split").html(abbrNum(parseInt(total_floor_area_fmcg), 2));
                $("#total_floor_area_retail_other_split").html(abbrNum(parseInt(total_floor_area_other), 2));
                const total_floor_area_retail_available = diagram_area * 0.8 * number_of_floors;
                $("#total_floor_area_retail_required").html(abbrNum(parseInt(total_floor_area_retail), 2));
 
                
                $("#total_floor_area_retail_available").html(abbrNum(parseInt(total_floor_area_retail_available), 2)); // only 80% of the area is available, rest for frontage etc. 

                $("#total_direct_employment_retail").html(parseInt(direct_employees_to_visitor_ratio_retail * total_daily_visitors));
                $("#total_indirect_employment_retail").html(parseInt(indirect_to_direct_employees_ratio_retail * total_daily_visitors));

                myDisplayUpdater = new ServicesDisplayUpdater();

                myDisplayUpdater.updateBedsRecompute(total_daily_visitors);
                myDisplayUpdater.updatePoliceStationsRecompute(total_daily_visitors);
                myDisplayUpdater.updateFireStationsRecompte(total_daily_visitors);
                myDisplayUpdater.updateSchoolsRecompute(total_daily_visitors * 0.05);
                myDisplayUpdater.updateEnergyRecompute(total_daily_visitors);
                myDisplayUpdater.updateWaterRecompute(total_daily_visitors);
                myDisplayUpdater.updateSewageRecompute(total_daily_visitors);
                // const total_parking_area  =  myDisplayUpdater.updateTransportRecompute(total_daily_visitors, 2, 2);                
                const total_green_space_area =  myDisplayUpdater.updateGreenSpaceRecompute(total_daily_visitors);
                const total_parking_area = myDisplayUpdater.updateParkingRecompute(total_daily_visitors*0.5);
                const lu_chart_data = {"area_available":total_floor_area_retail_available, "built_up_area":total_floor_area_retail, "green_space":total_green_space_area[0], "parking":total_parking_area};               
                populate_lu_chart('retail', lu_chart_data);

            }
            this.update = function () {

                const retail_class_defaults = {
                    "New Build": {
                        "retail_m2_per_visitor": 12,
                        "total_daily_visitors_retail": 2000,
                        "retail_floors": 2,
                        "percent_interested_in_luxury_retail": .1,
                        "percent_interested_in_support_retail": .2,
                        "percent_interested_in_fmcg_retail": .5,
                        "percent_interested_in_food_retail": .2,
                        "beds": 0.0045,
                        "police_stations": 0.0045,
                        "fire_stations": 0.0045,
                        "schools": 0,
                        "energy": 14,
                        "water": 220,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        },
                        
                        "green_space":1,
                        "parking_demand":0.5
                    },
                    "Full Rennovation": {
                        "retail_m2_per_visitor": 11,
                        "total_daily_visitors_retail": 1500,
                        "retail_floors": 2,
                        "percent_interested_in_luxury_retail": .1,
                        "percent_interested_in_support_retail": .2,
                        "percent_interested_in_fmcg_retail": .5,
                        "percent_interested_in_food_retail": .2,
                        "beds": 0.0045,
                        "police_stations": 0.0045,
                        "fire_stations": 0.0045,
                        "schools": 0,
                        "energy": 14,
                        "water": 220,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        },
                        
                        "green_space":1,
                        "parking_demand":0.5
                    },
                    "Medium Rennovation": {
                        "retail_m2_per_visitor": 10,
                        "total_daily_visitors_retail": 1100,
                        "retail_floors": 2,
                        "percent_interested_in_luxury_retail": .1,
                        "percent_interested_in_support_retail": .2,
                        "percent_interested_in_fmcg_retail": .5,
                        "percent_interested_in_food_retail": .2,
                        "beds": 0.0045,
                        "police_stations": 0.0045,
                        "fire_stations": 0.0045,
                        "schools": 0,
                        "energy": 14,
                        "water": 220,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        },
                        
                        "green_space":1,
                        "parking_demand":0.5
                    },
                    "Low Rennovation": {
                        "retail_m2_per_visitor": 8,
                        "total_daily_visitors_retail": 1000,
                        "retail_floors": 2,
                        "percent_interested_in_luxury_retail": .1,
                        "percent_interested_in_support_retail": .2,
                        "percent_interested_in_fmcg_retail": .5,
                        "percent_interested_in_food_retail": .2,
                        "beds": 0.0045,
                        "police_stations": 0.0045,
                        "fire_stations": 0.0045,
                        "schools": 0,
                        "energy": 14,
                        "water": 220,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        },
                        
                        "green_space":1,
                        "parking_demand":0.5
                    }
                };


                var selected_subclass = $("#base_asset_subclass").val();
                selected_subclass = (selected_subclass) ? selected_subclass : 'New Build';


                $("#retail_m2_per_visitor").editable('setValue', retail_class_defaults[selected_subclass]['retail_m2_per_visitor']);
                $("#total_daily_visitors_retail").editable('setValue',  retail_class_defaults[selected_subclass]['total_daily_visitors_retail']);
                $("#retail_floors").editable('setValue', retail_class_defaults[selected_subclass]['retail_floors']);
                $("#percent_interested_in_luxury_retail").editable('setValue', retail_class_defaults[selected_subclass]['percent_interested_in_luxury_retail']);
                $("#percent_interested_in_support_retail").editable(
                    'setValue', retail_class_defaults[selected_subclass]['percent_interested_in_support_retail']);
                $("#percent_interested_in_fmcg_retail").editable('setValue', retail_class_defaults[selected_subclass]['percent_interested_in_fmcg_retail']);
                $("#percent_interested_in_food_retail").editable('setValue',retail_class_defaults[selected_subclass]['percent_interested_in_fmcg_retail']);



                const population = parseInt(retail_class_defaults[selected_subclass]['retail_m2_per_visitor']);
                myDisplayUpdater = new ServicesDisplayUpdater();
                myDisplayUpdater.updateBeds(population, retail_class_defaults[selected_subclass]['beds']);
                myDisplayUpdater.updatePoliceStations(population, retail_class_defaults[selected_subclass][
                    'police_stations'
                ]);
                myDisplayUpdater.updateFireStations(population, retail_class_defaults[selected_subclass][
                    'fire_stations'
                ]);
                myDisplayUpdater.updateSchools(population * 0.05, retail_class_defaults[selected_subclass][
                    'schools'
                ]);
                myDisplayUpdater.updateEnergy(population, retail_class_defaults[selected_subclass]['energy']);
                myDisplayUpdater.updateWater(population, retail_class_defaults[selected_subclass]['water']);
                myDisplayUpdater.updateSewage(population, retail_class_defaults[selected_subclass]['sewage']);
                const total_parking_area  =    myDisplayUpdater.updateTransport(population, retail_class_defaults[selected_subclass][
                    'transport'
                ]['road'], retail_class_defaults[selected_subclass]['transport']['rail'], 2, 2,0.5);

                const total_green_space_area = myDisplayUpdater.updateGreenSpace(population, retail_class_defaults[selected_subclass]['green_space']);
                
            }


        }

        var OfficeCalaulator = function () {
            this.initialize = function () {

                $('#office_m2_per_visitor').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });
                $('#office_floors').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });
                $('#total_daily_visitors_office').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });
                $('#direct_employees_to_visitor_ratio_office').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });
                $('#indirect_to_direct_employees_ratio_office').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });

            }
            this.recompute = function () {
                const office_m2_per_visitor = $("#office_m2_per_visitor").editable('getValue', true);
                const total_daily_visitors_office = $("#total_daily_visitors_office").editable('getValue', true);
                const office_floors = $("#office_floors").editable('getValue', true);
                const direct_employees_to_visitor_ratio = $("#direct_employees_to_visitor_ratio_office").editable('getValue', true);
                const indirect_to_direct_employees_ratio_office = $("#indirect_to_direct_employees_ratio_office").editable('getValue', true);

                const diagram_area = diagramdetail['area']

                const total_floor_area_office = ((office_m2_per_visitor * total_daily_visitors_office));
                // const total_floor_area_office_per_floor = (total_floor_area_office / office_floors);
                const total_floor_area_available = parseInt(diagram_area * 0.8 * office_floors);

                $("#total_floor_area_office_required").html(abbrNum(parseInt(total_floor_area_office), 2));
                $("#total_floor_area_office_available").html(abbrNum(total_floor_area_available,2));
            
                $("#total_direct_employment_office").html(parseInt(direct_employees_to_visitor_ratio * total_daily_visitors_office));
                $("#total_indirect_employment_office").html(parseInt(indirect_to_direct_employees_ratio_office * total_daily_visitors_office));

                myDisplayUpdater = new ServicesDisplayUpdater();

                myDisplayUpdater.updateBedsRecompute(total_daily_visitors_office);
                myDisplayUpdater.updatePoliceStationsRecompute(total_daily_visitors_office);
                myDisplayUpdater.updateFireStationsRecompte(total_daily_visitors_office);
                myDisplayUpdater.updateSchoolsRecompute(total_daily_visitors_office * 0.05);
                myDisplayUpdater.updateEnergyRecompute(total_daily_visitors_office);
                myDisplayUpdater.updateWaterRecompute(total_daily_visitors_office);
                myDisplayUpdater.updateSewageRecompute(total_daily_visitors_office);
                const total_parking_area  = myDisplayUpdater.updateTransportRecompute(total_daily_visitors_office, 2, 2);                
                const total_green_space_area = myDisplayUpdater.updateGreenSpaceRecompute(total_daily_visitors_office);
                
                const lu_chart_data = {"area_available":total_floor_area_available, "built_up_area":total_floor_area_office, "green_space":total_green_space_area[0], "parking":total_parking_area[0]};
                populate_lu_chart('office', lu_chart_data);
                
            }


            this.update = function () {

                const office_class_defaults = {
                    "New Build": {
                        "office_m2_per_visitor": 12,
                        "total_daily_visitors_office": 2000,
                        "office_floors": 2,
                        "beds": 0.0045,
                        "direct_employees_to_visitor_ratio":.1,
                        "indirect_to_direct_employees_ratio":.05,
                        "police_stations": 0.0045,
                        "fire_stations": 0.0045,
                        "schools": 0,
                        "energy": 14,
                        "water": 220,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        }, 
                        "green_space":1,
                        "parking_demand":0.5
                    },
                    "Full Rennovation": {
                        "office_m2_per_visitor": 12,
                        "total_daily_visitors_office": 1800,
                        "office_floors": 2,
                        "beds": 0.0045,
                        "direct_employees_to_visitor_ratio":.1,
                        "indirect_to_direct_employees_ratio":.05,
                        "police_stations": 0.0045,
                        "fire_stations": 0.0045,
                        "schools": 0,
                        "energy": 14,
                        "water": 220,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        }, 
                        "green_space":1,
                        "parking_demand":0.5
                    },
                    "Medium Rennovation": {
                        "office_m2_per_visitor": 11,
                        "total_daily_visitors_office": 1600,
                        "office_floors": 2,
                        "beds": 0.0045,
                        "direct_employees_to_visitor_ratio":.1,
                        "indirect_to_direct_employees_ratio":.05,
                        "police_stations": 0.0045,
                        "fire_stations": 0.0045,
                        "schools": 0,
                        "energy": 14,
                        "water": 220,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        }, 
                        "green_space":1,
                        "parking_demand":0.5
                    },
                    "Low Rennovation": {
                        "office_m2_per_visitor": 10,
                        "total_daily_visitors_office": 1500,
                        "office_floors": 2,
                        "beds": 0.0045,
                        "direct_employees_to_visitor_ratio":.1,
                        "indirect_to_direct_employees_ratio":.05,
                        "police_stations": 0.0045,
                        "fire_stations": 0.0045,
                        "schools": 0,
                        "energy": 14,
                        "water": 220,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        }, 
                        "green_space":1,
                        "parking_demand":0.5
                    }
                };


                var selected_subclass = $("#base_asset_subclass").val();
                selected_subclass = (selected_subclass) ? selected_subclass : 'New Build';
                var diagram_area = diagramdetail['area'];

                $("#office_m2_per_visitor").editable('setValue', office_class_defaults[selected_subclass]['office_m2_per_visitor']);
                $("#total_daily_visitors_office").editable('setValue',  office_class_defaults[selected_subclass]['total_daily_visitors_office']);
                $("#office_floors").editable('setValue', office_class_defaults[selected_subclass]['office_floors']);
                const office_floors = office_class_defaults[selected_subclass]['office_floors'];
                $("#direct_employees_to_visitor_ratio_office").editable('setValue', office_class_defaults[selected_subclass]['direct_employees_to_visitor_ratio']);
                $("#indirect_to_direct_employees_ratio_office").editable('setValue', office_class_defaults[selected_subclass]['direct_employees_to_visitor_ratio']);
                const population = parseInt(office_class_defaults[selected_subclass]['total_daily_visitors_office']);


                const total_floor_area_office = (( office_class_defaults[selected_subclass]['office_m2_per_visitor'] * office_class_defaults[selected_subclass]['total_daily_visitors_office']));
                $("#total_floor_area_office_required").html(abbrNum(parseInt(total_floor_area_office), 2));
                $("#total_floor_area_office_available").html(abbrNum(parseInt(diagram_area * 0.8 * office_floors),2));
            
                const direct_employees_to_visitor_ratio = $("#direct_employees_to_visitor_ratio_office").editable('getValue', true);
                const indirect_to_direct_employees_ratio_office = $("#indirect_to_direct_employees_ratio_office").editable('getValue', true);
                $("#total_direct_employment_office").html(parseInt(direct_employees_to_visitor_ratio * office_class_defaults[selected_subclass]['total_daily_visitors_office']),2);
                $("#total_indirect_employment_office").html(parseInt(indirect_to_direct_employees_ratio_office * office_class_defaults[selected_subclass]['total_daily_visitors_office']),2);


                
                myDisplayUpdater = new ServicesDisplayUpdater();
                myDisplayUpdater.updateBeds(population, office_class_defaults[selected_subclass]['beds']);
                myDisplayUpdater.updatePoliceStations(population, office_class_defaults[selected_subclass][
                    'police_stations'
                ]);
                myDisplayUpdater.updateFireStations(population, office_class_defaults[selected_subclass][
                    'fire_stations'
                ]);
                myDisplayUpdater.updateSchools(population * 0.05, office_class_defaults[selected_subclass][
                    'schools'
                ]);
                myDisplayUpdater.updateEnergy(population, office_class_defaults[selected_subclass]['energy']);
                myDisplayUpdater.updateWater(population, office_class_defaults[selected_subclass]['water']);
                myDisplayUpdater.updateSewage(population, office_class_defaults[selected_subclass]['sewage']);
                const total_parking_area  = myDisplayUpdater.updateTransport(population, office_class_defaults[selected_subclass][
                    'transport'
                ]['road'], office_class_defaults[selected_subclass]['transport']['rail'], 2, 2,0.5);
                const total_green_space_area = myDisplayUpdater.updateGreenSpace(population, office_class_defaults[selected_subclass]['green_space']);
               myDisplayUpdater.updateParking(population*0.5, office_class_defaults[selected_subclass]['parking_demand'])

            }


        }

        var MixedUseCalaulator = function () {
            this.generateResidentialUnits = function (diagramArea, sysName, sysTag) {

                var whiteListedSysName = ['HDH', 'LDH', 'IND', 'COM', 'COMIND', 'HSNG', 'HSG', 'MXD'];

                var COMBuilding = function () {
                    const elevationoffset = 1;
                    const comHeights = [14, 25, 30, 22, 28];
                    const floorHeight = 5;
                    const avgUnitsize = 50;

                    this.generateUnits = function (area) {
                        var height = elevationoffset + comHeights[Math.floor(Math.random() * comHeights
                            .length)];
                        var numFloors = Math.round(height / floorHeight); // 5 meter per floor
                        var numUnitsperFloor = Math.round(area / avgUnitsize);
                        var totalUnits = numUnitsperFloor * numFloors;
                        return totalUnits;
                    };
                }

                var LDHousing = function () {
                    const elevationoffset = 1;
                    const ldhHeights = [1, 2, 3];
                    const floorHeight = 5;
                    const avgUnitsize = 100;

                    this.generateUnits = function (area) {
                        var height = elevationoffset + ldhHeights[Math.floor(Math.random() * ldhHeights
                            .length)];
                        var numFloors = Math.round(height / floorHeight); // 5 meter per floor
                        var numUnitsperFloor = Math.round(area / avgUnitsize);
                        var totalUnits = numUnitsperFloor * numFloors;
                        return totalUnits;
                    };
                }

                var HDHousing = function () {
                    const elevationoffset = 1;
                    const hdhHeights = [36, 60, 90]; // in meters 
                    const floorHeight = 5;
                    const avgUnitsize = 50;

                    this.generateUnits = function (area) {
                        var height = elevationoffset + hdhHeights[Math.floor(Math.random() * hdhHeights
                            .length)];
                        var numFloors = Math.round(height / floorHeight); // 5 meter per floor
                        var numUnitsperFloor = Math.round(area / avgUnitsize);
                        var totalUnits = numUnitsperFloor * numFloors;
                        return totalUnits;
                    };
                }

                var MXDBuildings = function () {
                    const elevationoffset = 1;
                    const mxdHeights = [9, 12, 8, 11]; // in meters 
                    const floorHeight = 5;
                    const avgUnitsize = 75;

                    this.generateUnits = function (area) {
                        var height = elevationoffset + mxdHeights[Math.floor(Math.random() * mxdHeights
                            .length)];
                        var numFloors = Math.round(height / floorHeight); // 5 meter per floor
                        var numUnitsperFloor = Math.round(area / avgUnitsize);
                        var totalUnits = numUnitsperFloor * numFloors;
                        return totalUnits;
                    };
                }

                var LABBuildings = function () {
                    const elevationoffset = 1;
                    var labHeights = [10, 15];
                    const floorHeight = 5;
                    const avgUnitsize = 100;

                    this.generateUnits = function (area) {
                        var height = elevationoffset + labHeights[Math.floor(Math.random() * labHeights
                            .length)];
                        var numFloors = Math.round(height / floorHeight); // 5 meter per floor
                        var numUnitsperFloor = Math.round(area / avgUnitsize);
                        var totalUnits = numUnitsperFloor * numFloors;
                        return totalUnits;
                    };
                }

                var SMBBuildings = function () {
                    const elevationoffset = 1;
                    var smbHeights = [2, 3, 5, 6, 7, 10];
                    const floorHeight = 5;
                    const avgUnitsize = 75;

                    this.generateUnits = function (area) {
                        var height = elevationoffset + smbHeights[Math.floor(Math.random() * smbHeights
                            .length)];
                        var numFloors = Math.round(height / floorHeight); // 5 meter per floor
                        var numUnitsperFloor = Math.round(area / avgUnitsize);
                        var totalUnits = numUnitsperFloor * numFloors;
                        return totalUnits;
                    };
                }


                if (whiteListedSysName.indexOf(sysName) >= 0) { // system is whitelisted
                    if ((sysName === 'HDH') || (sysName === 'HSNG') || (sysName === 'HSG')) {

                        var hdh = new HDHousing();
                        units = hdh.generateUnits(diagramArea);
                    } else if (sysName === 'MXD') {


                        var mxd = new MXDBuildings();
                        var units = mxd.generateUnits(diagramArea);
                    } else if (sysName === 'LDH') {
                        var ldh = new LDHousing();
                        units = ldh.generateUnits(diagramArea);

                    } else if ((sysName === 'COM') || (sysName === 'COMIND') || (sysName === 'IND')) {
                        var com = new COMBuilding();
                        units = com.generateUnits(diagramArea);

                    }
                } else if ((sysTag === 'Large buildings, Industry, commerce')) { // system not whitelisted
                    var lab = new LABBuildings();
                    units = lab.generateUnits(diagramArea);

                } else if ((sysTag === 'Small buildings, low density housing')) { // system not whitelisted 
                    var smb = new SMBBuildings();
                    units = smb.generateUnits(diagramArea);
                    // yeild = 16;
                } else {
                    units = 0;
                    // yeild = 12; // default yeild
                }
                return units;
            }

            this.initcompute = function () {
                const numresidences = parseInt($("#residential_units_mixuse").editable('getValue', true));
                const population = parseInt($("#number_of_people_residential_mixuse").editable('getValue', true));
                const floors = parseInt($("#residential_floor_mixuses").editable('getValue', true));
                const far = parseInt($("#residential_far_mixuse").editable('getValue', true));
                // const population = $('#number_of_people_residential').editable('setValue', numresidences * 4);
                this.update(numresidences, population, floors, far);

            }
            this.initialize = function () {

                $('#residential_units_mixuse').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });


                $('#residential_floors_mixuse').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });


                $('#residential_far_mixuse').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a decimal"
                        }
                    }
                });

                $('#number_of_people_residential_mixuse').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });

                $('#retail_m2_per_visitor_mixuse').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });

                $('#retail_floors_mixuse').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });

                $('#total_daily_visitors_retail_mixuse').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });

                $('#percent_interested_in_luxury_retail_mixuse').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });

                $('#percent_interested_in_support_retail_mixuse').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });

                $('#percent_interested_in_fmcg_retail_mixuse').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });
                $('#percent_interested_in_food_retail_mixuse').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });
                $('#direct_employees_to_visitor_ratio_retail_mixuse').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });
                $('#indirect_to_direct_employees_ratio_retail_mixuse').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });

            }
            this.recompute = function () {
                myDisplayUpdater = new ServicesDisplayUpdater();
                const numresidences = parseInt($("#residential_units_mixuse").editable('getValue', true));
                const population = parseInt($("#number_of_people_residential_mixuse").editable('getValue', true));
                const floors = parseInt($("#residential_floors_mixuse").editable('getValue', true));

                const far = parseFloat($("#residential_far_mixuse").editable('getValue', true));
     
                
                var diagram_area = diagramdetail['area'];
                const area_in_km2 = (diagram_area / 1000000);
                const max_buildable_area_in_m2 = (diagram_area * floors);
                
                const new_population_density = population / area_in_km2;
                // console.log(diagram_area, far, floors)
                const total_floor_area_residential_available = parseInt((diagram_area * far * floors));                
                const max_floor_area_available_per_floor = parseInt((diagram_area * far));   
                const residences_per_floor =  numresidences / floors;          
                

                const total_floor_area_residential_available_per_floor = parseInt((total_floor_area_residential_available / floors));
                const avg_area_per_unit = (parseInt(total_floor_area_residential_available_per_floor) / parseInt(numresidences));

                const retail_m2_per_visitor = $("#retail_m2_per_visitor_mixuse").editable('getValue', true);
                const total_daily_visitors = $("#total_daily_visitors_retail_mixuse").editable('getValue', true);
                const number_of_floors = $("#retail_floors_mixuse").editable('getValue', true);
                const percent_interested_luxury = $("#percent_interested_in_luxury_retail_mixuse").editable('getValue', true);
                const percent_interested_support = $("#percent_interested_in_support_retail_mixuse").editable('getValue', true);
                const percent_interested_fmcg = $("#percent_interested_in_fmcg_retail_mixuse").editable('getValue', true);
                const percent_interested_food = $("#percent_interested_in_food_retail_mixuse").editable('getValue', true);

                const direct_employees_to_visitor_ratio_retail = $("#direct_employees_to_visitor_ratio_retail_mixuse").editable('getValue', true);
                const indirect_to_direct_employees_ratio_retail = $("#indirect_to_direct_employees_ratio_retail_mixuse").editable('getValue', true);
                const total_floor_area_luxury = (retail_m2_per_visitor * total_daily_visitors * percent_interested_luxury);
                const total_floor_area_support = (retail_m2_per_visitor * total_daily_visitors * percent_interested_support);
                const total_floor_area_fmcg = (retail_m2_per_visitor * total_daily_visitors * percent_interested_fmcg);
                const total_floor_area_other = (retail_m2_per_visitor * total_daily_visitors * percent_interested_food);

                const total_floor_area_retail = (total_floor_area_luxury + total_floor_area_support + total_floor_area_fmcg + total_floor_area_other);
                $("#total_floor_area_retail_luxury_split_mixuse").html(abbrNum(parseInt(total_floor_area_luxury), 2));
                $("#total_floor_area_retail_support_split_mixuse").html(abbrNum(parseInt(total_floor_area_support), 2));
                $("#total_floor_area_retail_fmcg_split_mixuse").html(abbrNum(parseInt(total_floor_area_fmcg), 2));
                $("#total_floor_area_retail_other_split_mixuse").html(abbrNum(parseInt(total_floor_area_other), 2));
                const total_floor_area_retail_available = diagram_area * 0.8 * number_of_floors;
                $("#total_floor_area_retail_required_mixuse").html(abbrNum(parseInt(total_floor_area_retail), 2)); 
                
                $("#total_floor_area_retail_available_mixuse").html(abbrNum(parseInt(total_floor_area_retail_available), 2)); // only 80% of the area is available, rest for frontage etc. 
                $("#total_direct_employment_retail_mixuse").html(parseInt(direct_employees_to_visitor_ratio_retail * total_daily_visitors));
                $("#total_indirect_employment_retail_mixuse").html(parseInt(indirect_to_direct_employees_ratio_retail * total_daily_visitors));

                $("#current_pop_density_mixuse").html(abbrNum(new_population_density, 2));
                $("#total_floor_area_residential_built_mixuse").html(abbrNum(total_floor_area_residential_available, 2));
                $("#total_floor_area_residential_available_mixuse").html(abbrNum(max_buildable_area_in_m2, 2));
                $("#avg_area_per_unit_mixuse").html(abbrNum(parseInt(avg_area_per_unit), 2) + ' m2 / ' + abbrNum(total_floor_area_residential_available_per_floor, 2) + ' m2 per floor');
                
                const total_people = population + total_daily_visitors;

                myDisplayUpdater.updateBedsRecompute(total_people);
                myDisplayUpdater.updatePoliceStationsRecompute(total_people);
                myDisplayUpdater.updateFireStationsRecompte(total_people);
                myDisplayUpdater.updateSchoolsRecompute(population * 0.05);
                myDisplayUpdater.updateEnergyRecompute(population);
                myDisplayUpdater.updateWaterRecompute(population);
                myDisplayUpdater.updateSewageRecompute(population);
                const total_parking_area  = myDisplayUpdater.updateTransportRecompute(population, 2, 2);                
                const total_green_space_area = myDisplayUpdater.updateGreenSpaceRecompute(population);
                const total_area_avialable = max_buildable_area_in_m2+total_floor_area_retail_available;
                const total_built_up_area = total_floor_area_residential_available + total_floor_area_retail;
                // console.log(total_area_avialable,max_buildable_area_in_m2,  total_floor_area_retail_available);
                // console.log(total_built_up_area,total_floor_area_residential_available, total_floor_area_retail );
                const lu_chart_data =  {"area_available":total_area_avialable, "built_up_area":total_built_up_area, "green_space":total_green_space_area[0], "parking":total_parking_area[0]};
                populate_lu_chart('residential', lu_chart_data);

            }
            this.update = function (units, total_people, floors) {
                const mixuse_class_defaults = {
                    "Luxury": {
                        "retail_m2_per_visitor_mixuse": 12,
                        "total_daily_visitors_retail_mixuse": 2000,
                        "retail_floors_mixuse": 2,
                        "percent_interested_in_luxury_retail_mixuse": .1,
                        "percent_interested_in_support_retail_mixuse": .2,
                        "percent_interested_in_fmcg_retail_mixuse": .5,
                        "percent_interested_in_food_retail_mixuse": .2,
                        "beds": 0.0025,
                        "police_stations": 0.0025,
                        "fire_stations": 0.0025,
                        "schools": 4,
                        "energy": 14,
                        "water": 220,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        },
                        "far":0.6,
                        "green_space":9,
                        "parking_demand":0.5
                    },
                    "High Priced": {
                        "retail_m2_per_visitor_mixuse": 12,
                        "total_daily_visitors_retail_mixuse": 2000,
                        "retail_floors_mixuse": 2,
                        "percent_interested_in_luxury_retail_mixuse": .1,
                        "percent_interested_in_support_retail_mixuse": .2,
                        "percent_interested_in_fmcg_retail_mixuse": .5,
                        "percent_interested_in_food_retail_mixuse": .2,
                        "beds": 0.0025,
                        "police_stations": 0.0025,
                        "fire_stations": 0.0025,
                        "schools": 4,
                        "energy": 14,
                        "water": 220,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        },
                        "far":0.6,
                        "green_space":9,
                        "parking_demand":0.5
                    },
                    "Mid Priced": {
                        "retail_m2_per_visitor_mixuse": 12,
                        "total_daily_visitors_retail_mixuse": 2000,
                        "retail_floors_mixuse": 2,
                        "percent_interested_in_luxury_retail_mixuse": .1,
                        "percent_interested_in_support_retail_mixuse": .2,
                        "percent_interested_in_fmcg_retail_mixuse": .5,
                        "percent_interested_in_food_retail_mixuse": .2,
                        "beds": 0.0035,
                        "police_stations": 0.0035,
                        "fire_stations": 0.0035,
                        "schools": 5,
                        "energy": 12.8,
                        "water": 200,
                        "sewage": 82,
                        "transport": {
                            'road': 0.3,
                            'rail': 0.7
                        },
                        "far":0.6,
                        "green_space":9,
                        "parking_demand":0.5
                    },
                    "Low Priced": {
                        "retail_m2_per_visitor_mixuse": 12,
                        "total_daily_visitors_retail_mixuse": 2000,
                        "retail_floors_mixuse": 2,
                        "percent_interested_in_luxury_retail_mixuse": .1,
                        "percent_interested_in_support_retail_mixuse": .2,
                        "percent_interested_in_fmcg_retail_mixuse": .5,
                        "percent_interested_in_food_retail_mixuse": .2,
                        "beds": 0.0045,
                        "police_stations": 0.0045,
                        "fire_stations": 0.0045,
                        "schools": 7,
                        "energy": 10,
                        "water": 180,
                        "sewage": 72,
                        "transport": {
                            'road': 0.4,
                            'rail': 0.6
                        },
                        "far":0.6,
                        "green_space":9,
                        "parking_demand":0.5
                    },
                    "Affordable": {
                        "retail_m2_per_visitor_mixuse": 12,
                        "total_daily_visitors_retail_mixuse": 2000,
                        "retail_floors_mixuse": 2,
                        "percent_interested_in_luxury_retail_mixuse": .1,
                        "percent_interested_in_support_retail_mixuse": .2,
                        "percent_interested_in_fmcg_retail_mixuse": .5,
                        "percent_interested_in_food_retail_mixuse": .2,
                        "beds": 0.0055,
                        "police_stations": 0.0055,
                        "fire_stations": 0.0055,
                        "schools": 10,
                        "energy": 8,
                        "water": 160,
                        "sewage": 60,
                        "transport": {
                            'road': 0.5,
                            'rail': 0.5
                        },
                        "far":0.6,
                        "green_space":9,
                        "parking_demand":0.5
                    },
                    "New Build": {
                        "retail_m2_per_visitor_mixuse": 12,
                        "total_daily_visitors_retail_mixuse": 2000,
                        "retail_floors_mixuse": 2,
                        "percent_interested_in_luxury_retail_mixuse": .1,
                        "percent_interested_in_support_retail_mixuse": .2,
                        "percent_interested_in_fmcg_retail_mixuse": .5,
                        "percent_interested_in_food_retail_mixuse": .2,
                        "beds": 0.0055,
                        "police_stations": 0.0055,
                        "fire_stations": 0.0055,
                        "schools": 10,
                        "energy": 8,
                        "water": 160,
                        "sewage": 60,
                        "transport": {
                            'road': 0.5,
                            'rail': 0.5
                        },
                        "far":0.6,
                        "green_space":9,
                        "parking_demand":0.5
                    },
                    "Full Rennovation": {
                        "retail_m2_per_visitor_mixuse": 12,
                        "total_daily_visitors_retail_mixuse": 2000,
                        "retail_floors_mixuse": 2,
                        "percent_interested_in_luxury_retail_mixuse": .1,
                        "percent_interested_in_support_retail_mixuse": .2,
                        "percent_interested_in_fmcg_retail_mixuse": .5,
                        "percent_interested_in_food_retail_mixuse": .2,
                        "beds": 0.0055,
                        "police_stations": 0.0055,
                        "fire_stations": 0.0055,
                        "schools": 10,
                        "energy": 8,
                        "water": 160,
                        "sewage": 60,
                        "transport": {
                            'road': 0.5,
                            'rail': 0.5
                        },
                        "far":0.6,
                        "green_space":9,
                        "parking_demand":0.5
                    },
                    "Medium Rennovation": {
                        "retail_m2_per_visitor_mixuse": 12,
                        "total_daily_visitors_retail_mixuse": 2000,
                        "retail_floors_mixuse": 2,
                        "percent_interested_in_luxury_retail_mixuse": .1,
                        "percent_interested_in_support_retail_mixuse": .2,
                        "percent_interested_in_fmcg_retail_mixuse": .5,
                        "percent_interested_in_food_retail_mixuse": .2,
                        "beds": 0.0055,
                        "police_stations": 0.0055,
                        "fire_stations": 0.0055,
                        "schools": 10,
                        "energy": 8,
                        "water": 160,
                        "sewage": 60,
                        "transport": {
                            'road': 0.5,
                            'rail': 0.5
                        },
                        "far":0.6,
                        "green_space":9,
                        "parking_demand":0.5
                    },
                    "Low Rennovation": {
                        "retail_m2_per_visitor_mixuse": 12,
                        "total_daily_visitors_retail_mixuse": 2000,
                        "retail_floors_mixuse": 2,
                        "percent_interested_in_luxury_retail_mixuse": .1,
                        "percent_interested_in_support_retail_mixuse": .2,
                        "percent_interested_in_fmcg_retail_mixuse": .5,
                        "percent_interested_in_food_retail_mixuse": .2,
                        "beds": 0.0055,
                        "police_stations": 0.0055,
                        "fire_stations": 0.0055,
                        "schools": 10,
                        "energy": 8,
                        "water": 160,
                        "sewage": 60,
                        "transport": {
                            'road': 0.5,
                            'rail': 0.5
                        },
                        "far":0.6,
                        "green_space":9,
                        "parking_demand":0.5
                    }
                };


                myDisplayUpdater = new ServicesDisplayUpdater();

                var system_id = diagramdetail['sysid'];
                var diagram_area = diagramdetail['area'];
                var system_tag = systemdetail['systag'];
                var system_name = systemdetail['sysname'];

                // if (units === 0 && population === 0) {
               
                    units = myResidentialControl.generateResidentialUnits(diagram_area, system_name, system_tag);
                    population = units * 4;
                    floors = 1;
                // }


                var selected_subclass = $("#base_asset_subclass").val();

                selected_subclass = (selected_subclass) ? selected_subclass : 'Mid Priced';
                const total_floor_area_residential_available = abbrNum(parseInt((diagram_area * mixuse_class_defaults[selected_subclass]['far'] * floors)),
                    2)

                $("#total_floor_area_residential_available_mixuse").html(total_floor_area_residential_available);
                $("#residential_units_mixuse").editable('setValue', units);
                $("#number_of_people_residential_mixuse").editable('setValue', total_people);


                $("#retail_m2_per_visitor_mixuse").editable('setValue', mixuse_class_defaults[selected_subclass]['retail_m2_per_visitor_mixuse']);
                $("#total_daily_visitors_retail_mixuse").editable('setValue',  mixuse_class_defaults[selected_subclass]['total_daily_visitors_retail_mixuse']);
                $("#retail_floors").editable('setValue', mixuse_class_defaults[selected_subclass]['retail_floors']);
                $("#percent_interested_in_luxury_retail_mixuse").editable('setValue', mixuse_class_defaults[selected_subclass]['percent_interested_in_luxury_retail_mixuse']);
                $("#percent_interested_in_support_retail_mixuse").editable(
                    'setValue', mixuse_class_defaults[selected_subclass]['percent_interested_in_support_retail_mixuse']);
                $("#percent_interested_in_fmcg_retail_mixuse").editable('setValue', mixuse_class_defaults[selected_subclass]['percent_interested_in_fmcg_retail_mixuse']);
                $("#percent_interested_in_food_retail_mixuse").editable('setValue',mixuse_class_defaults[selected_subclass]['percent_interested_in_fmcg_retail_mixuse']);



                
                const area_in_km2 = (diagram_area / 1000000);
                const new_population_density = total_people / area_in_km2;

                $("#current_pop_density_mixuse").html(abbrNum(new_population_density, 2));

                myDisplayUpdater.updateBeds(total_people, mixuse_class_defaults[selected_subclass]['beds']);
                myDisplayUpdater.updatePoliceStations(total_people, mixuse_class_defaults[selected_subclass]['police_stations']);
                myDisplayUpdater.updateFireStations(total_people, mixuse_class_defaults[selected_subclass]['fire_stations']);
                myDisplayUpdater.updateSchools(total_people * 0.05, mixuse_class_defaults[selected_subclass]['schools']);
                myDisplayUpdater.updateEnergy(total_people, mixuse_class_defaults[selected_subclass]['energy']);
                myDisplayUpdater.updateWater(total_people, mixuse_class_defaults[selected_subclass]['water']);
                myDisplayUpdater.updateSewage(total_people, mixuse_class_defaults[selected_subclass]['sewage']);
                myDisplayUpdater.updateTransport(total_people, mixuse_class_defaults[selected_subclass]['transport']['road'], mixuse_class_defaults[selected_subclass]['transport']['rail'], 2, 2,0.5);

                myDisplayUpdater.updateGreenSpace(total_people, mixuse_class_defaults[selected_subclass]['green_space']);

                myDisplayUpdater.updateParking(total_people*.5, mixuse_class_defaults[selected_subclass]['parking_demand']);

            }
        }


        var TransportCalculator = function () {
            this.initialize = function () {

                $('#transport_passenger_trips').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });

            }
            this.recompute = function () {
                const transport_passenger_trips = $("#transport_passenger_trips").editable('getValue', true);
                
                
                const population = parseInt(transport_passenger_trips)*2;

                
                myDisplayUpdater = new ServicesDisplayUpdater();

                myDisplayUpdater.updateBedsRecompute(population);
                myDisplayUpdater.updatePoliceStationsRecompute(population);
                myDisplayUpdater.updateFireStationsRecompte(population);
                myDisplayUpdater.updateSchoolsRecompute(population * 0.05);
                myDisplayUpdater.updateEnergyRecompute(population);
                myDisplayUpdater.updateWaterRecompute(population);
                myDisplayUpdater.updateSewageRecompute(population);
                const total_parking_area  = myDisplayUpdater.updateTransportRecompute(population, 2, 2);                
                const total_green_space_area = myDisplayUpdater.updateGreenSpaceRecompute(population);
                
                const lu_chart_data = {"area_available":0, "built_up_area":0, "green_space":0, "parking":0};
                populate_lu_chart('transport', lu_chart_data);
                
            }


            this.update = function () {

                const transport_class_defaults = {
                    "New Build": {
                        "transport_passenger_trips": 12,
                        "beds": 0.0055,
                        "police_stations": 0.0045,
                        "fire_stations": 0.0045,
                        "schools": 0,
                        "energy": 14,
                        "water": 220,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        }, 
                        "green_space":1,
                        "parking_demand":0.5
                    },
                    "Full Rennovation": {
                        "transport_passenger_trips": 12,
                        "beds": 0.0055,
                        "police_stations": 0.0045,
                        "fire_stations": 0.0045,
                        "schools": 0,
                        "energy": 14,
                        "water": 220,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        }, 
                        "green_space":1,
                        "parking_demand":0.5
                    },
                    "Medium Rennovation": {
                        "transport_passenger_trips": 12,
                        "beds": 0.0055,
                        "police_stations": 0.0045,
                        "fire_stations": 0.0045,
                        "schools": 0,
                        "energy": 14,
                        "water": 220,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        }, 
                        "green_space":1,
                        "parking_demand":0.5
                    },
                    "Low Rennovation": {
                        "transport_passenger_trips": 12,
                        "beds": 0.0055,
                        "police_stations": 0.0045,
                        "fire_stations": 0.0045,
                        "schools": 0,
                        "energy": 14,
                        "water": 220,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        }, 
                        "green_space":1,
                        "parking_demand":0.5
                    }
                };


                var selected_subclass = $("#base_asset_subclass").val();
                selected_subclass = (selected_subclass) ? selected_subclass : 'New Build';
                var diagram_area = diagramdetail['area'];

                $("#transport_passenger_trips").editable('setValue', transport_class_defaults[selected_subclass]['transport_passenger_trips']);
                const population = parseInt(transport_class_defaults[selected_subclass]['transport_passenger_trips'])*2;

                
                myDisplayUpdater = new ServicesDisplayUpdater();
                myDisplayUpdater.updateBeds(population, transport_class_defaults[selected_subclass]['beds']);
                myDisplayUpdater.updatePoliceStations(population, transport_class_defaults[selected_subclass][
                    'police_stations'
                ]);
                myDisplayUpdater.updateFireStations(population, transport_class_defaults[selected_subclass][
                    'fire_stations'
                ]);
                myDisplayUpdater.updateSchools(population * 0.05, transport_class_defaults[selected_subclass][
                    'schools'
                ]);
                myDisplayUpdater.updateEnergy(population, transport_class_defaults[selected_subclass]['energy']);
                myDisplayUpdater.updateWater(population, transport_class_defaults[selected_subclass]['water']);
                myDisplayUpdater.updateSewage(population, transport_class_defaults[selected_subclass]['sewage']);
                const total_parking_area  = myDisplayUpdater.updateTransport(population, transport_class_defaults[selected_subclass][
                    'transport'
                ]['road'], transport_class_defaults[selected_subclass]['transport']['rail'], 2, 2,0.5);
                const total_green_space_area = myDisplayUpdater.updateGreenSpace(population, transport_class_defaults[selected_subclass]['green_space']);
               myDisplayUpdater.updateParking(population*0.5, transport_class_defaults[selected_subclass]['parking_demand'])

            }


        }


        var CommunityCalculator = function () {
            this.initialize = function () {
                $('#community_visitors').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });

                $('#community_residents').editable({
                    validate: function (value) {
                        if ($.trim(value) == '') {
                            return 'This field is required';
                        } else if ($.isNumeric(value) == '') {
                            return "Input must be a integer"
                        }
                    }
                });

            }
            
            this.recompute = function () {
                const community_residents = $("#community_residents").editable('getValue', true);
                const community_visitors = $("#community_visitors").editable('getValue', true);                
                
                const population = parseInt(community_visitors);

                var diagram_area = diagramdetail['area'];
                const area_in_km2 = (diagram_area / 1000000);                
                myDisplayUpdater = new ServicesDisplayUpdater();

                myDisplayUpdater.updateBedsRecompute(population);
                myDisplayUpdater.updatePoliceStationsRecompute(population);
                myDisplayUpdater.updateFireStationsRecompte(population);
                myDisplayUpdater.updateSchoolsRecompute(population * 0.05);
                myDisplayUpdater.updateEnergyRecompute(population);
                myDisplayUpdater.updateWaterRecompute(population);
                myDisplayUpdater.updateSewageRecompute(population);
                const total_parking_area  = myDisplayUpdater.updateTransportRecompute(population, 2, 2);                
                const total_green_space_area = myDisplayUpdater.updateGreenSpaceRecompute(population);
                
                const lu_chart_data = {"area_available":diagram_area, "built_up_area":0, "green_space":total_green_space_area[0], "parking":total_parking_area[0]};
                populate_lu_chart('community', lu_chart_data);
                
            }


            this.update = function () {

                const community_class_defaults = {
                    "Community Center": {
                        "community_residents": 20,
                        "community_visitors": 20,                        
                        "beds": 0.0055,
                        "police_stations": 0.0045,
                        "fire_stations": 0.0045,
                        "schools": 0,
                        "energy": 14,
                        "water": 220,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        }, 
                        "green_space":1,
                        "parking_demand":0.5
                    },
                    "Playground": {
                        "community_residents": 20,
                        "community_visitors": 20,    
                        "beds": 0.0055,
                        "police_stations": 0.0045,
                        "fire_stations": 0.0045,
                        "schools": 0,
                        "energy": 14,
                        "water": 220,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        }, 
                        "green_space":1,
                        "parking_demand":0.5
                    },
                    "Amenity": {
                        "community_residents": 20,
                        "community_visitors": 20,    
                        "beds": 0.0055,
                        "police_stations": 0.0045,
                        "fire_stations": 0.0045,
                        "schools": 0,
                        "energy": 14,
                        "water": 220,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        }, 
                        "green_space":1,
                        "parking_demand":0.5
                    },
                    "Full Rennovation": {
                        "community_residents": 20,
                        "community_visitors": 20,    
                        "beds": 0.0055,
                        "police_stations": 0.0045,
                        "fire_stations": 0.0045,
                        "schools": 0,
                        "energy": 14,
                        "water": 220,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        }, 
                        "green_space":1,
                        "parking_demand":0.5
                    },
                    "New Build": {
                        "community_residents": 20,
                        "community_visitors": 20,    
                        "beds": 0.0055,
                        "police_stations": 0.0045,
                        "fire_stations": 0.0045,
                        "schools": 0,
                        "energy": 14,
                        "water": 220,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        }, 
                        "green_space":1,
                        "parking_demand":0.5
                    },
                    "Medium Rennovation": {
                        "community_residents": 20,
                        "community_visitors": 20,    
                        "beds": 0.0055,
                        "police_stations": 0.0045,
                        "fire_stations": 0.0045,
                        "schools": 0,
                        "energy": 14,
                        "water": 220,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        }, 
                        "green_space":1,
                        "parking_demand":0.5
                    },
                    "Low Rennovation": {
                        "community_residents": 20,
                        "community_visitors": 20,    
                        "beds": 0.0055,
                        "police_stations": 0.0045,
                        "fire_stations": 0.0045,
                        "schools": 0,
                        "energy": 14,
                        "water": 220,
                        "sewage": 102,
                        "transport": {
                            'road': 0.9,
                            'rail': 0.1
                        }, 
                        "green_space":1,
                        "parking_demand":0.5
                    }
                };


                var selected_subclass = $("#base_asset_subclass").val();
                selected_subclass = (selected_subclass) ? selected_subclass : 'New Build';
                var diagram_area = diagramdetail['area'];
                
                $("#community_residents").editable('setValue', community_class_defaults[selected_subclass]['community_residents']);                               
                $("#community_visitors").editable('setValue', community_class_defaults[selected_subclass]['community_visitors']);
                const population = parseInt(community_class_defaults[selected_subclass]['community_visitors']);
                
                myDisplayUpdater = new ServicesDisplayUpdater();
                myDisplayUpdater.updateBeds(population, community_class_defaults[selected_subclass]['beds']);
                myDisplayUpdater.updatePoliceStations(population, community_class_defaults[selected_subclass]['police_stations']);
                myDisplayUpdater.updateFireStations(population, community_class_defaults[selected_subclass]['fire_stations']);
                myDisplayUpdater.updateSchools(population * 0.05, community_class_defaults[selected_subclass]['schools']);
                myDisplayUpdater.updateEnergy(population, community_class_defaults[selected_subclass]['energy']);
                myDisplayUpdater.updateWater(population, community_class_defaults[selected_subclass]['water']);
                myDisplayUpdater.updateSewage(population, community_class_defaults[selected_subclass]['sewage']);
                const total_parking_area  = myDisplayUpdater.updateTransport(population, community_class_defaults[selected_subclass]['transport']['road'], community_class_defaults[selected_subclass]['transport']['rail'], 2, 2,0.5);
                const total_green_space_area = myDisplayUpdater.updateGreenSpace(population, community_class_defaults[selected_subclass]['green_space']);
                myDisplayUpdater.updateParking(population*0.5, community_class_defaults[selected_subclass]['parking_demand'])

            }
        }

        var ServicesDisplayUpdater = function () {

            this.updateBeds = function (population, demand) {
                $("#beds_per_capita").editable('setValue', demand);
                // $("#beds_per_capita").html(demand);
                const beds = parseInt((population * demand));
                $("#total_hospital_beds").html(abbrNum(beds, 2));
                $("#total_hospital_beds_raw").val(beds);
            }

            this.updateBedsRecompute = function (population) {
                const demand = $("#beds_per_capita").editable('getValue', true);
                const beds = parseInt((population * demand));
                // $("#beds_per_capita").html(demand);
                $("#total_hospital_beds").html(abbrNum(beds, 2));
                $("#total_hospital_beds_raw").val(beds);
            }


            this.updatePoliceStations = function (population, demand) {
                $("#police_station_per_capita").editable('setValue', demand);
                // $("#police_station_per_capita").html(demand);
                const ps = parseInt(population * demand);
                $("#total_police_stations").html(abbrNum(ps, 2));
                // $("#police_station_per_capita").html(demand);
                $("#total_police_stations_raw").val(ps);

            }

            this.updatePoliceStationsRecompute = function (population) {
                const demand = $("#police_station_per_capita").editable('getValue', true);
                // $("#police_station_per_capita").html(demand);
                const ps = parseInt(population * demand);   
                $("#total_police_stations").html(abbrNum(ps, 2));
                $("#total_police_stations_raw").val(ps);

            }

            this.updateFireStations = function (population, demand) {
                $("#fire_station_per_capita").editable('setValue', demand);
                const fs = parseInt((population * demand));
                // $("#fire_station_per_capita").html(demand);
                $("#total_firestations").html(abbrNum(fs, 2));
                $("#total_firestations_raw").val(fs);

            }

            this.updateFireStationsRecompte = function (population) {
                const demand = $("#fire_station_per_capita").editable('getValue', true);
                // $("#fire_station_per_capita").html(demand);
                const fs = parseInt((population * demand));
                $("#total_firestations").html(abbrNum(fs, 2));
                $("#total_firestations_raw").val(fs);

            }

            this.updateSchools = function (population, demand) {
                $("#school_per_capita").editable('setValue', demand);
                // $("#school_per_capita").html(demand);
                const sch = parseInt((population * demand));
                $("#total_schools").html(abbrNum(sch), 2);
                $("#total_schools_raw").val(sch);

                // $('.schools_editable').on('update', function (e, editable) {
                //     const population = $("#number_of_people_residential").val() * .05;
                //     console.log(population, editable.value)
                //     $("#total_schools").html(parseInt((population * editable.value)));
                // });
            }

            this.updateSchoolsRecompute = function (population, ) {
                const demand = $("#school_per_capita").editable('getValue', true);
                const sch = parseInt((population * demand));
                $("#total_schools").html(abbrNum(sch), 2);
                $("#total_schools_raw").val(sch);

            }

            this.updateEnergy = function (population, demand) {
                $("#energy_per_capita").editable('setValue', demand);
                
                const ed = parseInt((population * demand));
                $("#total_energy_demand").html(abbrNum(ed, 2));
                $("#total_energy_demand_raw").val(ed);
                
            }

            this.updateEnergyRecompute = function (population) {
                const demand = $("#energy_per_capita").editable('getValue', true);
                
                const ed = parseInt((population * demand));
                $("#total_energy_demand").html(abbrNum(ed, 2));
                $("#total_energy_demand_raw").val(ed);

            }
            this.updateWater = function (population, demand) {
                $("#water_per_capita").editable('setValue', demand);
                 const water = parseInt(population * demand);
                
                $("#total_water_demand").html(abbrNum(water, 2));
                $("#total_water_demand_raw").val(water);
                
            }
            this.updateWaterRecompute = function (population) {
                const demand = $("#water_per_capita").editable('getValue', true);
                const water = parseInt(population * demand);
                
                $("#total_water_demand").html(abbrNum(water, 2));
                $("#total_water_demand_raw").val(water);
            }

            this.updateSewage = function (population, demand) {
                $("#sewage_per_capita").editable('setValue', demand);
                const sewage = parseInt(population * demand);
                $("#total_sewage_demand").html(abbrNum(sewage, 2));
                $("#total_sewage_demand_raw").val(sewage);
            }

            this.updateSewageRecompute = function (population) {
                const demand = $("#sewage_per_capita").editable('getValue', true);
                const sewage = parseInt(population * demand);
                $("#total_sewage_demand").html(abbrNum(sewage, 2));
                $("#total_sewage_demand_raw").val(sewage);
            }
            
            this.updateLandUsageRecompute = function (area) {
                const land_area = $("#tourism_land_area").editable('getValue', true);
                // const floors = $("#tourism_floors").editable('getValue', true);
                // const m2_per_guest = $("#tourism_m2_per_guest").editable('getValue', true);
                // const people_per_room = $("#tourism_people_per_room").editable('getValue', true);

                const land_usage = parseInt(area / (land_area));
                
                return land_usage;
            }

            this.updateParking = function (cars, demand_factor) {
                $("#parking_factor").editable('setValue', demand_factor);
                const total_parking = parseInt(cars * demand_factor);
                $("#total_parking").html(abbrNum(total_parking, 2));
                $("#total_parking_raw").val(total_parking);
            }

            this.updateParkingRecompute = function (cars) {
                const demand_factor = $("#parking_factor").editable('getValue', true);
                const total_parking = parseInt(cars * demand_factor);
                $("#total_parking").html(abbrNum(total_parking, 2));
                $("#total_parking_raw").val(total_parking);
            }

            this.updateGreenSpace = function (population, gs_demand) {
                $("#per_capita_green_space").editable('setValue', gs_demand);
                const gs = parseInt(population * gs_demand);
                $("#total_green_space").html(abbrNum(gs, 2));
                $("#total_green_space_raw").val(gs);
                return [gs];
            }

            this.updateGreenSpaceRecompute = function (population) {
                const gs_demand = $("#per_capita_green_space").editable('getValue', true);
                const gs = parseInt(population * gs_demand);
                $("#total_green_space").html(abbrNum(gs, 2));
                $("#total_green_space_raw").val(gs);
                return [gs];
            }

            
            this.updateTransport = function (population, percent_road, percent_rail, times_road, times_rail, parking_demand_factor) {
                $("#percent_road_usage").editable('setValue', percent_road);
                $("#percent_rail_usage").editable('setValue', percent_rail);
                $("#parking_factor").editable('setValue', parking_demand_factor);

                $("#road_terminal_freq").html(times_road);
                $("#rail_terminal_freq").html(times_rail);
                const t_rail = parseInt(population * percent_rail * times_rail);
                const t_road = parseInt(population * percent_road * times_road); 
                const total_parking = parseInt((t_road /2) * parking_demand_factor);
                $("#total_rail_usage").html(abbrNum(t_rail, 2));
                $("#total_rail_usage_raw").val(t_rail);
                $("#total_road_usage").html(abbrNum(t_road, 2));
                $("#total_road_usage_raw").val(t_road);
                $("#total_parking").html(abbrNum(total_parking, 2));
                $("#total_parking_raw").val(total_parking);
                const parking_space = parseInt(total_parking *12.5);
                return [parking_space];

            }

            this.updateTransportRecompute = function (population, times_road, times_rail) {
                const percent_road = $("#percent_road_usage").editable('getValue', true);
                const percent_rail = $("#percent_rail_usage").editable('getValue', true);                
                
                const t_rail = parseInt(population * percent_rail * times_rail);
                const t_road = parseInt(population * percent_road * times_road);
          
                const demand_factor = $("#parking_factor").editable('getValue', true);
                const total_parking = parseInt((t_road /2) * demand_factor);
                $("#total_rail_usage").html(abbrNum(t_rail, 2));
                $("#total_rail_usage_raw").val(t_rail);
                $("#total_road_usage").html(abbrNum(t_road, 2));
                $("#total_road_usage_raw").val(t_road);
                
                $("#total_parking").html(abbrNum(total_parking, 2));
                $("#total_parking_raw").val(total_parking);
                
                const parking_space = parseInt(total_parking *12.5);
                return [parking_space];
            }
        };
        myResidentialControl = new ResidentialCalaulator();
        myTourismControl = new TourismCalaulator();
        myRetailControl = new RetailCalaulator();
        myOfficeControl = new OfficeCalaulator();
        myMixedUseControl = new MixedUseCalaulator();
        myTransportControl = new TransportCalculator();
        myCommunityControl = new CommunityCalculator();
        $(".services_form").hide();
        $('#savevalues').on('click', function (e) {
            const capex = initCost;
            const acf = acfCost;
            const opex = aopexCost;
            const asga = asgaCost;
            const acfg = (parseFloat($("#acfg-slider").val()) / 100).toFixed(2);
            const wacc = (parseFloat($("#wacc-slider").val()) / 100).toFixed(2);

            const capex_start = isNumeric($("#initcost-syear").val()) ? $("#initcost-syear").val() : 0;
            const capex_end = isNumeric($("#initcost-eyear").val()) ? $("#initcost-eyear").val() : 1;
            const acf_start = isNumeric($("#acf-syear").val()) ? $("#acf-syear").val() : 0;

            const base_asset_class = $("#base_asset_class option:selected").attr('data-value');
            var metadata = {};
            var asset_details = {};
            if (base_asset_class) {
                if (base_asset_class == 'residential') {
                    metadata['base_asset_subclass'] = $("#base_asset_subclass").val();
                    metadata['number_of_people_residential'] = parseInt($("#number_of_people_residential").editable('getValue', true));
                    metadata['residential_units'] = parseInt($("#residential_units").editable('getValue', true));
                    metadata['residential_floors'] = parseInt($("#residential_floors").editable('getValue',true));
                    metadata['residential_far'] = parseFloat($("#residential_far").editable('getValue',true));
                    metadata['current_pop_density'] = $("#current_pop_density").html();
                } else if (base_asset_class == 'hospitality') {
                    metadata['base_asset_subclass'] = $("#base_asset_subclass").val();
                    metadata['tourism_m2_per_guest'] = parseInt($("#tourism_m2_per_guest").editable('getValue',true));
                    metadata['tourism_floors'] = parseInt($("#tourism_floors").editable('getValue', true));
                    metadata['tourism_land_area'] = parseInt($("#tourism_land_area").editable('getValue', true));
                    metadata['tourism_people_per_room'] = parseInt($("#tourism_people_per_room").editable('getValue', true));
                    metadata['target_occupancy_rate'] = parseFloat($("#target_occupancy_rate").editable('getValue', true));
                    metadata['tourism_total_rooms'] = parseInt($("#tourism_total_rooms").html());
                    metadata['total_yearly_visitors'] = parseInt($("#total_yearly_visitors").html());
                    metadata['direct_employees_to_visitor_ratio_tourism'] = parseFloat($("#direct_employees_to_visitor_ratio_tourism").editable('getValue', true));
                    metadata['indirect_to_direct_employees_ratio_tourism'] = parseFloat($("#indirect_to_direct_employees_ratio_tourism").editable('getValue', true));
                    metadata['total_direct_employment_tourism'] = $("#total_direct_employment_tourism").html();
                    metadata['total_indirect_employment_tourism'] = $("#total_indirect_employment_tourism").html();

                } else if (base_asset_class == 'retail') {
                    metadata['base_asset_subclass'] = $("#base_asset_subclass").val();
                    metadata['retail_m2_per_visitor'] = parseInt($("#retail_m2_per_visitor").editable('getValue', true));
                    metadata['retail_floors'] = parseInt($("#retail_floors").editable('getValue', true));
                    metadata['total_daily_visitors_retail'] = parseInt($("#total_daily_visitors_retail").editable('getValue', true));
                    metadata['percent_interested_in_luxury_retail'] = parseFloat($("#percent_interested_in_luxury_retail").editable('getValue', true));
                    metadata['total_daily_visitors_retail'] = parseInt($("#total_daily_visitors_retail").editable('getValue', true));
                    metadata['percent_interested_in_support_retail'] = parseFloat($("#percent_interested_in_support_retail").editable('getValue', true));
                    metadata['total_daily_visitors_retail'] = parseFloat($("#total_daily_visitors_retail").editable('getValue', true));
                    metadata['percent_interested_in_fmcg_retail'] = parseFloat($("#percent_interested_in_fmcg_retail").editable('getValue', true));
                    metadata['percent_interested_in_food_retail'] = parseFloat($("#percent_interested_in_food_retail").editable('getValue', true));
                    metadata['direct_employees_to_visitor_ratio_retail'] = parseFloat($("#direct_employees_to_visitor_ratio_retail").editable('getValue', true));
                    metadata['indirect_to_direct_employees_ratio_retail'] = parseFloat($("#indirect_to_direct_employees_ratio_retail").editable('getValue', true));
                    metadata['total_floor_area_retail_required'] = $("#total_floor_area_retail_required").html();
                    metadata['total_direct_employment_retail'] = $("#total_direct_employment_retail").html();
                    metadata['total_indirect_employment_retail'] = $("#total_indirect_employment_retail").html();
                } else if (base_asset_class == 'office') {
                    metadata['base_asset_subclass'] = $("#base_asset_subclass").val();
                    metadata['office_m2_per_visitor'] = parseInt($("#office_m2_per_visitor").editable('getValue', true));
                    metadata['office_floors'] = parseInt($("#office_floors").editable('getValue', true));
                    metadata['total_daily_visitors_office'] = parseInt($("#total_daily_visitors_office").editable('getValue', true));
                    metadata['total_floor_area_office_required'] = $("#total_floor_area_office_required").val();                   
                    metadata['indirect_to_direct_employees_ratio'] = $("#indirect_to_direct_employees_ratio_office").html();
                    metadata['direct_employees_to_visitor_ratio'] = $("#direct_employees_to_visitor_ratio_office").html();
                    metadata['total_direct_employment_office'] = $("#total_direct_employment_office").html();
                    metadata['total_indirect_employment_office'] = $("#total_indirect_employment_office").html();
                }
                else if (base_asset_class == 'transport') {
                    metadata['base_asset_subclass'] = $("#base_asset_subclass").val();
                    metadata['transport_passenger_trips'] = parseInt($("#transport_passenger_trips").editable('getValue', true));
                }  
                else if (base_asset_class == 'agriculture') {
                    metadata['base_asset_subclass'] = $("#base_asset_subclass").val();
                }
                else if (base_asset_class == 'green_infrastructure') {
                    metadata['base_asset_subclass'] = $("#base_asset_subclass").val();
                }
                else if (base_asset_class == 'community') {
                    metadata['base_asset_subclass'] = $("#base_asset_subclass").val();
                    metadata['community_residents'] = parseInt($("#community_residents").editable('getValue', true));
                    metadata['community_visitors'] = parseInt($("#community_visitors").editable('getValue', true));
                }
                else if (base_asset_class == 'mixuse') {
                    metadata['base_asset_subclass'] = $("#base_asset_subclass").val();                    
                    metadata['number_of_people_residential_mixuse'] = parseInt($("#number_of_people_residential_mixuse").editable('getValue', true));
                    metadata['residential_units_mixuse'] = parseInt($("#residential_units_mixuse").editable('getValue', true));
                    metadata['residential_floors_mixuse'] = parseInt($("#residential_floors_mixuse").editable('getValue',true));
                    metadata['residential_far_mixuse'] = parseFloat($("#residential_far_mixuse").editable('getValue',true));
                    metadata['current_pop_density_mixuse'] = $("#current_pop_density_mixuse").html();
                    metadata['retail_m2_per_visitor_mixuse'] = parseInt($("#retail_m2_per_visitor_mixuse").editable('getValue', true));
                    metadata['retail_floors_mixuse'] = parseInt($("#retail_floors_mixuse").editable('getValue', true));
                    metadata['total_daily_visitors_retail_mixuse'] = parseInt($("#total_daily_visitors_retail_mixuse").editable('getValue', true));
                    metadata['percent_interested_in_luxury_retail_mixuse'] = parseFloat($("#percent_interested_in_luxury_retail_mixuse").editable('getValue', true));
                    metadata['total_daily_visitors_retail_mixuse'] = parseInt($("#total_daily_visitors_retail_mixuse").editable('getValue', true));
                    metadata['percent_interested_in_support_retail_mixuse'] = parseFloat($("#percent_interested_in_support_retail_mixuse").editable('getValue', true));
                    metadata['total_daily_visitors_retail_mixuse'] = parseFloat($("#total_daily_visitors_retail_mixuse").editable('getValue', true));
                    metadata['percent_interested_in_fmcg_retail_mixuse'] = parseFloat($("#percent_interested_in_fmcg_retail_mixuse").editable('getValue', true));
                    metadata['percent_interested_in_food_retail_mixuse'] = parseFloat($("#percent_interested_in_food_retail_mixuse").editable('getValue', true));
                    metadata['direct_employees_to_visitor_ratio_retail_mixuse'] = parseFloat($("#direct_employees_to_visitor_ratio_retail_mixuse").editable('getValue', true));
                    metadata['indirect_to_direct_employees_ratio_retail_mixuse'] = parseFloat($("#indirect_to_direct_employees_ratio_retail_mixuse").editable('getValue', true));
                    metadata['total_floor_area_retail_required_mixuse'] = $("#total_floor_area_retail_required_mixuse").html();
                    metadata['total_direct_employment_retail_mixuse'] = $("#total_direct_employment_retail_mixuse").html();
                    metadata['total_indirect_employment_retail_mixuse'] = $("#total_indirect_employment_retail_mixuse").html();
                }
                metadata['services'] = {};
                metadata['services']['hospital_beds']= $("#total_hospital_beds_raw").val();
                metadata['services']['total_police_stations']= $("#total_police_stations_raw").val();
                metadata['services']['total_firestations']= $("#total_firestations_raw").val();
                metadata['services']['total_schools']= $("#total_schools_raw").val();
                metadata['services']['total_energy_demand']= $("#total_energy_demand_raw").val();
                metadata['services']['total_water_demand']= $("#total_water_demand_raw").val();
                metadata['services']['total_green_spaces']= $("#total_green_space_raw").val();
                metadata['services']['total_sewage_demand']= $("#total_sewage_demand_raw").val();                
                metadata['services']['total_parking']= $("#total_parking_raw").val();
                metadata['services']['total_road_usage']= $("#total_road_usage_raw").val();
                metadata['services']['total_rail_usage']= $("#total_rail_usage_raw").val();

                metadata["representative_image"]= representative_image;
                asset_details = {
                    'scenario':1, 
                    'class': base_asset_class,
                    'metadata': metadata
                };
            }
            const csrf = $("[name='_csrf']").val();
            const data = {
                "capex": capex,
                "acf": acf,
                "projectid": projectid,
                "diagramid": diagramid,
                "opex": opex,
                "asga": asga,
                "capex_start": capex_start,
                "capex_end": capex_end,
                "acf_start": acf_start,
                "acfg":acfg,
                "wacc":wacc,
                "_csrf": csrf,
                "asset_details": JSON.stringify(asset_details)
            };
            // console.log(data)
            var url = '/setdefaults/';
            
            var promise = $.ajax({
                url: url,
                type: 'POST',
                data: data
            });


            promise.done(function (data) {
                humane.log("Data successufully saved", {
                    addnCls: 'humane-flatty-success'
                });
            });

            promise.fail(function (data) {
                humane.log("Error in saving data, the administrators have been notified", {
                    addnCls: 'humane-flatty-error'
                });
            });

        });
        var asset_class = "";
        if (Object.keys(defaultvalues['asset_details']).length === 0 && defaultvalues['asset_details'].constructor ===
            Object) {
            var class_default_values = {};

        } else {

            var class_default_values = defaultvalues['asset_details'];
            var asset_class = class_default_values.class;
        }

        if (asset_class) {
          
            $("#base_asset_class option[data-value='" + asset_class + "']").attr("selected", "selected");

            updateClassControls(asset_class);
            if (asset_class == 'residential') {
                $("#base_asset_subclass").val(class_default_values['metadata']['base_asset_subclass']);
                $("#number_of_people_residential").editable('setValue', class_default_values['metadata']['number_of_people_residential']);
                $("#residential_units").editable('setValue', class_default_values['metadata']['residential_units']);
                $("#residential_floors").editable('setValue', class_default_values['metadata']['residential_floors']);
                if(class_default_values['metadata'].hasOwnProperty('residential_far')) {
                $("#residential_far").editable('setValue', class_default_values['metadata']['residential_far']);
                } else{
                    $("#residential_far").editable('setValue', 0.6);
                }
                $("#current_pop_density").html(class_default_values['metadata']['current_pop_density']);
                $("#recompute_residential").click();
            } else if (asset_class == 'hospitality') {
                
                $("#base_asset_subclass").val(class_default_values['metadata']['base_asset_subclass']);
                $("#tourism_m2_per_guest").editable('setValue', class_default_values['metadata'][
                    'tourism_m2_per_guest'
                ]);
                $("#tourism_floors").editable('setValue', class_default_values['metadata']['tourism_floors']);
                $("#tourism_land_area").editable('setValue', class_default_values['metadata']['tourism_land_area']);
                $("#tourism_people_per_room").editable('setValue', class_default_values['metadata']['tourism_people_per_room']);
                $("#target_occupancy_rate").editable('setValue', class_default_values['metadata']['target_occupancy_rate']);
                $("#tourism_total_rooms").html(class_default_values['metadata']['tourism_total_rooms']);
                $("#total_yearly_visitors").html(class_default_values['metadata']['total_yearly_visitors']);
                $("#recompute_tourism").click();

            } else if (asset_class == 'retail') {
                $("#base_asset_subclass").val(class_default_values['metadata']['base_asset_subclass']);
                $("#retail_m2_per_visitor").editable('setValue', class_default_values['metadata']['retail_m2_per_visitor']);
                $("#retail_floors").editable('setValue', class_default_values['metadata']['retail_floors']);
                $("#total_daily_visitors_retail").editable('setValue', class_default_values['metadata']['total_daily_visitors_retail']);

                $("#percent_interested_in_luxury_retail").editable('setValue', class_default_values['metadata']['percent_interested_in_luxury_retail']);
                $("#total_daily_visitors_retail").editable('setValue', class_default_values['metadata']['total_daily_visitors_retail']);
                $("#percent_interested_in_support_retail").editable('setValue', class_default_values['metadata']['percent_interested_in_support_retail']);
                $("#total_daily_visitors_retail").editable('setValue', class_default_values['metadata']['total_daily_visitors_retail'
                ]);
                $("#percent_interested_in_fmcg_retail").editable('setValue', class_default_values['metadata']['percent_interested_in_fmcg_retail']);
                $("#percent_interested_in_food_retail").editable('setValue', class_default_values['metadata']['percent_interested_in_food_retail']);
                $("#total_floor_area_retail_required").html(class_default_values['metadata']['total_floor_area_retail_required']);
                $("#recompute_retail").click();
            } else if (asset_class == 'office') {
                $("#base_asset_subclass").val(class_default_values['base_asset_subclass']);
                $("#office_m2_per_visitor").editable('setValue', class_default_values['metadata']['office_m2_per_visitor']);
                $("#office_floors").editable('setValue', class_default_values['metadata']['office_floors']);
                $("#total_daily_visitors_office").editable('setValue', class_default_values['metadata']['total_daily_visitors_office']);
                $("#total_floor_area_office_required").html(class_default_values['metadata']['total_floor_area_office_required']);
                $("#recompute_office").click();
            }
            else if (asset_class == 'transport') {
                $("#base_asset_subclass").val(class_default_values['base_asset_subclass']);
                $("#transport_passenger_trips").editable('setValue', class_default_values['metadata']['transport_passenger_trips']);               
                $("#recompute_transport").click();
            }
            
            else if (asset_class == 'community') {
                $("#base_asset_subclass").val(class_default_values['base_asset_subclass']);
                $("#community_visitors").editable('setValue', class_default_values['metadata']['community_visitors']);     
                $("#community_residents").editable('setValue', class_default_values['metadata']['community_residents']);                
                $("#recompute_community").click();
            }
            else if (asset_class='mixuse') {
                
                $("#base_asset_subclass").val(class_default_values['metadata']['base_asset_subclass']);
                $("#number_of_people_residential_mixuse").editable('setValue', class_default_values['metadata']['number_of_people_residential_mixuse']);
                $("#residential_units_mixuse").editable('setValue', class_default_values['metadata']['residential_units_mixuse']);
                $("#residential_floors_mixuse").editable('setValue', class_default_values['metadata']['residential_floors_mixuse']);
                if(class_default_values['metadata'].hasOwnProperty('residential_far_mixuse')) {
                $("#residential_far_mixuse").editable('setValue', class_default_values['metadata']['residential_far_mixuse']);
                } else{
                    $("#residential_far_mixuse").editable('setValue', 0.6);
                }
                $("#current_pop_density_mixuse").html(class_default_values['metadata']['current_pop_density']);
                
                $("#base_asset_subclass").val(class_default_values['metadata']['base_asset_subclass']);
                $("#retail_m2_per_visitor_mixuse").editable('setValue', class_default_values['metadata'][
                    'retail_m2_per_visitor_mixuse'
                ]);
                $("#retail_floors_mixuse").editable('setValue', class_default_values['metadata']['retail_floors_mixuse']);
                $("#total_daily_visitors_retail_mixuse").editable('setValue', class_default_values['metadata']['total_daily_visitors_retail_mixuse']);

                $("#percent_interested_in_luxury_retail_mixuse").editable('setValue', class_default_values['metadata']['percent_interested_in_luxury_retail_mixuse']);
                $("#total_daily_visitors_retail_mixuse").editable('setValue', class_default_values['metadata']['total_daily_visitors_retail_mixuse']);
                $("#percent_interested_in_support_retail_mixuse").editable('setValue', class_default_values['metadata']['percent_interested_in_support_retail_mixuse']);
                $("#total_daily_visitors_retail_mixuse").editable('setValue', class_default_values['metadata']['total_daily_visitors_retail_mixuse']);
                $("#percent_interested_in_fmcg_retail_mixuse").editable('setValue', class_default_values['metadata']['percent_interested_in_fmcg_retail_mixuse']);
                $("#percent_interested_in_food_retail_mixuse").editable('setValue', class_default_values['metadata']['percent_interested_in_food_retail_mixuse']);
                $("#total_floor_area_retail_required_mixuse").html(class_default_values['metadata']['total_floor_area_retail_required_mixuse']);
                $("#recompute_mixuse").click();
            }
            
            if(class_default_values['metadata'].hasOwnProperty('representative_image')) {
                
                const img = "<img src='assets/img/asset-images/"+class_default_values['metadata']['representative_image']+"'/>";
   
                $("#selected_typology_image").html(img);
            }
            $("#computeNPVButton").click();
        }
    </script>
</body>

</html>