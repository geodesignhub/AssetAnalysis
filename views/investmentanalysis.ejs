<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Investment Analysis</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="Description" lang="en" content="Geodesignhub Investment Analysis">
    <meta name="author" content="Geodesignhub">
    <meta name="robots" content="index, follow">
    <!-- icons -->
    <link rel="shortcut icon" href="/assets/loaders/favicon.ico">
    <!-- Bootstrap Core CSS file -->
    <link rel="stylesheet" href="assets/css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="assets/css/flatty.css" />
    <link rel="stylesheet" type="text/css" href="assets/css/leaflet.css" />
    <link rel="stylesheet" type="text/css" href="assets/css/jquery.dataTables.min.css" />
    <link rel="stylesheet" type="text/css" href="assets/css/dataTables.bootstrap4.min.css" />
    <link rel="stylesheet" href="assets/css/styles.css">
    <link href='https://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Raleway' rel='stylesheet' type='text/css'>
    <!-- Conditional comment containing JS files for IE6 - 8 -->
    <!--[if lt IE 9]>
            <script src="assets/js/html5.js"></script>
            <script src="assets/js/respond.min.js"></script>
        <![endif]-->
</head>

<body>
    <!-- Navigation -->
    <nav class="navbar navbar-fixed-top navbar-inverse" role="navigation">
        <div class="container-fluid">
            <!-- Brand and toggle get grouped for better mobile display -->
            <div class="navbar-header">
                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand" href="#">Investment Analysis</a>
            </div>
            <!-- /.navbar-header -->
            <!-- /.navbar-collapse -->
        </div>
        <!-- /.container-fluid -->
    </nav>
    <!-- /.navbar -->
    <!-- Page Content -->
    <div class="container-fluid">
        <!-- /.row -->
        <br>
        <!-- Heading Row -->
        <div class="row">
            <div class="col-md-12">

                <p class="description">This plugin shows how investments will flow through your study area over time.
                    It downloads a design from Geodesignhub, computes its area and construction costs and provides a <a
                        href="https://en.wikipedia.org/wiki/Discounted_cash_flow" target="_blank">Discounted Cash Flow</a>
                    analysis to calculate Net Present Value of this design. Choose the WACC and click
                    on Compute Net Present Value, then you can download computed data as a CSV file.</p><br><br>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <div class="boundariesCont">
                    <h4>Boundaries and Investments</h4>
                    <canvas id="boundaryChart"></canvas>
                </div>
            </div>
        </div>

        <div class="row">

            <div class="col-md-12">
                <div class="boundariesCont">
                    <h4>Boundaries Map</h4>
                    <div id="boundaryMap" class="map"></div>
                </div>
            </div>

        </div>
        <br>
        <div class="row">
            <div class="col-md=12">
                <h4>Systems</h4>
                <div id="systemsCBCont" style="display:none">
                    <div id="systemsCB"></div>
                    <br>

                </div>
            </div>
        </div>
        <br><br>
        <hr>
        <!-- /.col-md-4 -->
        <div class="row">
            <div class="col-md-12">
                <h4>Diagrams and Asset Details</h4>
                <br>
                <table id="npv" class="hor-minimalist-b">
                    <thead>
                        <!-- <tr class='blank'>&nbsp;&nbsp;</tr> -->
                    </thead>
                    <tbody>
                        <!-- <tr class='blank'>&nbsp;&nbsp;</tr> -->
                    </tbody>
                    <tfoot>
                        <!-- <tr class='blank'>&nbsp;&nbsp;</tr> -->
                    </tfoot>
                </table>

            </div>
        </div>
        <br><br>
        <div class="row">
            <div class="col-md-12">
                <h4>Boundaries Population and Jobs</h4>
                <br>
                <div id="boundary_population_paracoords" class="parcoords"></div>               
            </div>
        </div>
        <br><br>
        <hr>
       
        <!-- Footer -->
        <footer>
            <div class="row">
                <div class="col-lg-12">
                    <p>&copy; 2019 Geodesignhub, see the <a href="https://geodesignhub.github.io/AssetAnalysis/">Github
                            repository</a> for more information.</p>
                </div>
            </div>
        </footer>
        <div id="drawing"></div>
    </div>
    <!-- /.container-fluid -->
    <!-- JQuery scripts -->
    <script type="text/javascript" src="assets/js/jquery.min.js"></script>
    <script type="text/javascript" src="assets/js/humane.min.js"></script>


    <script type="text/javascript" src="assets/js/chartjs.min.js"></script>
    <!-- Bootstrap Core scripts -->
    <script type="text/javascript" src="assets/js/ion.rangeSlider.min.js"></script>
    <script type="text/javascript" src="assets/js/bootstrap.min.js"></script>
    <script type="text/javascript" src="assets/js/bootstrap-editable.min.js"></script>
    <script type="text/javascript" src="assets/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript" src="assets/js/colors.js"></script>
    <script type="text/javascript" src="assets/js/leaflet.js"></script>
    <script type="text/javascript" src="assets/js/choropleth.js"></script>
    <script type="text/javascript" src="assets/js/moment.min.js"></script>
    <script type="text/javascript" src="assets/js/d3.min.js"></script>

    <script type="text/javascript">
        var incomeGrid;
        var standardizationVar;
        var boundaryStdVar;
        var maintainenceGrid;
        var investmentGrid;
        var boundaryGeomDetails;
        var boundaryValueDetails;
        var npv_table;
        var boundaries_investment_tables;

        var numYears = 30; // number of colums; 


        // $("#loadingGIF").hide();
        var opGJ = {
            "type": "FeatureCollection",
            "features": []
        };
        var systems = <%- systems %>;
        var design = <%- design %>;
        var systemdetail = <%- systemdetail %>;
        var apitoken = "<%= apitoken  %>"; //var test is now assigned to getTest which will only work on browsers
        var projectid = "<%= projectid %>";
        var projectdetails = <%- projectdetails %>;
        var syndiagrams = <%- syndiagrams %>;
        var timeline = <%- timeline %>;
        var bounds = <%- bounds %>;
        var boundaries = <%- boundaries %>;
        var saved_diagram_details = <%- saved_diagram_details %>;
        var investmentdata;

        if (boundaries.features.length > 0) {
            $(".boundariesCont").show();
        }
        var startyear = moment(projectdetails['startdate']).year();


        function abbrNum(number, decPlaces) {
            if (number < 1000) {
                number = Math.round(number);
            } else {
                decPlaces = Math.pow(10, decPlaces);
                var abbrev = ["k", "m", "b", "t"];
                for (var i = abbrev.length - 1; i >= 0; i--) {
                    var size = Math.pow(10, (i + 1) * 3);
                    if (size <= number) {
                        number = Math.round(number * decPlaces / size) / decPlaces;
                        if ((number == 1000) && (i < abbrev.length - 1)) {
                            number = 1;
                            i++;

                        }
                        number += abbrev[i];
                        break;
                    }
                }
            }
            return number;
        }

        function initpercentSliders() {
            $("#wacc-slider").ionRangeSlider({
                min: 0,
                max: 20,
                from: 1,
                step: 0.5,
                postfix: "%",
                grid: true,
                prettify_enabled: true
            });

        }

        function generateInitTables() {
            destroyTables();
            var allDiagrams = syndiagrams.diagrams;
            var sys = systems;
            var syslen = sys.length;
            for (var x = 0; x < syslen; x++) {
                sys[x]['diagrams'] = [];
                // sysDiags.push({cursys.name:{"id":cursys.id, "color":cursys.syscolor, "diagrams":[]}});
            }
            var diagGJ = {};
            for (var g = 0; g < allDiagrams.length; g++) {
                var curDiag = allDiagrams[g];
                diagGJ[parseInt(curDiag)] = {
                    "type": "FeatureCollection",
                    "features": []
                };
            }
            for (var j = 0; j < design.features.length; j++) {
                var curFeat = design.features[j];
                var curFeatProp = curFeat.properties;
                var diagID = curFeatProp.diagramid;
                diagGJ[parseInt(diagID)].features.push(curFeat);
            }

            for (var dID in diagGJ) {
                var diagFeats = diagGJ[dID];
                var ran = false;
                for (var y1 = 0; y1 < diagFeats.features.length; y1++) {
                    if (ran == false) {
                        var diagSysName = diagFeats.features[y1].properties.sysname;
                        // var tmpDiagFeat = {};
                        for (var x1 = 0; x1 < syslen; x1++) {
                            var cursys = sys[x1];
                            if (cursys.sysname == diagSysName) {
                                // tmpDiagFeat[dID]  = diagFeats;
                                sys[x1]['diagrams'].push(diagFeats);
                                break;
                            }
                            ran = true;
                        }
                        break;
                    }
                }
            }

            $("#npv").find("tbody>tr:gt(0)").remove();
            $("#npv").find("thead>tr:gt(0)").remove();

            var headcounter = 0;
            var footercounter = 0;
            for (var h = 0; h < syslen; h++) {
                var cursys = sys[h];
                if (cursys.diagrams.length > 0) {
                    var yrCounter = 0
                    if (headcounter === 0) { // header row
                        var npvHTML =
                            "<tr><th class='header initCol'>Diagram</th><th>Asset Class</th><th>Population (residents, visitors etc.)</th><th class='aaheader'>Analysis</th><th class='fundingheader'>Funding</th><th class='systemheader'>System</th>";

                        npvHTML += "</tr>";

                        $('#npv  > thead').append(npvHTML);
                        headcounter += 1;
                    } // header is added. 

                    // add system row 
                    var diaglen = cursys.diagrams.length;

                    for (var p = 0; p < diaglen; p++) {
                        var curdiag = cursys.diagrams[p];
                        if (curdiag.features.length > 0) {
                            var curdiagprops = curdiag.features[0].properties;
                            var curdiagid = curdiag.features[0].properties.diagramid;
                            var projectorpolicy = curdiag.features[0].properties.areatype;
                            var diagrowHTMLnpv = "<tr class=" + "'" + cursys.id + "'" + "><td class='initCol'>" +
                                curdiagprops.description + "<br>(" + projectorpolicy + ")</td>" + "<td class=" +
                                "'assetdetails-" + curdiagid + "'" + "></td>" + "<td class=" +
                                "'population-" + curdiagid + "'" + "></td>" + "<td class=" +
                                "'aa-" + curdiagid + "'" + "></td>" + "<td class=" + "funding-" +
                                curdiagid + "'" +
                                ">" + curdiagprops.fundingtype + "</td>" + "<td class=" + "system-" +
                                curdiagid + "'" +
                                ">" + cursys.sysname + "<sup class=" + "'yeild-" + cursys.id + "'" + "></sup></td>";
                            yrCounter = 0;

                            diagrowHTMLnpv += "</tr>";
                            $('#npv > tbody').append(diagrowHTMLnpv);


                        }
                    }
                }
            }
            systems = sys;
        }

        function updateWorkerStatus(data) {
            $("#procstatus").html(" " + data + "% complete");
        }

        // function updateMapsWorkerStatus(data) {
        //     $("#procstatusMap").html(" " + data + "% complete");
        // }

        function populateTableDataInit() {
            destroyTables();
            var areaWorker = new Worker('/assets/workers/computeAreas.js');
            areaWorker.onerror = function (e) {
                console.log('Error: Line ' + e.lineno + ' in ' + e.filename + ': ' + e.message);
                $("#loadingGIF").hide();
                humane.log("There was a error in processing, please try again.. ", {
                    addnCls: 'humane-flatty-log'
                });

            };
            areaWorker.postMessage({
                'systemdetails': JSON.stringify(systemdetail),
                'systems': JSON.stringify(systems),
                'timeline': JSON.stringify(timeline),
                'startyear': JSON.stringify(startyear),
                'bounds': bounds['bounds'],
                'years': numYears,
                'saved_diagram_details': JSON.stringify(saved_diagram_details)
            });
            areaWorker.addEventListener('message', function (e) {
                if (e.data.mode === 'status') {
                    updateWorkerStatus(e.data.percentcomplete);
                } else {

                    standardizationVar = parseInt(e.data.maxYearlyCost);
                    // grid = JSON.parse(e.data.grid);
                    // sysGrids = JSON.parse(e.data.sysGrids);

                    // var gridsize = e.data.gridsize;
                    // var gridsize = parseFloat(gridsize * gridsize * 100).toFixed(2);
                    // $("#gridsizecont").html("Note: Grid cell size is " + gridsize + " hectares.");
                    // diagGrids = JSON.parse(e.data.diagGrids);

                    investmentdata = JSON.parse(e.data.output);

                    showallTables();
                    populateIncomeInvestment(investmentdata);
                    // computeDCFNPV(investmentdata);
                    generateSystemCB(systemdetail);

                    $("#loadingGIF").hide();
                    $('#systemsCBCont').show();
                    if (boundaries.features.length > 0) {
                        updateBoundaries();
                    }
                    initializeTables();
                }
            }, false);

        }

        function updateBoundaries() {
            var selectedsystems = [];
            $('#systemsCB input:checked').each(function () {
                selectedsystems.push($(this).attr('id'));
            });
            $("#loadingGIF").show();
            $("#procstatus").html("Processing..");

            var boundaryWorker = new Worker('/assets/workers/computeBoundaryValue.js');
            boundaryWorker.onerror = function (e) {
                console.log('Error: Line ' + e.lineno + ' in ' + e.filename + ': ' + e.message);
                $("#loadingGIF").hide();
                humane.log("There was a error in boundary computation, please try again.. ", {
                    addnCls: 'humane-flatty-log'
                });

            };
            // console.log(selectedsystems);
            boundaryWorker.postMessage({
                'design': JSON.stringify(design),
                'investmentdata': JSON.stringify(investmentdata),
                'selectedsystems': JSON.stringify(selectedsystems),
                'boundaries': JSON.stringify(boundaries),
                'systemdetails': JSON.stringify(systemdetail),
                'number_of_years': numYears,
                'saved_diagram_details': JSON.stringify(saved_diagram_details),
                'start_year': startyear
            });
            boundaryWorker.addEventListener('message', function (e) {
                if (e.data.mode === 'status') {
                    updateWorkerStatus(e.data.percentcomplete);
                } else {

                    renderBoundaryInvestmentMap(JSON.parse(e.data.newboundaries), parseInt(e.data.stdVar));
                    renderBoundaryInvestmentChart(JSON.parse(e.data.boundaryValue));
                    boundaryStdVar = parseInt(e.data.stdVar);
                    boundaryGeomDetails = JSON.parse(e.data.newboundaries);
                    boundaryValueDetails = JSON.parse(e.data.boundaryValue);
                    $("#loadingGIF").hide();
                }
            }, false);

        }

        function highlightFeature(e) {
            var layer = e.target;

            layer.setStyle({
                weight: 5,
                color: '#fff',
                dashArray: '',
                fillOpacity: 0.7
            });

            if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
                layer.bringToFront();
            }

            info.update(layer.feature.properties);
            // console.log(layer.feature.properties)
        }

        function resetHighlight(e) {
            boundaryChoropleth.resetStyle(e.target);
        }

        function onEachFeature(feature, layer) {
            layer.on({
                mouseover: highlightFeature,
                mouseout: resetHighlight,
                click: zoomToFeature
            });
        }

        function zoomToFeature(e) {
            boundarymap.fitBounds(e.target.getBounds());
        }

        function onEachFeature(feature, layer) {
            layer.on({
                mouseover: highlightFeature,
                mouseout: resetHighlight,
                click: zoomToFeature
            });
        }

        function renderBoundaryInvestmentMap(newboundaries, stdVar) {
            boundaryLayer.clearLayers();

            boundaryChoropleth = L.choropleth(newboundaries, {
                valueProperty: function (feature) {
                    var m = feature.properties.totalInvestment;
                    // m = (m / stdVar) * 100;
                    return m;
                },

                scale: ['#dadaeb', '#bcbddc', '#9e9ac8', '#756bb1', '#54278f'], //purples
                steps: 5,
                mode: 'q',
                style: {
                    color: '#fff',
                    weight: 2,
                    fillOpacity: 0.8
                },
                onEachFeature: onEachFeature
            }).addTo(boundaryLayer);

            boundarymap.fitBounds(boundaryLayer.getBounds());
        }

        function renderBoundaryInvestmentChart(boundarydata) {
            var bdata = [];
            for (var k in boundarydata) {
                var v = boundarydata[k];
                bdata.push(v);
            }
            var bdata = bdata.sort(function (a, b) {
                return parseFloat(a.totalInvestment) - parseFloat(b.totalInvestment);
            });

            var b_investment_dataset = [];
            var labels = [];
            for (var g1 = 0; g1 < numYears; g1++) {
                var cYear = (startyear + g1);
                labels.push(cYear);
            }

            for (var x = 0; x < bdata.length; x++) {
                var curBoundaryValue = bdata[x];
                var cur_b_investment = {};
                cur_b_investment['label'] = curBoundaryValue.bname;
                cur_b_investment['data'] = [];
                for (var g1 = 0; g1 < numYears; g1++) {
                    var cYear = (startyear + g1);
                    cur_b_investment['data'].push(parseInt(curBoundaryValue['investment'][cYear]));
                }
                b_investment_dataset.push(cur_b_investment);
            }

            var options = {
                responsive: true,
                title: {
                    display: false,
                    text: 'Year investment by boundary'
                },
                tooltips: {
                    mode: 'index',
                    intersect: false,
                },
                hover: {
                    mode: 'nearest',
                    intersect: true
                },
                scales: {
                    xAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Year'
                        }
                    }],
                    yAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Value'
                        }
                    }]
                }
            }

            var ctx = $("#boundaryChart");
            var myLineChart = new Chart(ctx, {
                type: 'line',
                data: {
                    'labels': labels,
                    'datasets': b_investment_dataset
                },
                options: options
            });
        }

        var boundarymap = L.map('boundaryMap', {
            'zoomControl': false,
            'dragging': false,
            'touchZoom': false,
            'scrollWheelZoom': false,
            'doubleClickZoom': false,
            'attributionControl': false
        });
        L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, &copy; <a href="https://cartodb.com/attributions">CartoDB</a>',
            maxZoom: 18,
        }).addTo(boundarymap);
        var boundaryLayer = L.featureGroup().addTo(boundarymap);
        var info = L.control();

        info.onAdd = function (map) {
            this._div = L.DomUtil.create('div', 'info'); // create a div with a class "info"
            this.update();
            return this._div;
        };

        // method that we will use to update the control based on feature properties passed
        info.update = function (props) {
            this._div.innerHTML = '<h4>Total Investment</h4>' + (props ?
                '<b>' + props.bname + '</b><br />' + abbrNum(props.totalInvestment, 2) + ' EUR' :
                'Hover over a boundary');
        };

        info.addTo(boundarymap);

        var bnds = bounds['bounds'];
        var latLngs = bnds.split(',');
        var southWest = L.latLng(latLngs[1], latLngs[0]);
        var northEast = L.latLng(latLngs[3], latLngs[2]);
        var mB = new L.latLngBounds(southWest, northEast);

        boundarymap.fitBounds(mB);

        function getDiagramSystemTitle(diagramid) {
            const ad = systems;
            var sysName = 'NA';
            var diagName = 'NA';
            var syslen = ad.length;
            loop1:
                for (var x = 0; x < syslen; x++) {
                    var cSys = ad[x];

                    var all_current_Diagrams = cSys.diagrams;

                    var allDiaglen = all_current_Diagrams.length;

                    if (allDiaglen > 0) {
                        loop2: for (var y = 0; y < allDiaglen; y++) {
                            var cDiag = all_current_Diagrams[y];
                            var diagram_ID = cDiag.features[0].properties.diagramid;
                            if (diagramid == diagram_ID) {
                                sysName = cDiag.features[0].properties.sysname;
                                diagName = cDiag.features[0].properties.description;
                                break loop1;
                            }
                        }
                    }
                }
            const sys_title = ' | ' + sysName + ' ' + diagName;
            return sys_title
        }

        function populateIncomeInvestment(investmentdata) {
            var yeildDict = {};
            const ssd = saved_diagram_details;
            for (var g = 0; g < investmentdata.length; g++) {
                var curInvestmentdata = investmentdata[g];
                var diagID = curInvestmentdata['id'];
                var totalInvestment = curInvestmentdata['totalInvestment'];

                const url = '<a href="https://assetanalysis.herokuapp.com/?apitoken=' + apitoken + '&projectid=' +
                    projectid + '&diagramid=' + diagID +
                    '" target="_blank">Details <i class="glyphicon glyphicon-share"></i></a>';

                $(".aa-" + diagID).html(url);

                for (let p1 = 0; p1 < ssd.length; p1++) {
                    const cur_ele = ssd[p1];
                    const diag_id = parseInt(cur_ele['key'].split('-')[1]);
                    if (diag_id == diagID) {
                        const asset_details = cur_ele['asset_details'];

                        if (Object.keys(asset_details).length === 0 && asset_details.constructor === Object) {
                            $(".assetdetails-" + diagID).html('Not set');
                            $('.population-' + diagID).html('-');
                        } else {
                            const ad = asset_details['class'];
                            $(".assetdetails-" + diagID).html(ad);

                            if (ad === 'hospitality') {
                                $('.population-' + diagID).html(abbrNum(asset_details['metadata'][
                                    'total_yearly_visitors'
                                ], 2));
                            } else if (ad == 'residential') {
                                $('.population-' + diagID).html(abbrNum(asset_details['metadata'][
                                    'number_of_people_residential'
                                ], 2));
                            } else if (ad == 'retail') {
                                $('.population-' + diagID).html(abbrNum(asset_details['metadata'][
                                    'total_daily_visitors_retail'
                                ], 2));
                            } else if (ad == 'office') {
                                $('.population-' + diagID).html(abbrNum(asset_details['metadata'][
                                    'total_daily_visitors_office'
                                ], 2));
                            }

                        }
                    }

                }

            }
        }

        function generateSystemCB(systems) {
            $("#systemsCB").html('');
            for (var x = 0; x < systems.length; x++) {
                $('#systemsCB').append('<input name="sysCB" id=' + "'" + systems[x].id + "'" +
                    'type="checkbox" checked /> <span class="square c-' + systems[x].syscolor.substring(1).toLowerCase() +
                    '"></span>&nbsp;&nbsp;' + systems[x].sysname + '</input>&nbsp;&nbsp;');
            }

            $('#systemsCB').click(function () {
                var selectedsystems = [];
                $('#systemsCB input:checked').each(function () {
                    selectedsystems.push($(this).attr('id'));
                });

                destroyTables();

                if (boundaries.features.length > 0) {
                    updateBoundaries();
                }

                $('#npv > tbody > tr').each(function () {
                    var cls = $(this).attr('class');
                    var classWhitelist = ['blank'];
                    if (jQuery.inArray(cls, classWhitelist) == -1) { // it is not in whitelist
                        if (jQuery.inArray(cls, selectedsystems) == -1) { // this class is not in whilte list
                            // hide it.
                            $(this).hide();
                        } else {
                            // show it.
                            $(this).show();
                        }
                    }
                });

                initializeTables();
                // hide
            });
        }
        initpercentSliders();
        generateInitTables();
        populateTableDataInit();
        // computeDCFNPV();
        function showallTables() {
            $('#npv > tbody > tr').each(function () {
                $(this).show();
            });

        }

        function initializeTables() {
            var tableGenerator = function (domid) {
                var groupColumn = 5;
                var t = $('#' + domid).DataTable({
                    "columnDefs": [{
                        "visible": false,
                        "targets": groupColumn
                    }],
                    searching: false,
                    fixedHeader: {
                        header: false,
                        footer: true
                    },
                    "order": [
                        [groupColumn, 'asc']
                    ],
                    "drawCallback": function (settings) {
                        var api = this.api();
                        var rows = api.rows({
                            page: 'current'
                        }).nodes();
                        var last = null;

                        api.column(groupColumn, {
                            page: 'current'
                        }).data().each(function (group, i) {
                            if (last !== group) {
                                $(rows).eq(i).before(
                                    '<tr class="group"><td colspan="5">' + group +
                                    '</td></tr>'
                                );

                                last = group;
                            }
                        });
                    }
                });
                return t;
            }
            npv_table = tableGenerator('npv');
        }

        function destroyTables() {
            if ($.fn.DataTable.isDataTable('#npv')) {
                npv_table.destroy();
            }
        }

        function generate_paracoords_charts() {
/*
 * Parallel Coordinates visualization, inspired by :
 * Byron Houwens : https://codepen.io/BHouwens/pen/RaeGVd?editors=0010
 * Mike Bostock : https://bl.ocks.org/mbostock/1341021
 *
 */

/*
 * Data
 *****************************/
 const data = [
  {player: 1, team: 1, distance: 12, time_standing: 2, time_jogging: 2, time_sprinting: 1, fast_distance: 10, sprint_distance: 2, work_to_rest: 1},
  {player: 3, team: 2, distance: 13, time_standing: 3, time_jogging:3 , time_sprinting: 1, fast_distance: 7, sprint_distance: 5, work_to_rest: 1},
  {player: 12, team: 1, distance: 21, time_standing: 2, time_jogging: 4, time_sprinting: 5, fast_distance: 18, sprint_distance: 3, work_to_rest: 2},
  {player: 34, team: 1, distance: 4, time_standing: 3, time_jogging: 1, time_sprinting: 0, fast_distance: 2, sprint_distance: 0, work_to_rest: 1},
  {player: 1, team: 1, distance: 9, time_standing: 2, time_jogging: 2.3, time_sprinting: 2.2, fast_distance: 1, sprint_distance: 2, work_to_rest: 1},
  {player: 3, team: 2, distance: 3, time_standing: 1, time_jogging: 0.3 , time_sprinting: 2, fast_distance: 17, sprint_distance: 3, work_to_rest: 1},
  {player: 12, team: 1, distance: 7, time_standing: 0.5, time_jogging: 2.5, time_sprinting: 4, fast_distance: 8, sprint_distance: 4, work_to_rest: 2},
  {player: 34, team: 1, distance: 2, time_standing: 1.2, time_jogging: 1.8, time_sprinting: 0.6, fast_distance: 12, sprint_distance: 1, work_to_rest: 1}
];

const features = [
  {name: 'team', range: [1,2]}, 
  {name: 'distance', range: [0,21]}, 
  {name: 'time_standing', range: [0,3]}, 
  {name: 'time_jogging', range: [0,4]}, 
  {name: 'time_sprinting', range: [0,5]}, 
  {name: 'fast_distance', range: [0,18]}, 
  {name: 'sprint_distance', range: [0,5]}, 
  {name: 'work_to_rest', range: [0,2]}
];

/*
 * Parameters
 *****************************/
const width = 960, height = 400, padding = 28, brush_width = 20;
const filters = {};

/*
 * Helper functions
 *****************************/
// Horizontal scale
const xScale = d3.scalePoint()
  .domain(features.map(x=>x.name))
  .range([padding, width-padding]);

// Each vertical scale
const yScales = {};
features.map(x=>{
  yScales[x.name] = d3.scaleLinear()
    .domain(x.range)
    .range([height-padding, padding]);
});
yScales.team = d3.scaleOrdinal()
    .domain(features[0].range)
    .range([height-padding, padding]);

// Each axis generator
const yAxis = {};
d3.entries(yScales).map(x=>{
  yAxis[x.key] = d3.axisLeft(x.value);
});

// Each brush generator
const brushEventHandler = function(feature){
  if (d3.event.sourceEvent && d3.event.sourceEvent.type === "zoom") 
    return; // ignore brush-by-zoom
  if(d3.event.selection != null){
    filters[feature] = d3.event.selection.map(d=>yScales[feature].invert(d));
  }else{
    if(feature in filters)
      delete(filters[feature]);
  }
  applyFilters();
}

const applyFilters = function(){
  d3.select('g.active').selectAll('path')
    .style('display', d=>(selected(d)?null:'none'));
}
           
 const selected = function(d){
   const _filters = d3.entries(filters);
   return _filters.every(f=>{
      return f.value[1] <= d[f.key] && d[f.key] <= f.value[0];
   });
 }

const yBrushes = {};
d3.entries(yScales).map(x=>{
  let extent = [
    [-(brush_width/2), padding],
    [brush_width/2, height-padding]
  ];
  yBrushes[x.key]= d3.brushY()
    .extent(extent)
    .on('brush', ()=>brushEventHandler(x.key))
    .on('end', ()=>brushEventHandler(x.key));
});

// Paths for data
const lineGenerator = d3.line();

const linePath = function(d){
  const _data = d3.entries(d).filter(x=>x.key!='player');
  let points = _data.map(x=>([xScale(x.key),yScales[x.key](x.value)]));
  return(lineGenerator(points));
}

/*
 * Parallel Coordinates
 *****************************/
// Main svg container
const pcSvg = d3.select('div.parcoords')
  .append('svg')
  .attr('width', width)
  .attr('height', height);

// Inactive data
pcSvg.append('g').attr('class','inactive').selectAll('path')
  .data(data)
  .enter()
    .append('path')
    .attr('d', d=>linePath(d));

// Inactive data
pcSvg.append('g').attr('class','active').selectAll('path')
  .data(data)
  .enter()
    .append('path')
    .attr('d', d=>linePath(d));

// Vertical axis for the features
const featureAxisG = pcSvg.selectAll('g.feature')
  .data(features)
  .enter()
    .append('g')
      .attr('class','feature')
      .attr('transform',d=>('translate('+xScale(d.name)+',0)'));

featureAxisG
      .append('g')
      .each(function(d){
        d3.select(this).call(yAxis[d.name]);
      });

featureAxisG
  .each(function(d){
    d3.select(this)
      .append('g')
      .attr('class','brush')
      .call(yBrushes[d.name]);
  });

featureAxisG
  .append("text")
  .attr("text-anchor", "middle")
  .attr('y', padding/2)
  .text(d=>d.name);
        }

    </script>
</body>
</html>