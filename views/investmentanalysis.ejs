<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Investment Analysis</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="Description" lang="en" content="Geodesignhub Investment Analysis">
    <meta name="author" content="Geodesignhub">
    <meta name="robots" content="index, follow">
    <!-- icons -->
    <link rel="shortcut icon" href="/assets/loaders/favicon.ico">
    <!-- Bootstrap Core CSS file -->
    <link rel="stylesheet" href="assets/css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="assets/css/flatty.css" />
    <link rel="stylesheet" type="text/css" href="assets/css/leaflet.css" />
    <link rel="stylesheet" type="text/css" href="assets/css/jquery.dataTables.min.css" />
    <link rel="stylesheet" type="text/css" href="assets/css/dataTables.bootstrap4.min.css" />
    <link rel="stylesheet" href="assets/css/styles.css">
    <link href='https://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Raleway' rel='stylesheet' type='text/css'>
    <!-- Conditional comment containing JS files for IE6 - 8 -->
    <!--[if lt IE 9]>
            <script src="assets/js/html5.js"></script>
            <script src="assets/js/respond.min.js"></script>
        <![endif]-->
</head>

<body>
    <!-- Navigation -->
    <nav class="navbar navbar-fixed-top navbar-inverse" role="navigation">
        <div class="container-fluid">
            <!-- Brand and toggle get grouped for better mobile display -->
            <div class="navbar-header">
                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand" href="#">Investment Analysis</a>
            </div>
            <!-- /.navbar-header -->
            <!-- /.navbar-collapse -->
        </div>
        <!-- /.container-fluid -->
    </nav>
    <!-- /.navbar -->
    <!-- Page Content -->
    <div class="container-fluid">
        <!-- /.row -->
        <br>
        <!-- Heading Row -->
        <div class="row">
            <div class="col-md-12">
                
                <p class="description">This plugin shows how investments will flow through your study area over time.
                    It downloads a design from Geodesignhub, computes its area and construction costs and provides a <a
                        href="https://en.wikipedia.org/wiki/Discounted_cash_flow" target="_blank">Discounted Cash Flow</a>
                    analysis to calculate Net Present Value of this design. Choose the WACC and click
                    on Compute Net Present Value, then you can download computed data as a CSV file.</p><br><br>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <div class="boundariesCont">
                    <canvas id="boundaryChart"></canvas>
                </div>
            </div>
        </div>

        <div class="row">
            
            <div class="col-md-12">
                <div class="boundariesCont">
                    <h4>Boundary Map</h4>
                    <div id="boundaryMap" class="map"></div>
                </div>
            </div>

        </div>
        <br>
        <div class="row">
            <div class="col-md=12">
                 <h4>Systems</h4>
                <div id="systemsCBCont" style="display:none">
                    <div id="systemsCB"></div>
                    <br>

                </div>
            </div>
            </div>

        <!-- /.col-md-4 -->
        <div class="row">
            <div class="col-md-12">
                <h4>Diagrams and Asset Details</h4>
                <table id="npv" class="hor-minimalist-b">
                    <thead>
                        <!-- <tr class='blank'>&nbsp;&nbsp;</tr> -->
                    </thead>
                    <tbody>
                        <!-- <tr class='blank'>&nbsp;&nbsp;</tr> -->
                    </tbody>
                    <tfoot>
                        <!-- <tr class='blank'>&nbsp;&nbsp;</tr> -->
                    </tfoot>
                </table>
           
            </div>
        </div>
     
        <br><br>
        <hr>
        <!-- Footer -->
        <footer>
            <div class="row">
                <div class="col-lg-12">
                    <p>&copy; 2019 Geodesignhub, see the <a href="https://geodesignhub.github.io/AssetAnalysis/">Github
                            repository</a> for more information.</p>
                </div>
            </div>
        </footer>
        <div id="drawing"></div>
    </div>
    <!-- /.container-fluid -->
    <!-- JQuery scripts -->
    <script type="text/javascript" src="assets/js/jquery.min.js"></script>
    <script type="text/javascript" src="assets/js/humane.min.js"></script>


    <script type="text/javascript" src="assets/js/chartjs.min.js"></script>
    <!-- Bootstrap Core scripts -->
    <script type="text/javascript" src="assets/js/ion.rangeSlider.min.js"></script>
    <script type="text/javascript" src="assets/js/bootstrap.min.js"></script>
    <script type="text/javascript" src="assets/js/bootstrap-editable.min.js"></script>
    <script type="text/javascript" src="assets/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript" src="assets/js/colors.js"></script>
    <script type="text/javascript" src="assets/js/leaflet.js"></script>
    <script type="text/javascript" src="assets/js/choropleth.js"></script>
    <script type="text/javascript" src="assets/js/moment.min.js"></script>
    <script type="text/javascript">
        var incomeGrid;
        var standardizationVar;
        var boundaryStdVar;
        var maintainenceGrid;
        var investmentGrid;
        var grid;
        var sysGrids;
        var diagGrids;
        var boundaryGeomDetails;
        var boundaryValueDetails;
        var npv_table;
        var boundaries_investment_tables;

        var numYears = 30; // number of colums; 


        // $("#loadingGIF").hide();
        var opGJ = {
            "type": "FeatureCollection",
            "features": []
        };
        var systems = <%- systems %>;
        var design = <%- design %>;
        var systemdetail = <%- systemdetail %>;
        var apitoken = "<%= apitoken  %>"; //var test is now assigned to getTest which will only work on browsers
        var projectid = "<%= projectid %>";
        var projectdetails = <%- projectdetails %>;
        var syndiagrams = <%- syndiagrams %>;
        var timeline = <%- timeline %>;
        var bounds = <%- bounds %>;
        var boundaries = <%- boundaries %>;
        var saved_diagram_details = <%- saved_diagram_details %>;
        var investmentdata;

        if (boundaries.features.length > 0) {
            $(".boundariesCont").show();
        }
        var startyear = moment(projectdetails['startdate']).year();


        function abbrNum(number, decPlaces) {
            if (number < 1000) {
                number = Math.round(number);
            } else {
                decPlaces = Math.pow(10, decPlaces);
                var abbrev = ["k", "m", "b", "t"];
                for (var i = abbrev.length - 1; i >= 0; i--) {
                    var size = Math.pow(10, (i + 1) * 3);
                    if (size <= number) {
                        number = Math.round(number * decPlaces / size) / decPlaces;
                        if ((number == 1000) && (i < abbrev.length - 1)) {
                            number = 1;
                            i++;

                        }
                        number += abbrev[i];
                        break;
                    }
                }
            }
            return number;
        }

        function initpercentSliders() {
            $("#wacc-slider").ionRangeSlider({
                min: 0,
                max: 20,
                from: 1,
                step: 0.5,
                postfix: "%",
                grid: true,
                prettify_enabled: true
            });
           
        }

        function generateInitTables() {
            destroyTables();
            var allDiagrams = syndiagrams.diagrams;
            var sys = systems;
            var syslen = sys.length;
            for (var x = 0; x < syslen; x++) {
                sys[x]['diagrams'] = [];
                // sysDiags.push({cursys.name:{"id":cursys.id, "color":cursys.syscolor, "diagrams":[]}});
            }
            var diagGJ = {};
            for (var g = 0; g < allDiagrams.length; g++) {
                var curDiag = allDiagrams[g];
                diagGJ[parseInt(curDiag)] = {
                    "type": "FeatureCollection",
                    "features": []
                };
            }
            for (var j = 0; j < design.features.length; j++) {
                var curFeat = design.features[j];
                var curFeatProp = curFeat.properties;
                var diagID = curFeatProp.diagramid;
                diagGJ[parseInt(diagID)].features.push(curFeat);
            }

            for (var dID in diagGJ) {
                var diagFeats = diagGJ[dID];
                var ran = false;
                for (var y1 = 0; y1 < diagFeats.features.length; y1++) {
                    if (ran == false) {
                        var diagSysName = diagFeats.features[y1].properties.sysname;
                        // var tmpDiagFeat = {};
                        for (var x1 = 0; x1 < syslen; x1++) {
                            var cursys = sys[x1];
                            if (cursys.sysname == diagSysName) {
                                // tmpDiagFeat[dID]  = diagFeats;
                                sys[x1]['diagrams'].push(diagFeats);
                                break;
                            }
                            ran = true;
                        }
                        break;
                    }
                }
            }
          
            $("#npv").find("tbody>tr:gt(0)").remove();
            $("#npv").find("thead>tr:gt(0)").remove();

            var headcounter = 0;
            var footercounter = 0;
            for (var h = 0; h < syslen; h++) {
                var cursys = sys[h];
                if (cursys.diagrams.length > 0) {
                    var yrCounter = 0
                    if (headcounter === 0) { // header row
                        var npvHTML =
                            "<tr><th class='header initCol'>Diagram</th><th>Asset Class</th><th>Population (residents, visitors etc.)</th><th class='aaheader'>Analysis</th><th class='fundingheader'>Funding</th><th class='systemheader'>System</th>";

                        npvHTML += "</tr>";

                        $('#npv  > thead').append(npvHTML);
                        headcounter += 1;
                    } // header is added. 

                    // add system row 
                    var diaglen = cursys.diagrams.length;

                    for (var p = 0; p < diaglen; p++) {
                        var curdiag = cursys.diagrams[p];
                        if (curdiag.features.length > 0) {
                            var curdiagprops = curdiag.features[0].properties;
                            var curdiagid = curdiag.features[0].properties.diagramid;
                            var projectorpolicy = curdiag.features[0].properties.areatype;
                            var diagrowHTMLnpv = "<tr class=" + "'" + cursys.id + "'" + "><td class='initCol'>" +
                                curdiagprops.description + "<br>(" + projectorpolicy + ")</td>" + "<td class=" +
                                "'assetdetails-" + curdiagid + "'" + "></td>" + "<td class=" +
                                "'population-" + curdiagid + "'" + "></td>" + "<td class=" +
                                "'aa-" + curdiagid + "'" + "></td>" + "<td class=" + "funding-" +
                                curdiagid + "'" +
                                ">" + curdiagprops.fundingtype + "</td>" + "<td class=" + "system-" +
                                curdiagid + "'" +
                                ">" + cursys.sysname + "<sup class=" + "'yeild-" + cursys.id + "'" + "></sup></td>";
                            yrCounter = 0;
                          
                            diagrowHTMLnpv += "</tr>";
                            $('#npv > tbody').append(diagrowHTMLnpv);


                        }
                    }
                }
            }
            systems = sys;
        }

        function updateWorkerStatus(data) {
            $("#procstatus").html(" " + data + "% complete");
        }

        function updateMapsWorkerStatus(data) {
            $("#procstatusMap").html(" " + data + "% complete");
        }

        function populateTableDataInit() {
            destroyTables();
            var areaWorker = new Worker('/assets/workers/computeAreas.js');
            areaWorker.onerror = function (e) {
                console.log('Error: Line ' + e.lineno + ' in ' + e.filename + ': ' + e.message);
                $("#loadingGIF").hide();
                humane.log("There was a error in processing, please try again.. ", {
                    addnCls: 'humane-flatty-log'
                });

            };
            // const yeilds = $("#one-star, #two-star, #three-star, #four-star").editable('getValue');
            const yeilds = { "one-star": "10", "two-star": "12", "three-star": "16", "four-star": "18" };
            areaWorker.postMessage({
                'systemdetails': JSON.stringify(systemdetail),
                'systems': JSON.stringify(systems),
                'timeline': JSON.stringify(timeline),
                'startyear': JSON.stringify(startyear),
                'bounds': bounds['bounds'],
                'years': numYears,
                'yeilds': JSON.stringify(yeilds),
                'saved_diagram_details': JSON.stringify(saved_diagram_details)
            });
            areaWorker.addEventListener('message', function (e) {
                if (e.data.mode === 'status') {
                    updateWorkerStatus(e.data.percentcomplete);
                } else {

                    standardizationVar = parseInt(e.data.maxYearlyCost);
                    grid = JSON.parse(e.data.grid);
                    sysGrids = JSON.parse(e.data.sysGrids);

                    var gridsize = e.data.gridsize;
                    var gridsize = parseFloat(gridsize * gridsize * 100).toFixed(2);
                    $("#gridsizecont").html("Note: Grid cell size is " + gridsize + " hectares.");
                    diagGrids = JSON.parse(e.data.diagGrids);

                    investmentdata = JSON.parse(e.data.output);

                    showallTables();
                    populateIncomeInvestment(investmentdata);
                    // computeDCFNPV(investmentdata);
                    generateSystemCB(systemdetail);

                    $("#loadingGIF").hide();
                    $('#systemsCBCont').show();
                    if (boundaries.features.length > 0) {
                        updateBoundaries();
                    }
                    initializeTables();
                }
            }, false);

        }
        (function (console) {
            console.save = function (data, filename) {
                if (!data) {
                    console.error('Console.save: No data')
                    return;
                }
                if (!filename) filename = 'investmentdata.csv'
                if (typeof data === "object") {
                    data = JSON.stringify(data, undefined, 4)
                }
                var blob = new Blob([data], {
                        type: 'text/json'
                    }),
                    e = document.createEvent('MouseEvents'),
                    a = document.createElement('a')
                a.download = filename
                a.href = window.URL.createObjectURL(blob)
                a.dataset.downloadurl = ['text/json', a.download, a.href].join(':')
                e.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0,
                    null)
                a.dispatchEvent(e)
            }
        })(console)


        function updateMaps() {

            var selectedsystems = [];
            $('#systemsCB input:checked').each(function () {
                selectedsystems.push($(this).attr('id'));
            });
            $("#loadingGIF").show();
            $("#procstatus").html("Processing..");

            var mapWorker = new Worker('/assets/workers/computeMap.js');
            mapWorker.onerror = function (e) {
                console.log('Error: Line ' + e.lineno + ' in ' + e.filename + ': ' + e.message);
                $("#loadingGIF").hide();
                humane.log("There was a error in creating maps, please try again.. ", {
                    addnCls: 'humane-flatty-log'
                });

            };

            mapWorker.postMessage({
                'grid': JSON.stringify(grid),
                'sysGrid': JSON.stringify(sysGrids),
                'diagGrid': JSON.stringify(diagGrids),
                'allDiagrams': JSON.stringify(systems),
                'investmentdata': JSON.stringify(investmentdata),
                'selectedsystems': JSON.stringify(selectedsystems)
            });
            mapWorker.addEventListener('message', function (e) {
                if (e.data.mode === 'status') {
                    updateWorkerStatus(e.data.percentcomplete);
                } else {
                    // console.log(e.data.incomeGrid);
                    var incg = JSON.parse(e.data.incomeGrid);
                    var invg = JSON.parse(e.data.investmentGrid);
                    var maintg = JSON.parse(e.data.maintainenceGrid);
                    // plotIncomeMap(incg, 'all', standardizationVar);
                    // plotInvestmentMap(invg, 'all', standardizationVar);
                    // plotMaintainenceMap(maintg, 'all', standardizationVar);

                    $("#loadingGIF").hide();
                    // paint on map.
                }
            }, false);

        }

        function updateBoundaries() {
            var selectedsystems = [];
            $('#systemsCB input:checked').each(function () {
                selectedsystems.push($(this).attr('id'));
            });
            $("#loadingGIF").show();
            $("#procstatus").html("Processing..");

            var boundaryWorker = new Worker('/assets/workers/computeBoundaryValue.js');
            boundaryWorker.onerror = function (e) {
                console.log('Error: Line ' + e.lineno + ' in ' + e.filename + ': ' + e.message);
                $("#loadingGIF").hide();
                humane.log("There was a error in boundary computation, please try again.. ", {
                    addnCls: 'humane-flatty-log'
                });

            };
            // console.log(selectedsystems);
            boundaryWorker.postMessage({
                'design': JSON.stringify(design),
                'investmentdata': JSON.stringify(investmentdata),
                'selectedsystems': JSON.stringify(selectedsystems),
                'boundaries': JSON.stringify(boundaries),
                'systemdetails': JSON.stringify(systemdetail),
                'number_of_years': numYears,
                'start_year': startyear
            });
            boundaryWorker.addEventListener('message', function (e) {
                if (e.data.mode === 'status') {
                    updateWorkerStatus(e.data.percentcomplete);
                } else {
                    // console.log(e.data.boundaryValue);

                    // renderBoundaryInvestment(JSON.parse(e.data.boundaryValue), 'all');
                    renderBoundaryInvestmentMap(JSON.parse(e.data.newboundaries), 'all', parseInt(e.data.stdVar));
                    renderBoundaryInvestmentChart(JSON.parse(e.data.boundaryValue));
                    boundaryStdVar = parseInt(e.data.stdVar);
                    boundaryGeomDetails = JSON.parse(e.data.newboundaries);
                    boundaryValueDetails = JSON.parse(e.data.boundaryValue);
                    $("#loadingGIF").hide();
                    // paint on map.
                }
            }, false);

        }
        function highlightFeature(e) {
            var layer = e.target;

            layer.setStyle({
                weight: 5,
                color: '#fff',
                dashArray: '',
                fillOpacity: 0.7
            });

            if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
                layer.bringToFront();
            }

        info.update(layer.feature.properties);
        console.log(layer.feature.properties)
        }
        function resetHighlight(e) {
            boundaryChoropleth.resetStyle(e.target);
        }
        function onEachFeature(feature, layer) {
            layer.on({
                mouseover: highlightFeature,
                mouseout: resetHighlight,
                click: zoomToFeature
            });
        }
        function zoomToFeature(e) {
            boundarymap.fitBounds(e.target.getBounds());
        }
        function onEachFeature(feature, layer) {
            layer.on({
                mouseover: highlightFeature,
                mouseout: resetHighlight,
                click: zoomToFeature
            });
        }

        function renderBoundaryInvestmentMap(newboundaries, yearlyOrTotal, stdVar) {
            boundaryLayer.clearLayers();


            if (yearlyOrTotal === 'all') {
                boundaryChoropleth = L.choropleth(newboundaries, {
                    valueProperty: function (feature) {
                        var m = feature.properties.totalInvestment;
                        // m = (m / stdVar) * 100;
                        return m;
                    },

                    scale: ['#dadaeb', '#bcbddc', '#9e9ac8', '#756bb1', '#54278f'], //purples
                    steps: 5,
                    mode: 'q',
                    style: {
                        color: '#fff',
                        weight: 2,
                        fillOpacity: 0.8
                    },
                    onEachFeature: onEachFeature
                }).addTo(boundaryLayer);

            } else {
                boundaryChoropleth = L.choropleth(newboundaries, {
                    valueProperty: function (feature) {
                        var i = (feature.properties.investment[parseInt(yearlyOrTotal)]) ? feature.properties
                            .investment[parseInt(yearlyOrTotal)] : 0;
                        i = (i / stdVar) * 100;
                        // console.log("investment: " + i);
                        return i;
                    },

                    scale: ['#dadaeb', '#bcbddc', '#9e9ac8', '#756bb1', '#54278f'], //purples
                    steps: 5,
                    mode: 'q',
                    style: {
                        color: '#fff',
                        weight: 2,
                        fillOpacity: 0.8
                    },
                    onEachFeature: onEachFeature
                }).addTo(boundaryLayer);

            }
            boundarymap.fitBounds(boundaryLayer.getBounds());
        }

        function renderBoundaryInvestmentChart(boundarydata) {
            var bdata = [];
            for (var k in boundarydata) {
                var v = boundarydata[k];
                bdata.push(v);
            }
            var bdata = bdata.sort(function (a, b) {
                return parseFloat(a.totalInvestment) - parseFloat(b.totalInvestment);
            });

            var b_investment_dataset = [];
            var labels = [];
            for (var g1 = 0; g1 < numYears; g1++) {
                    var cYear = (startyear + g1);
                    labels.push(cYear);
                    

                }
            for (var x = 0; x < bdata.length; x++) {
                var curBoundaryValue = bdata[x];

                var cur_b_investment = {}; 
                cur_b_investment['label'] = curBoundaryValue.bname;
                cur_b_investment['data'] =[];
                
                for (var g1 = 0; g1 < numYears; g1++) {
                    var cYear = (startyear + g1);
                    cur_b_investment['data'].push(parseInt(curBoundaryValue['investment'][cYear]));
                    

                }
                
                b_investment_dataset.push(cur_b_investment);

            }

            var options = {
                responsive: true,
                title: {
                    display: false,
                    text: 'Year investment by boundary'
                },
                tooltips: {
                    mode: 'index',
                    intersect: false,
                },
                hover: {
                    mode: 'nearest',
                    intersect: true
                },
                scales: {
                    xAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Year'
                        }
                    }],
                    yAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Value'
                        }
                    }]
                }
            }
            
            var ctx = $("#boundaryChart");
            var myLineChart = new Chart(ctx, {
                type: 'line',
                data: {'labels':labels, 'datasets':b_investment_dataset},
                options: options
            });


        }

        var boundarymap = L.map('boundaryMap', {
            'zoomControl': false,
            'dragging': false,
            'touchZoom': false,
            'scrollWheelZoom': false,
            'doubleClickZoom': false,
            'attributionControl': false
        });
        L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, &copy; <a href="https://cartodb.com/attributions">CartoDB</a>',
            maxZoom: 18,
        }).addTo(boundarymap);
        var boundaryLayer = L.featureGroup().addTo(boundarymap);
        var info = L.control();

        info.onAdd = function (map) {
            this._div = L.DomUtil.create('div', 'info'); // create a div with a class "info"
            this.update();
            return this._div;
        };

        // method that we will use to update the control based on feature properties passed
        info.update = function (props) {
            this._div.innerHTML = '<h4>Total Investment</h4>' +  (props ?
                '<b>' + props.bname + '</b><br />' + abbrNum(props.totalInvestment,2) + ' EUR'
                : 'Hover over a boundary');
        };

        info.addTo(boundarymap);

        var bnds = bounds['bounds'];
        var latLngs = bnds.split(',');
        var southWest = L.latLng(latLngs[1], latLngs[0]);
        var northEast = L.latLng(latLngs[3], latLngs[2]);
        var mB = new L.latLngBounds(southWest, northEast);

        boundarymap.fitBounds(mB);


        function getDiagramSystemTitle(diagramid) {
            const ad = systems;
            var sysName = 'NA';
            var diagName = 'NA';
            var syslen = ad.length;
            loop1:
                for (var x = 0; x < syslen; x++) {
                    var cSys = ad[x];

                    var all_current_Diagrams = cSys.diagrams;

                    var allDiaglen = all_current_Diagrams.length;

                    if (allDiaglen > 0) {
                        loop2: for (var y = 0; y < allDiaglen; y++) {
                            var cDiag = all_current_Diagrams[y];
                            var diagram_ID = cDiag.features[0].properties.diagramid;
                            if (diagramid == diagram_ID) {
                                sysName = cDiag.features[0].properties.sysname;
                                diagName = cDiag.features[0].properties.description;
                                break loop1;
                            }
                        }
                    }
                }
            const sys_title = ' | ' + sysName + ' ' + diagName;

            return sys_title
        }





        function populateIncomeInvestment(investmentdata) {
            var yeildDict = {};
            const ssd = saved_diagram_details;
            for (var g = 0; g < investmentdata.length; g++) {
                var curInvestmentdata = investmentdata[g];
                var diagID = curInvestmentdata['id'];
                var totalInvestment = curInvestmentdata['totalInvestment'];
                
                const url = '<a href="https://assetanalysis.herokuapp.com/?apitoken=' + apitoken + '&projectid=' +
                    projectid + '&diagramid=' + diagID +
                    '" target="_blank">Details <i class="glyphicon glyphicon-share"></i></a>';

                $(".aa-" + diagID).html(url);

                for (let p1 = 0; p1 < ssd.length; p1++) {
                    const cur_ele = ssd[p1];
                    const diag_id = parseInt(cur_ele['key'].split('-')[1]);
                    if (diag_id == diagID) {
                        const asset_details = cur_ele['asset_details'];

                        if (Object.keys(asset_details).length === 0 && asset_details.constructor === Object) {
                            $(".assetdetails-" + diagID).html('Not set');
                            $('.population-' + diagID).html('-');
                        } else {
                            const ad = asset_details['class'];
                            $(".assetdetails-" + diagID).html(ad);

                            if (ad === 'hospitality') {
                                $('.population-' + diagID).html(abbrNum(asset_details['metadata'][
                                    'total_yearly_visitors'
                                ], 2));
                            } else if (ad == 'residential') {
                                $('.population-' + diagID).html(abbrNum(asset_details['metadata'][
                                    'number_of_people_residential'
                                ], 2));
                            } else if (ad == 'retail') {
                                $('.population-' + diagID).html(abbrNum(asset_details['metadata'][
                                    'total_daily_visitors_retail'
                                ], 2));
                            } else if (ad == 'office') {
                                $('.population-' + diagID).html(abbrNum(asset_details['metadata'][
                                    'total_daily_visitors_office'
                                ], 2));
                            }

                        }
                    }

                }

            }
        }

        function generateSystemCB(systems) {
            $("#systemsCB").html('');
            for (var x = 0; x < systems.length; x++) {
                $('#systemsCB').append('<input name="sysCB" id=' + "'" + systems[x].id + "'" +
                    'type="checkbox" checked /> <span class="square c-' + systems[x].syscolor.substring(1).toLowerCase() +
                    '"></span>&nbsp;&nbsp;' + systems[x].sysname + '</input>&nbsp;&nbsp;');
            }

            $('#systemsCB').click(function () {
                var selectedsystems = [];
                $('#systemsCB input:checked').each(function () {
                    selectedsystems.push($(this).attr('id'));
                });
                // switch yearly
                // TODO: click on the yearly switch
                // $("#loadingGIF").show();
                // TODO: update maps for system. 
                updateMaps();


                destroyTables();

                if (boundaries.features.length > 0) {
                    updateBoundaries();
                }
                // hide rest from map, 
                // $('#investments > tbody > tr').each(function () {
                //     var cls = $(this).attr('class');
                //     var classWhitelist = ['blank'];
                //     if (jQuery.inArray(cls, classWhitelist) == -1) { // it is not in whitelist
                //         if (jQuery.inArray(cls, selectedsystems) == -1) { // this class is not in whilte list
                //             // hide it.
                //             $(this).hide();
                //         } else {
                //             // show it.
                //             $(this).show();
                //         }
                //     }
                // });
                // hide rest from map, 
                // $('#income > tbody > tr').each(function () {
                //     var cls = $(this).attr('class');
                //     var classWhitelist = ['blank'];
                //     if (jQuery.inArray(cls, classWhitelist) == -1) { // it is not in whitelist
                //         if (jQuery.inArray(cls, selectedsystems) == -1) { // this class is not in whilte list
                //             // hide it.
                //             $(this).hide();
                //         } else {
                //             // show it.
                //             $(this).show();
                //         }
                //     }
                // });
                // hide rest from map, 
                $('#npv > tbody > tr').each(function () {
                    var cls = $(this).attr('class');
                    var classWhitelist = ['blank'];
                    if (jQuery.inArray(cls, classWhitelist) == -1) { // it is not in whitelist
                        if (jQuery.inArray(cls, selectedsystems) == -1) { // this class is not in whilte list
                            // hide it.
                            $(this).hide();
                        } else {
                            // show it.
                            $(this).show();
                        }
                    }
                });
                // hide rest from map, 
                // $('#maintainence > tbody > tr').each(function () {
                //     var cls = $(this).attr('class');
                //     var classWhitelist = ['blank'];
                //     if (jQuery.inArray(cls, classWhitelist) == -1) { // it is not in whitelist
                //         if (jQuery.inArray(cls, selectedsystems) == -1) { // this class is not in whilte list
                //             // hide it.
                //             $(this).hide();
                //         } else {
                //             // show it.
                //             $(this).show();
                //         }
                //     }
                // });
                initializeTables();
                // hide
            });
        }
        initpercentSliders();
        generateInitTables();
        populateTableDataInit();
        // computeDCFNPV();
        function showallTables() {
            $('#npv > tbody > tr').each(function () {
                $(this).show();
            });

        }
      
        function initializeTables() {
            var tableGenerator = function (domid) {
                var groupColumn = 5;
                var t = $('#' + domid).DataTable({
                    "columnDefs": [{
                        "visible": false,
                        "targets": groupColumn
                    }],
                    searching: false,
                    fixedHeader: {
                        header: false,
                        footer: true
                    },
                    "order": [
                        [groupColumn, 'asc']
                    ],
                    "drawCallback": function (settings) {
                        var api = this.api();
                        var rows = api.rows({
                            page: 'current'
                        }).nodes();
                        var last = null;

                        api.column(groupColumn, {
                            page: 'current'
                        }).data().each(function (group, i) {
                            if (last !== group) {
                                $(rows).eq(i).before(
                                    '<tr class="group"><td colspan="5">' + group +
                                    '</td></tr>'
                                );

                                last = group;
                            }
                        });
                    }
                });
                return t;
            }

            npv_table = tableGenerator('npv');
        }

        function destroyTables() {
            if ($.fn.DataTable.isDataTable('#npv')) {
                npv_table.destroy();
            }
        }
    </script>
</body>

</html>