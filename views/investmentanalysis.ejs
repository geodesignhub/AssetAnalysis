<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Investment Analysis</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="Description" lang="en" content="Geodesignhub Investment Analysis">
    <meta name="author" content="Geodesignhub">
    <meta name="robots" content="index, follow">
    <!-- icons -->
    <link rel="shortcut icon" href="/assets/loaders/favicon.ico">
    <!-- Bootstrap Core CSS file -->
    <link rel="stylesheet" href="assets/css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="assets/css/flatty.css" />
    <link rel="stylesheet" type="text/css" href="assets/css/leaflet.css" />
    <link rel="stylesheet" type="text/css" href="assets/css/jquery.dataTables.min.css" />
    <link rel="stylesheet" type="text/css" href="assets/css/dataTables.bootstrap4.min.css" />
    <link rel="stylesheet" href="assets/css/styles.css">    
    <link rel="stylesheet" type="text/css" href="assets/css/d3.parcoords.css" />
    <link href='https://fonts.googleapis.com/css?family=EB+Garamond' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Playfair+Display' rel='stylesheet' type='text/css'>
    <!-- Conditional comment containing JS files for IE6 - 8 -->
    <!--[if lt IE 9]>
            <script src="assets/js/html5.js"></script>
            <script src="assets/js/respond.min.js"></script>
        <![endif]-->
</head>

<body>
    <!-- Navigation -->
    <nav class="navbar navbar-fixed-top navbar-inverse" role="navigation">
        <div class="container-fluid">
            <!-- Brand and toggle get grouped for better mobile display -->
            <div class="navbar-header">
                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand" href="#">Investment Analysis</a>
            </div>
            <!-- /.navbar-header -->
            <!-- /.navbar-collapse -->
        </div>
        <!-- /.container-fluid -->
    </nav>
    <!-- /.navbar -->
    <!-- Page Content -->
    <div class="container-fluid">
        <!-- /.row -->
        <br>
        <!-- Heading Row -->
        <div class="row">
            <div class="col-md-12">

                <p class="description">This plugin shows how investments will flow through your study area over time. Once you have set the asset details per asset, you can then do very interesting analysis of the interventions both financial and temporal as detailed below. This plugin analyzes the location of the diagram over the boundary uploaded into Geodesignhub. </p><br><br>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <span id="loadingGIF"><img src="/assets/loaders/loading.gif">&nbsp;<span id="procstatus">Processing</span>...</span>
               
            </div>
        </div>
        
        <div class="row">
            <div class="col-md-12">
                <h3>Systems</h3>
                <div id="systemsCBCont" style="display:none">
                    <div id="systemsCB"></div>
                    <br>

                </div>
            </div>
        </div>
        <br>
        <!-- /.col-md-4 -->
        <div class="row">
            <div class="col-md-12">
                <h3>Diagrams and Asset Details</h3>
                <br>
                <table id="npv" class="hor-minimalist-b">
                    <thead>
                        <!-- <tr class='blank'>&nbsp;&nbsp;</tr> -->
                    </thead>
                    <tbody>
                        <!-- <tr class='blank'>&nbsp;&nbsp;</tr> -->
                    </tbody>
                    <tfoot>
                        <!-- <tr class='blank'>&nbsp;&nbsp;</tr> -->
                    </tfoot>
                </table>

            </div>
        </div>
        <br><br>
        <hr>
        
        <div class="row">
            <div class="col-md-12">
                <h3>Summary <small>Total population, visitors and services required</small></h3>
                <br>
                <p class="lead" id="contribution_summary"></p>       
               
                <div class="col-md-4">                                
                    
                    <p class="lead" id="">Total Residents: <span id="total_population"></span></p>
                    <p class="lead" id="">Total Visitors: <span id="total_visitors"></span></p>
                    <p class="lead" id="">Total Direct Employment: <span id="total_direct_employment"></span></p>
                    <p class="lead" id="">Total Indirect Employment: <span id="total_indirect_employment"></span></p>
                    <br>                    
                </div>
                <div class="col-md-8">                    
                    <div>
                        <p class="lead" id="">Annual Electricity Demand: <span id="total_electricity_demand"></span></p>        
                        <p class="lead" id="">Annual Water demand: <span id="total_water_demand"></span></p>
                        <p class="lead" id="">Annual Sewage: <span id="total_sewage_demand"></span></p>
                        <p class="lead" id="">Total Fire Personnel: <span id="total_fire_personnel"></span></p>
                        <p class="lead" id="">Additional Police Personnel: <span id="total_police_personnel"></span></p>
                        <p class="lead" id="">Total Hospital Beds: <span id="total_hosptial_beds"></span></p>
                        <p class="lead" id="">Annual Sewage: <span id="total_sewage"></span></p>
                        <br>                    
                        
                    </div>
                </div>                
            </div>
        </div>
        
        <br><br>
        <hr>
        
        <div class="row">
            <br>
            <div class="col-md-6">
                <div class="boundariesCont">
                    <h3>Boundaries Map</h3>
                    <small>The design is shown at 30% transperency to highlight the boundary overlaps, click on a boundary show financial analysis</small><br><br>
                    <div id="boundaryMap" class="map"></div>
                    <br>
                    <div class="pull-right">Low Captial Investment <span class="color_box color-1">&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;&nbsp;<span class="color_box color-2">&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;&nbsp;<span class="color_box color-3">&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;&nbsp;<span class="color_box color-4">&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;&nbsp;<span class="color_box color-5">&nbsp;&nbsp;&nbsp;&nbsp;</span>High Captial Investment
                    </div>
                </div>
            </div>
            <div class="col-md-6">
             <div class="boundariesCont">
                    <h3>Boundaries and Financials</h3>
                    <br>
                    <div height="200">
                    <canvas id="boundary_investment_chart"></canvas>
                </div>
                <div height="200">
                <canvas id="boundary_opex_chart"></canvas>
                </div>
                <div height="200">
                    <canvas id="boundary_income_chart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <br><br>
        <div class="row">
            <div class="col-md-12">
                <h3>Population and Jobs</h3>
                <small>Population housed and employment generated per boundary.</small><br>
                <br>
                <div id="paracoords_primary" class="parcoords"></div>
                <div id="parcoords_primary_grid" class="paracoords_grid"></div>
            </div>
        </div>
        <br><br>
        <div class="row">
            <div class="col-md-12">
                <h3>Services</h3>
                <small>Yearly, additional services requried per boundary, see reference  </small><br>
                <br>
                <div id="paracoords_secondary" class="parcoords"></div>
                <div id="parcoords_secondary_grid" class="paracoords_grid"></div>
            </div>
        </div>
        <br><br>
        <hr>
       
        <!-- Footer -->
        <footer>
            <div class="row">
                <div class="col-md-12">
                    <p>&copy; 2019 Geodesignhub, see the <a href="https://geodesignhub.github.io/AssetAnalysis/">Github
                            repository</a> for more information.</p>
                </div>
            </div>
        </footer>
        <div id="drawing"></div>
    </div>
    <!-- /.container-fluid -->
    <!-- JQuery scripts -->
    <script type="text/javascript" src="assets/js/jquery.min.js"></script>
    <script type="text/javascript" src="assets/js/humane.min.js"></script>


    <script type="text/javascript" src="assets/js/chartjs.min.js"></script>
    <!-- Bootstrap Core scripts -->
    <script type="text/javascript" src="assets/js/ion.rangeSlider.min.js"></script>
    <script type="text/javascript" src="assets/js/bootstrap.min.js"></script>
    <script type="text/javascript" src="assets/js/bootstrap-editable.min.js"></script>
    <script type="text/javascript" src="assets/js/jquery.dataTables.min.js"></script>
    <!-- <script type="text/javascript" src="assets/js/colors.js"></script> -->
    <script type="text/javascript" src="assets/js/leaflet.js"></script>
    <script type="text/javascript" src="assets/js/choropleth.js"></script>
    <script type="text/javascript" src="assets/js/moment.min.js"></script>
    <script type="text/javascript" src="assets/js/svg.min.js"></script>
    <script type="text/javascript" src="assets/js/d3.min.js"></script>
    <script type="text/javascript" src="assets/js/d3.parcoords.js"></script>
    <script type="text/javascript" src="assets/js/divgrid.js"></script>

    <script type="text/javascript">
        var incomeGrid;
        var standardizationVar;
        var boundaryStdVar;
        var maintainenceGrid;
        var investmentGrid;
        var boundaryGeomDetails;
        var boundaryValueDetails;
        var npv_table;
        var boundaries_investment_tables;

        var numYears = 30; // number of colums; 


        // $("#loadingGIF").hide();
        var opGJ = {
            "type": "FeatureCollection",
            "features": []
        };
        var systems = <%- systems %>;
        var design = <%- design %>;
        var systemdetail = <%- systemdetail %>;
        var apitoken = "<%= apitoken  %>"; //var test is now assigned to getTest which will only work on browsers
        var projectid = "<%= projectid %>";
        var projectdetails = <%- projectdetails %>;
        var syndiagrams = <%- syndiagrams %>;
        
        var bounds = <%- bounds %>;
        var boundaries = <%- boundaries %>;
        var saved_diagram_details = <%- saved_diagram_details %>;
        var sequence = <%- sequence %>;
        var investmentdata;

        if (boundaries.features.length > 0) {
            $(".boundariesCont").show();
        }
        var startyear = moment(projectdetails['startdate']).year();


        function abbrNum(number, decPlaces) {
            if (number < 1000) {
                number = Math.round(number);
            } else {
                decPlaces = Math.pow(10, decPlaces);
                var abbrev = ["k", "m", "b", "t"];
                for (var i = abbrev.length - 1; i >= 0; i--) {
                    var size = Math.pow(10, (i + 1) * 3);
                    if (size <= number) {
                        number = Math.round(number * decPlaces / size) / decPlaces;
                        if ((number == 1000) && (i < abbrev.length - 1)) {
                            number = 1;
                            i++;

                        }
                        number += abbrev[i];
                        break;
                    }
                }
            }
            return number;
        }

        function initpercentSliders() {
            $("#wacc-slider").ionRangeSlider({
                min: 0,
                max: 20,
                from: 1,
                step: 0.5,
                postfix: "%",
                grid: true,
                prettify_enabled: true
            });

        }

        function generateInitTables() {
            destroyTables();
            var allDiagrams = syndiagrams.diagrams;           

            var sys = systems;
            var syslen = sys.length;
            for (var x = 0; x < syslen; x++) {
                sys[x]['diagrams'] = [];                
                // sysDiags.push({cursys.name:{"id":cursys.id, "color":cursys.syscolor, "diagrams":[]}});
            }
            var diagGJ = {};
            for (var g = 0; g < allDiagrams.length; g++) {
                var curDiag = allDiagrams[g];
                diagGJ[parseInt(curDiag)] = {
                    "type": "FeatureCollection",
                    "features": []
                };
            }

            for (var j = 0; j < design.features.length; j++) {
                var curFeat = design.features[j];
                var curFeatProp = curFeat.properties;
                var diagID = curFeatProp.diagramid;
                diagGJ[parseInt(diagID)].features.push(curFeat);
            }

            for (var dID in diagGJ) {
                var diagFeats = diagGJ[dID];
                var ran = false;
                for (var y1 = 0; y1 < diagFeats.features.length; y1++) {
                    if (ran == false) {
                        var diagSysName = diagFeats.features[y1].properties.sysname;
                        // var tmpDiagFeat = {};
                        for (var x1 = 0; x1 < syslen; x1++) {
                            var cursys = sys[x1];
                            if (cursys.sysname == diagSysName) {
                                // tmpDiagFeat[dID]  = diagFeats;
                                sys[x1]['diagrams'].push(diagFeats);
                                break;
                            }
                            ran = true;
                        }
                        break;
                    }
                }
            }

            $("#npv").find("tbody>tr:gt(0)").remove();
            $("#npv").find("thead>tr:gt(0)").remove();

            var headcounter = 0;
            var footercounter = 0;
            for (var h = 0; h < syslen; h++) {
                var cursys = sys[h];
                if (cursys.diagrams.length > 0) {
                    
                    var yrCounter = 0
                    if (headcounter === 0) { // header row
                        var npvHTML =
                            "<tr><th class='header initCol'>Diagram</th><th>Image</th><th>Asset Class</th><th>Population</th><th class='fundingheader'>Funding</th><th class='aaheader'>Analysis</th><th class='systemheader'>System</th>";

                        npvHTML += "</tr>";

                        $('#npv  > thead').append(npvHTML);
                        headcounter += 1;
                    } // header is added. 

                    // add system row 
                    var diaglen = cursys.diagrams.length;
                    
                    for (var p = 0; p < diaglen; p++) {
                        var curdiag = cursys.diagrams[p];
                        if (curdiag.features.length > 0) {
                            var curdiagprops = curdiag.features[0].properties;
                            var curdiagid = curdiag.features[0].properties.diagramid;                                                            
                            var projectorpolicy = curdiag.features[0].properties.areatype;
                            var diagrowHTMLnpv = "<tr class=" + "'" + cursys.id + "'" + "><td class='initCol'>" +
                                curdiagprops.description + "<br>(" + projectorpolicy + ")</td>" +"<td class=" +
                                "'assetimage assetimage-" + curdiagid + "'" + "></td>"+ "<td class=" +
                                "'assetdetails-" + curdiagid + "'" + "></td>"  + "<td class=" +
                                "'population-" + curdiagid + "'" + "></td>" + "<td class=" + "funding-" +
                                curdiagid + "'" +
                                ">" + curdiagprops.fundingtype + "</td>" + "<td class=" +
                                "'aa-" + curdiagid + "'" + "></td>" + "<td class=" + "system-" +
                                curdiagid + "'" +
                                ">" + cursys.sysname + "<sup class=" + "'yeild-" + cursys.id + "'" + "></sup></td>";
                            yrCounter = 0;
                            diagrowHTMLnpv += "</tr>";
                            $('#npv > tbody').append(diagrowHTMLnpv);
                        }
                    }
                }
            }
            systems = sys;
        }

        function updateWorkerStatus(data) {
            $("#procstatus").html(" " + data + "% complete");
        }

        
        function populateTableDataInit() {
            destroyTables();
            var areaWorker = new Worker('/assets/workers/computeAreas.js');
            areaWorker.onerror = function (e) {
                console.log('Error: Line ' + e.lineno + ' in ' + e.filename + ': ' + e.message);
                $("#loadingGIF").hide();
                humane.log("There was a error in processing, please try again.. ", {
                    addnCls: 'humane-flatty-log'
                });

            };
            areaWorker.postMessage({
                'systemdetails': JSON.stringify(systemdetail),
                'systems': JSON.stringify(systems),                
                'sequence': JSON.stringify(sequence),
                'startyear': JSON.stringify(startyear),
                'bounds': bounds['bounds'],
                'years': numYears,
                'saved_diagram_details': JSON.stringify(saved_diagram_details)
            });
            areaWorker.addEventListener('message', function (e) {
                if (e.data.mode === 'status') {
                    updateWorkerStatus(e.data.percentcomplete);
                } else {

                    standardizationVar = parseInt(e.data.maxYearlyCost);
                    // grid = JSON.parse(e.data.grid);
                    // sysGrids = JSON.parse(e.data.sysGrids);

                    // var gridsize = e.data.gridsize;
                    // var gridsize = parseFloat(gridsize * gridsize * 100).toFixed(2);
                    // $("#gridsizecont").html("Note: Grid cell size is " + gridsize + " hectares.");
                    // diagGrids = JSON.parse(e.data.diagGrids);

                    investmentdata = JSON.parse(e.data.output);

                    showallTables();
                    populateIncomeInvestment(investmentdata);
                    // computeDCFNPV(investmentdata);
                    generateSystemCB(systemdetail);

                    $("#loadingGIF").hide();
                    $('#systemsCBCont').show();
                    if (boundaries.features.length > 0) {
                        updateBoundaries();
                    }
                    initializeTables();
                }
            }, false);

        }

        function updateBoundaries() {
            var selectedsystems = [];
            $('#systemsCB input:checked').each(function () {
                selectedsystems.push($(this).attr('id'));
            });
            $("#loadingGIF").show();
            $("#procstatus").html("Processing..");

            var boundaryWorker = new Worker('/assets/workers/computeBoundaryValue.js');
            boundaryWorker.onerror = function (e) {
                console.log('Error: Line ' + e.lineno + ' in ' + e.filename + ': ' + e.message);
                $("#loadingGIF").hide();
                humane.log("There was a error in boundary computation, please try again.. ", {
                    addnCls: 'humane-flatty-log'
                });

            };
            // console.log(selectedsystems);
            boundaryWorker.postMessage({
                'design': JSON.stringify(design),
                'investmentdata': JSON.stringify(investmentdata),
                'selectedsystems': JSON.stringify(selectedsystems),
                'boundaries': JSON.stringify(boundaries),
                'systemdetails': JSON.stringify(systemdetail),
                'number_of_years': numYears,
                'saved_diagram_details': JSON.stringify(saved_diagram_details),
                'start_year': startyear
            });
            boundaryWorker.addEventListener('message', function (e) {
                if (e.data.mode === 'status') {
                    updateWorkerStatus(e.data.percentcomplete);
                } else {
                    
                    renderBoundaryInvestmentMap(JSON.parse(e.data.newboundaries), parseInt(e.data.stdVar));
                    // renderBoundaryInvestmentChart(JSON.parse(e.data.boundaryValue));
                    boundaryStdVar = parseInt(e.data.stdVar);
                    // boundaryGeomDetails = JSON.parse(e.data.newboundaries);
                    boundaryValueDetails = JSON.parse(e.data.boundaryValue); 
                    
                    generate_paracoords_primary_chart(boundaryValueDetails);
                    generate_paracoords_secondary_chart(boundaryValueDetails);
                    aggregate_boundary_services_populations(boundaryValueDetails)
                    $("#loadingGIF").hide();
                }
            }, false);

        }

        function highlightFeature(e) {
            var layer = e.target;

            layer.setStyle({
                weight: 5,
                color: '#fff',
                dashArray: '',
                fillOpacity: 0.7
            });

            if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
                layer.bringToFront();
            }

            info.update(layer.feature.properties);
            // console.log(layer.feature.properties)
        }

        function resetHighlight(e) {
            boundaryChoropleth.resetStyle(e.target);
        }

        function onEachFeature(feature, layer) {
            layer.on({
                mouseover: highlightFeature,
                mouseout: resetHighlight,
                click: zoomToFeature
            });
        }

        function zoomToFeature(e) {           
            renderBoundaryInvestmentChart(boundaryValueDetails, e.target.feature.properties.id);
            boundarymap.fitBounds(e.target.getBounds());
        }

        function onEachFeature(feature, layer) {
            layer.on({
                mouseover: highlightFeature,
                mouseout: resetHighlight,
                click: zoomToFeature
            });
        }

        function renderBoundaryInvestmentMap(newboundaries, stdVar) {
            boundaryLayer.clearLayers();

            boundaryChoropleth = L.choropleth(newboundaries, {
                valueProperty: function (feature) {
                    var m = feature.properties.totalInvestment;
                    // m = (m / stdVar) * 100;
                    return m;
                },
                scale: ['#f2f0f7', '#cbc9e2', '#9e9ac8', '#756bb1', '#54278f'], //purples
                steps: 5,
                mode: 'q',
                style: {
                    color: '#fff',
                    weight: 2,
                    fillOpacity: 0.8
                },
                onEachFeature: onEachFeature
            }).addTo(boundaryLayer);

            boundarymap.fitBounds(boundaryLayer.getBounds());
        }
        function number_format(number, decimals, dec_point, thousands_sep) {
            // *     example: number_format(1234.56, 2, ',', ' ');
            // *     return: '1 234,56'
                number = (number + '').replace(',', '').replace(' ', '');
                var n = !isFinite(+number) ? 0 : +number,
                        prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
                        sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,
                        dec = (typeof dec_point === 'undefined') ? '.' : dec_point,
                        s = '',
                        toFixedFix = function (n, prec) {
                            var k = Math.pow(10, prec);
                            return '' + Math.round(n * k) / k;
                        };
                // Fix for IE parseFloat(0.55).toFixed(0) = 0;
                s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');
                if (s[0].length > 3) {
                    s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
                }
                if ((s[1] || '').length < prec) {
                    s[1] = s[1] || '';
                    s[1] += new Array(prec - s[1].length + 1).join('0');
                }
                return s.join(dec);
            }

        function renderBoundaryInvestmentChart(boundarydata, boundary_of_interest) {
            
            var bdata = [];
            for (var k in boundarydata) {
                var v = boundarydata[k];
                if (boundary_of_interest ==k) {
                bdata.push(v);
                }
            }
            // var bdata = bdata.sort(function (a, b) {
            //     return parseFloat(a.totalInvestment) - parseFloat(b.totalInvestment);
            // });
            
            var b_investment_dataset = [];
            var b_income_dataset = [];
            var b_maintainence_dataset = [];

            var labels = [];
            for (var g1 = 0; g1 < numYears; g1++) {
                var cYear = (startyear + g1);
                labels.push(cYear);
            }
            // console.log(bdata)

            for (var x = 0; x < bdata.length; x++) {
                var curBoundaryValue = bdata[x];
             
                var cur_b_investment = {};
                var cur_b_income = {};
                var cur_b_maintainence = {};
                cur_b_investment['label'] = curBoundaryValue.bname + ' Capex';
                cur_b_maintainence['label'] = curBoundaryValue.bname + ' Opex';
                cur_b_income['label'] = curBoundaryValue.bname + ' Income';
                
                cur_b_investment['data'] = [];
                cur_b_income['data'] =[];
                cur_b_maintainence['data'] =[];
                for (var g1 = 0; g1 < numYears; g1++) {
                    var cYear = (startyear + g1);
                    cur_b_investment['data'].push(parseInt(curBoundaryValue['investment'][cYear]));                    
                    cur_b_income['data'].push(parseInt(curBoundaryValue['income'][cYear]));
                    cur_b_maintainence['data'].push(parseInt(curBoundaryValue['maintainence'][cYear]));

                }

                b_investment_dataset.push(cur_b_investment);
                b_income_dataset.push(cur_b_income);
                b_maintainence_dataset.push(cur_b_maintainence);
            }

            // console.log(b_income_dataset, b_investment_dataset, cur_b_maintainence);

            var options = { 
                maintainAspectRatio: false,
                title: {
                    display: false,                   
                },
                tooltips: {
                    mode: 'index',
                    intersect: false,
                },
                hover: {
                    mode: 'nearest',
                    intersect: true
                },
                scales: {
                    xAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Year'
                        }
                    }],
                    yAxes: [{
                        display: true, 
                        ticks: {
                beginAtZero:true,
                callback: function(value, index, values) {
                        if (value > 100000)
                            return 'EUR ' +value / 1e6 + 'M';
                        else {
                            return 'EUR ' + value;
                        }
                    }
            },
            tooltips: {
                    callbacks: {
                        label: function(tooltipItem, chart){
                            var datasetLabel = chart.datasets[tooltipItem.datasetIndex].label || '';
                            return datasetLabel + ': EUR ' + number_format(tooltipItem.yLabel, 2);
                        }
                    }
                },
            
            }]
                }
            }

            var investment_ctx = $("#boundary_investment_chart");
            Chart.defaults.global.defaultFontFamily = "'Playfair Display', Consolas, monaco, monospace";
            var myLineChart = new Chart(investment_ctx, {
                type: 'line',
                data: {
                    'labels': labels,
                    'datasets': b_investment_dataset
                },
                options: options
            });
            
            
            var maintainence_ctx = $("#boundary_opex_chart");
            Chart.defaults.global.defaultFontFamily = "'Playfair Display', Consolas, monaco, monospace";
            var myLineChart = new Chart(maintainence_ctx, {
                type: 'line',
                data: {
                    'labels': labels,
                    'datasets': b_maintainence_dataset
                },
                options: options
            });
            var income_ctx = $("#boundary_income_chart");
            Chart.defaults.global.defaultFontFamily = "'Playfair Display', Consolas, monaco, monospace";
            var myLineChart = new Chart(income_ctx, {
                type: 'line',
                data: {
                    'labels': labels,
                    'datasets': b_income_dataset
                },
                options: options
            });
            
        }

        var boundarymap = L.map('boundaryMap', {
            'zoomControl': true,
            'dragging': false,
            'touchZoom': false,
            'scrollWheelZoom': false,
            'doubleClickZoom': false,
            'attributionControl': false
        });
        L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, &copy; <a href="https://cartodb.com/attributions">CartoDB</a>',
            maxZoom: 18,
        }).addTo(boundarymap);
        var boundaryLayer = L.featureGroup().addTo(boundarymap);
        var info = L.control();

        info.onAdd = function (map) {
            this._div = L.DomUtil.create('div', 'info'); // create a div with a class "info"
            this.update();
            return this._div;
        };

        // method that we will use to update the control based on feature properties passed
        info.update = function (props) {
            
            this._div.innerHTML = '<h4>Total Investment</h4>' + (props ?
                '<b>' + props.bname + '</b><br />' + abbrNum(props.totalInvestment, 2) + ' EUR' :
                'Hover over a boundary');
        };

        info.addTo(boundarymap);

        var bnds = bounds['bounds'];
        var latLngs = bnds.split(',');
        var southWest = L.latLng(latLngs[1], latLngs[0]);
        var northEast = L.latLng(latLngs[3], latLngs[2]);
        var mB = new L.latLngBounds(southWest, northEast);

        boundarymap.fitBounds(mB);

        var design_layer = L.featureGroup().addTo(boundarymap);
        var svgDrawing = SVG('drawing').size(10, 10);

        function miniMapstyleComp(feature) {
            // console.log(feature.properties)
            var curFeature = feature.geometry.type;
            if (curFeature === 'LineString') {
                // console.log(feature)
                return {
                    weight: 2,
                    opacity: .3,
                    color: feature.properties.color,
                    dashArray: '',

                };
            } else {
                // var fillColor = getColor(feature.properties.areatype);

                if (feature.properties.areatype == 'project') {
                    var fillColor = feature.properties.color;
                } else { // it is policy
                    var fillPattern = setSVGStyle(feature.properties.color);
                    var fillColor = fillPattern;
                }

                return {
                    // fillColor: feature.properties.color,
                    // fillColor:'#333333',
                    weight: 1,
                    stroke: true,
                    opacity: 0.5,
                    fillColor: fillColor,
                    color: feature.properties.color,
                    dashArray: '',
                    // opacity: 0.2,
                    fillOpacity: 0.3,
                };
            }

        }

        function setSVGStyle(reqColor) {
            var pattern = svgDrawing.pattern(6, 6, function(add) {
                // add.rect(5, 5).fill(reqColor)
                add.line(0, 0, 6, 6).stroke({
                    width: 1,
                    color: reqColor
                })
                add.line(6, 0, 0, 6).stroke({
                    width: 1,
                    color: reqColor
                })
            });
            return pattern.fill();
        }

        function getColor(type) {

            return type === 'policy' ? '#707070 ' :
                type === 'project' ? '#a69695 ' :
                type === 'red2' ? '#bd0026' :
                type === 'red' ? '#f03b20' :
                type === 'yellow' ? '#FFFF00' :
                type === 'green' ? '#74c476' :
                type === 'green2' ? '#31a354' :
                type === 'green3' ? '#006d2c' :
                type === 'purple' ? '#CFACF7' :
                type === 'purple2' ? '#8D6CBF' :
                type === 'purple3' ? '#601286' :
                type === 'orange' ? '#FFA927' :
                type === 'orange2' ? '#F8872E' :
                type === 'orange3' ? '#FC6B0A' :
                type === 'constraints' ? '#343434' :
                type === 'boundaries' ? '#a6cee3' :
                type === 'boundaries2' ? '#b2df8a' :
                '#808080';
        }

        
    var design_gj = L.geoJSON(design, {
        style: miniMapstyleComp,
        }).addTo(design_layer);



        function getDiagramSystemTitle(diagramid) {
            const ad = systems;
            var sysName = 'NA';
            var diagName = 'NA';
            var syslen = ad.length;
            loop1:
                for (var x = 0; x < syslen; x++) {
                    var cSys = ad[x];

                    var all_current_Diagrams = cSys.diagrams;

                    var allDiaglen = all_current_Diagrams.length;

                    if (allDiaglen > 0) {
                        loop2: for (var y = 0; y < allDiaglen; y++) {
                            var cDiag = all_current_Diagrams[y];
                            var diagram_ID = cDiag.features[0].properties.diagramid;
                            if (diagramid == diagram_ID) {
                                sysName = cDiag.features[0].properties.sysname;
                                diagName = cDiag.features[0].properties.description;
                                break loop1;
                            }
                        }
                    }
                }
            const sys_title = ' | ' + sysName + ' ' + diagName;
            return sys_title
        }

        function populateIncomeInvestment(investmentdata) {
            var yeildDict = {};
            const ssd = saved_diagram_details;
            for (var g = 0; g < investmentdata.length; g++) {
                var curInvestmentdata = investmentdata[g];
                var diagID = curInvestmentdata['id'];
                var totalInvestment = curInvestmentdata['totalInvestment'];

                const url = '<a href="https://assetanalysis.herokuapp.com/?apitoken=' + apitoken + '&projectid=' +
                    projectid + '&diagramid=' + diagID +
                    '" target="_blank">Details <i class="glyphicon glyphicon-share"></i></a>';

                $(".aa-" + diagID).html(url);

                for (let p1 = 0; p1 < ssd.length; p1++) {
                    const cur_ele = ssd[p1];
                    const diag_id = parseInt(cur_ele['key'].split('-')[1]);
                    if (diag_id == diagID) {
                        const asset_details = cur_ele['asset_details'];
                        // console.log(asset_details)
                        if (Object.keys(asset_details).length === 0 && asset_details.constructor === Object) {
                            $(".assetdetails-" + diagID).html('Not set');
                            $(".assetimage-" + diagID).html('Not set');
                            $('.population-' + diagID).html('-');
                        } else {
                            const ad = asset_details['class'];
                            $(".assetdetails-" + diagID).html(ad);
                            
                            if(asset_details['metadata']['representative_image'].length > 0){
                                $(".assetimage-" + diagID).html("<img src='assets/img/asset-images/"+asset_details['metadata']['representative_image']+"'/>");
                            }
                            if (ad === 'hospitality') {
                                $('.population-' + diagID).html(abbrNum(asset_details['metadata']['total_yearly_visitors'], 2));
                            } else if (ad == 'residential') {
                                $('.population-' + diagID).html(abbrNum(asset_details['metadata']['number_of_people_residential'], 2));
                                $(".assetimage-"+diagID).append("<br><small>Density: "+asset_details['metadata']['current_pop_density']+" people / km<sup>2</sup></small>")
                            } else if (ad == 'retail') {
                                $('.population-' + diagID).html(abbrNum(asset_details['metadata']['total_daily_visitors_retail'], 2));
                            } else if (ad == 'office') {
                                $('.population-' + diagID).html(abbrNum(asset_details['metadata']['total_daily_visitors_office'], 2));
                            }
                            else if (ad == 'mixuse') {
                                $('.population-' + diagID).html(abbrNum(asset_details['metadata']['number_of_people_residential_mixuse'], 2));
                                $(".assetimage-"+diagID).append("<br><small>Density: "+asset_details['metadata']['current_pop_density_mixuse']+" people / km<sup>2</sup></small>")
                            }

                        }
                    }
                }
            }
        }

        function generateSystemCB(systems) {
            $("#systemsCB").html('');
            for (var x = 0; x < systems.length; x++) {
                $('#systemsCB').append('<input name="sysCB" id=' + "'" + systems[x].id + "'" +
                    'type="checkbox" checked /> <span class="square c-' + systems[x].syscolor.substring(1).toLowerCase() +
                    '"></span>&nbsp;&nbsp;' + systems[x].sysname + '</input>&nbsp;&nbsp;');
            }

            $('#systemsCB').click(function () {
                var selectedsystems = [];
                $('#systemsCB input:checked').each(function () {
                    selectedsystems.push($(this).attr('id'));
                });

                destroyTables();

                if (boundaries.features.length > 0) {
                    updateBoundaries();
                }

                $('#npv > tbody > tr').each(function () {
                    var cls = $(this).attr('class');
                    var classWhitelist = ['blank'];
                    if (jQuery.inArray(cls, classWhitelist) == -1) { // it is not in whitelist
                        if (jQuery.inArray(cls, selectedsystems) == -1) { // this class is not in whilte list
                            // hide it.
                            $(this).hide();
                        } else {
                            // show it.
                            $(this).show();
                        }
                    }
                });

                initializeTables();
                // hide
            });
        }
        initpercentSliders();
        generateInitTables();
        populateTableDataInit();
        // computeDCFNPV();
        function showallTables() {
            $('#npv > tbody > tr').each(function () {
                $(this).show();
            });

        }

        function initializeTables() {
            var tableGenerator = function (domid) {
                var groupColumn = 6;
                var t = $('#' + domid).DataTable({
                    "columnDefs": [{
                        "visible": false,
                        "targets": groupColumn
                    }],
                    searching: false,
                    fixedHeader: {
                        header: false,
                        footer: true
                    },
                    "order": [
                        [groupColumn, 'asc']
                    ],
                    "drawCallback": function (settings) {
                        var api = this.api();
                        var rows = api.rows({
                            page: 'current'
                        }).nodes();
                        var last = null;

                        api.column(groupColumn, {
                            page: 'current'
                        }).data().each(function (group, i) {
                            if (last !== group) {
                                $(rows).eq(i).before(
                                    '<tr class="group"><td colspan="5">' + group +
                                    '</td></tr>'
                                );

                                last = group;
                            }
                        });
                    }
                });
                return t;
            }
            npv_table = tableGenerator('npv');
        }

        function destroyTables() {
            if ($.fn.DataTable.isDataTable('#npv')) {
                npv_table.destroy();
            }
        }

        function generate_paracoords_primary_chart(boundary_details) {
            // const boundary_details = boundaryValueDetails;
            var data = [];
            for (const bnd_id in boundary_details) {
                if (boundary_details.hasOwnProperty(bnd_id)) {
                    const cur_boundary = boundary_details[bnd_id];                   
                    var cur_bnd_data = {'Boundary name':cur_boundary.bname, 'Residents':cur_boundary.total_population, 'Visitors':cur_boundary.total_visitors, 'Direct Employment':cur_boundary.total_direct_employment, 'Indirect Employment':cur_boundary.total_indirect_employment};
                    data.push(cur_bnd_data);
                }
            }

            const data_len = Object.keys(data).length;
            console.log(data)
    
            const colrs =  [ "rgb(250, 250, 110)","rgb(197, 236, 113)","rgb(148, 220, 121)","rgb(105, 201, 129)","rgb(66, 181, 136)", "rgb(35, 159, 138)","rgb(19, 137, 134)","rgb(26, 115, 124)","rgb(37, 93, 108)","rgb(42, 72, 88)"];

            var green_to_blue = d3.scale.linear()
                .domain([1, Object.keys(boundary_details).length])
                .range(colrs)
                .interpolate(d3.interpolateHcl);

                var color = function(d) { return green_to_blue(d['Residents']); };

                var parcoords = d3.parcoords()("#paracoords_primary")
                .color(color)
                .alpha(0.4);

                // load csv file and create the chart
                
                parcoords
                    .data(data)
                    .render()
                    .brushMode("1D-axes");  // enable brushing

                // create data table, row hover highlighting
                var grid = d3.divgrid();
                d3.select("#parcoords_primary_grid")
                    .datum(data.slice(0,data_len))
                    .call(grid)
                    .selectAll(".divgrid_row")
                    .on({
                    "mouseover": function(d) { parcoords.highlight([d]) },
                    "mouseout": parcoords.unhighlight
                    });

                // update data table on brush event
                parcoords.on("brush", function(d) {
                    d3.select("#parcoords_primary_grid")
                    .datum(d.slice(0,data_len))
                    .call(grid)
                    .selectAll(".divgrid_row")
                    .on({
                        "mouseover": function(d) { parcoords.highlight([d]) },
                        "mouseout": parcoords.unhighlight
                    });
                });
          


        }

        function aggregate_boundary_services_populations(boundary_details) {
            var total_population = 0;
            var total_visitors = 0;
            var total_direct_employment =0;
            var total_indirect_employment = 0;

            var annual_electricity_demand = 0;
            var annual_water_demand = 0;
            var annual_sewage = 0;

            var total_fire_personnel =0;
            var total_police_personnel =0;
            for (const bnd_id in boundary_details) {
                if (boundary_details.hasOwnProperty(bnd_id)) {
                    const cur_boundary = boundary_details[bnd_id];                  
                    total_population +=cur_boundary.total_population;
                    total_visitors+=cur_boundary.total_visitors;
                    total_direct_employment+=cur_boundary.total_direct_employment;
                    total_indirect_employment+=cur_boundary.total_direct_employment;
                    
                    annual_electricity_demand += cur_boundary['services']['electricity_demand'];
                    annual_water_demand+=cur_boundary['services']['water_demand'];
                    annual_sewage+=cur_boundary['services']['sewage_demand'];

                    total_fire_personnel += cur_boundary['services']['fire_personnel'];
                    total_police_personnel +=cur_boundary['services']['police_stations'];
                }
            }


            $("#total_population").html(abbrNum(total_population) + ' ppl');
            $("#total_visitors").html(abbrNum(total_visitors) + ' ppl');
            $("#total_direct_employment").html(abbrNum(total_direct_employment) + '  ppl');
            $("#total_indirect_employment").html(abbrNum(total_indirect_employment) + ' ppl');


            $("#total_electricity_demand").html(abbrNum(annual_electricity_demand) + ' MW');
            $("#total_water_demand").html(abbrNum(annual_water_demand) + ' m3');
            $("#total_sewage_demand").html(abbrNum(annual_sewage) + ' m3');
            $("#total_fire_personnel").html(abbrNum(total_fire_personnel) + ' ppl');
            $("#total_police_personnel").html(abbrNum(total_police_personnel) + ' ppl');
            $("#total_hosptial_beds").html(abbrNum(annual_electricity_demand) + ' beds');
            
        }
        function generate_paracoords_secondary_chart(boundary_details) {
            // const boundary_details = boundaryValueDetails;

            var data = [];
            for (const bnd_id in boundary_details) {
                if (boundary_details.hasOwnProperty(bnd_id)) {
                    const cur_boundary = boundary_details[bnd_id];                   

                    var cur_bnd_data = {'Boundary name':cur_boundary.bname, 'Electricity Demand (MW)':cur_boundary['services']['electricity_demand'], 'Fire Personnel':cur_boundary['services']['fire_personnel'],  'Hospital Beds':cur_boundary['services']['hospital_beds'], 
                     'Sewage (m3)':cur_boundary['services']['sewage_demand'], 'Water (m3)':cur_boundary['services']['water_demand'],
                };
                    data.push(cur_bnd_data);
                }
            }

            const data_len = Object.keys(data).length;

    
            const colrs =  [ "rgb(250, 250, 110)","rgb(197, 236, 113)","rgb(148, 220, 121)","rgb(105, 201, 129)","rgb(66, 181, 136)", "rgb(35, 159, 138)","rgb(19, 137, 134)","rgb(26, 115, 124)","rgb(37, 93, 108)","rgb(42, 72, 88)"];

                var green_to_blue = d3.scale.linear()
                .domain([1, Object.keys(boundary_details).length])
                .range(colrs)
                .interpolate(d3.interpolateHcl);

                var color = function(d) { return green_to_blue(d['Electricity Demand (MW)']); };

                var parcoords = d3.parcoords()("#paracoords_secondary")
                .color(color)
                .alpha(0.4);

                // load csv file and create the chart
                
                parcoords
                    .data(data)
                    .render()
                    .brushMode("1D-axes");  // enable brushing

                // create data table, row hover highlighting
                var grid = d3.divgrid();
                d3.select("#parcoords_secondary_grid")
                    .datum(data.slice(0,data_len))
                    .call(grid)
                    .selectAll(".divgrid_row")
                    .on({
                    "mouseover": function(d) { parcoords.highlight([d]) },
                    "mouseout": parcoords.unhighlight
                    });

                // update data table on brush event
                parcoords.on("brush", function(d) {
                    d3.select("#parcoords_secondary_grid")
                    .datum(d.slice(0,data_len))
                    .call(grid)
                    .selectAll(".divgrid_row")
                    .on({
                        "mouseover": function(d) { parcoords.highlight([d]) },
                        "mouseout": parcoords.unhighlight
                    });
                });
          


        }
    </script>
</body>
</html>